<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>K.I.S.S</title>
 <link href="http://qinjian623.github.com/atom.xml" rel="self"/>
 <link href="http://qinjian623.github.com"/>
 <updated>2013-08-15T20:45:53+08:00</updated>
 <id>http://qinjian623.github.com</id>
 <author>
   <name>Qin Jian</name>
   <email>qinjian623@gmail.com</email>
 </author>

 
 <entry>
   <title>减肥菜谱little scheme</title>
   <link href="http://qinjian623.github.com/2013/07/03/little_scheme"/>
   <updated>2013-07-03T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/07/03/little_scheme</id>
   <content type="html">&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
花了大概一天的时间看完了The little scheme。全书前前后后加起来不过200多页。起码这点上这书算得上little，当然，要是算上姊妹篇，算了，还是别算了，算上就是huge了，看完一定就恶心了。
&lt;/p&gt;

&lt;p&gt;
作者么，王垠大大的老师。身为王大脑残粉，这本书现在才来看已经是应该被油炸了，以弥补自己没有做到基本的脑残粉的指责啊。
&lt;/p&gt;

&lt;p&gt;
一般来说，剧透都要挨千刀的，而我一直也都乐于享受那挨千刀的特殊快感。但是，这本书我实在是透不出来，只因自己实在资历浅，智商低，看不懂剧情。但是，我深深的觉得减肥的一定要看这本书，因为书中内容真的真的很适合减肥。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; scheme基本语法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
书的内容基本介绍的是scheme，确实仅仅”基本“是scheme，剩下的都不是scheme了。剩下的不是scheme的东西就比较多了，总共200多页的书，大概有200多页说的都是这些剩下的东西。本来么，lisp没什么语法可介绍的，看着别的书介绍语法都可以弄的比little scheme这本书还厚了，实在是替作者不平啊。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 递归&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
毕竟目标读者是初学者，所以递归就是一步一步来的，最基本的慢慢增长的一个函数体一个递归调用，到一个函数体，递归调用乱入。亏得自己也是被调教过的，所以，这个方面的东西还是扫一眼就明白了。作者还是很体贴的过段时间就要总结总结给一个Commandment。
&lt;/p&gt;

&lt;p&gt;
当然，其实递归与求极限有点类似。递归的目的当然不是为了烧CPU，浪费电，破坏熊猫们的美好家园，那是挖比特币的人干的，回到递归，总是要结束的。但是结束总要一个指标吧，其实像极限一样，是不是收敛到某一点上。递归的收敛就看返回条件了，书中的例子都是教科书般的，确实，本来书就是教科书，所有的递归结束条件都是数值下降到0,或者列表前进到null。实际运用可能就没有教科书这么漂亮了，可以是某一个人工定义的值，到了这个值就结束。既然是逼近的，也就类似梯度下降的情况，也存在无法逼近的无限递归了，在结束值上下跳动的就是这种，当然也还有非收敛的情况，这就更明显了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; FP模式的一次次暗示&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
真的是暗示，没有任何明示的，作者真是循循善诱啊。函数的“第一级”地位，都是提前挖了坑的，然后慢慢把你推进去。还有就是利用函数进行抽象的设计思路，作者都是一步步的来。相对来说比较自然，其实就是一个设计思路再一个个的连续的问题下展示出来，看，码农的本质表现出来了，单词量不够啊，表述不出来。用模式一词有点糟蹋了作者的精心设计，可以说是思想吧，当然，都是很基础的思想。哪怕有高级的我也领悟不到的，初级的还是可以看出来端倪的。当然这种模式和设计模式那种人为的设计有所区别，模式么，是自然所表现出来的共同特性，所以模式理应是一种事物做具备的自然属性，而不是人工属性。人工属性的，那叫做规则。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 几个不断进化的Commandment&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
其实，这些Commandment对非非常的初学者来说没有多大意义，很多都是很自然的逻辑，没必要拿出来当做教条，但是把这几个东西不断的修正路线理一理还是可以看出来程序设计的通用性实践是如何建立起来的，这个通用性实践，可以说就是设计模式吧。其中着重的就是递归程序设计中的一些设计模式，比如对数字、非递归的列表、树形列表的一些递归的设计思路，当然这个其实没有必要记忆，是很自然的逻辑。不过这些Commandment非常具体的描述了这些自然的逻辑。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 丘奇编码&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
函数式，这个自然离不开，里面实现了数字的丘奇编码。还有一些集合以及逻辑的操作。这个作者这个坏蛋也是没说出来的，魂淡啊，瞬间感觉到了作者在读者看这些内容的时候的智力优越感。当然，这还不止，后面还有更有优越感的东西，作者也都没有说出来。但是啊，话说评价应该客观的不是么，所以，作者还是给了出处的线索的，认真帝应该还是可以感受到那种丝丝证据终获奇特财富的感觉。可惜啊，我觉得，这个时候作者依然会坏笑着在一旁偷看这些认真帝们的。大师之所以是大师，就是因为他能多看几步，既见森林，也见树木，你的一步步都在人家手掌。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 程序设计&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
自底向上的，也有自顶向下的开发方式都有以及两者的结合，都是慢慢的从一个小小的思路慢慢扩展，最后实现程序的实体。这玩意也确实只能在lisp上出现了，你要是换成C系的语言，就请先学一个学期的语法、熟悉环境吧。当然，也可能是自己毕竟不是小白，回头来看的结果。换成自己大一的时候，估摸着也要糊涂到死槽方尽。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 中、前缀语法的简单说明&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
这个自然是lisp的语法了，但是不是最开始说明的，而是几章过后，作者整了个比较简单的计算器的语法解释器。先是地球人使用的中缀，然后，欢迎加入火星的前缀表示法，该成了前缀实现。当然，这个解释器很“简单”，因为别急，后面作者还给了一个scheme自己的解释器，当然，老规矩，作者也是就那么一提，没具体说是什么东西。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; FP终于出现&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;
在Lambda Ultimate一章中，FP终于告别了影子模式，走上前台。当然，老规矩，作者没提这个名字。而且在这章中，抽象、函数、分层、简化都大爆发了。作者也提了lambda的语法，不过这个已经不怎么重要了。作者将几个之前的函数又摆弄出来了，感觉功能不够强悍，于是往上加功能，然后发现类似的功能比较接近么，合起来吧，怎么合：抽象、传函数。然后又发现，妈的，不同功能的代码实现长得也挺像的，合吧，怎么合，继续传函数。最后把差不多能变的东西都给改成函数传进去了，剩下就是不怎么能改动骨架了。那玩意我估摸着应该就叫做框架了，所以么，我个人理解，框架么，重要的不是这个框架有多么多么多的功能，重要的是把共同点都抽象出来，需要变化的都给整成变量，当然这里的变量包括文件、函数等等了。
作者这么流氓的改动，感觉完全就是拿着diff工具匹配代码，看着diff出来比较接近的，不用管功能、逻辑什么，改吧，改动到可以合二为一。用一句话来说就是&quot;Ask yourself what the difference is&quot;。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-10&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; 其他问题&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;p&gt;
书中还有不少其他问题，就集中放一起：
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-10-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;10.1&lt;/span&gt; 图灵停机问题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-1&quot;&gt;
&lt;p&gt;
作者顺带给读者证明了下图灵停机问题。作者说不定心里也痒痒想把不完备定理也放进来。这个作者貌似也老规矩没说是什么，当然问题提出来貌似也比较突兀，相对书里其他的自然演进。这个放在初学者的书里倒也别有洞天。不过自己看到这个内容就过了一遍，不想再仔细看了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-10-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;10.2&lt;/span&gt; 递归与函数不动点问题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-2&quot;&gt;
&lt;p&gt;
lambda算子的递归和不动点，这个也是函数编程里面的内容，作者也把过程走了一遍，自己实在不想一天死太多脑细胞，于是就简单扫了扫了，基本算是跳过了，回头要是哪天自己蛋疼了，可以再翻一翻么。其实，上句话是自我欺骗&amp;#x2026;&amp;#x2026;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-10-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-10-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;10.3&lt;/span&gt; Continuation&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-3&quot;&gt;
&lt;p&gt;
这个作者也是简单提了提，真的只是很简单提了下。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-11&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-11&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt; 解释器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;p&gt;
应该是最后一章的内容吧，实现的就是一个scheme的解释器了。考虑到自己也用racket写过，这章就过的比较快了，突突突，就过去了，原理基本和自己实现的都一样，当然，这玩意原理肯定只能是一样的了，王大大自己也有文章说如何写一个解释器的。Coursera上也有Programming Language的课程，我的解释器就是课程里的作业。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-12&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-12&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;12&lt;/span&gt; 总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-12&quot;&gt;
&lt;p&gt;
后面还有个书单推荐列表，我看了看，尼玛我认得出的那几个名字都是重量级经典，剩下更多不认识也就不用说了。我只想说，他妈本科入门开的什么JB程序设计课程，直接用这本就成，后面的书单早点给学生看到可以让学生少浪费多少时间？坑爹教授用心查一查几个领头大学的课程表再设计课程体系也不至于这样。
还有了，全书无时无刻都在用实践说明，逻辑简化和设计先于代码的基本编程要求。
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&quot;When the difference you see, the truth you see.&quot;
&quot;Yeah，about  Newton and Calculus I'm talking.&quot;
&quot;Fine, and Leibnitz.&quot;
&quot;Feel the Force I will,bye.&quot; &amp;#x2013; Fake Yoda
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>20年的高效：纪念Vim 20周年</title>
   <link href="http://qinjian623.github.com/2013/06/20/20th_anniversary_vim"/>
   <updated>2013-06-20T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/06/20/20th_anniversary_vim</id>
   <content type="html">&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 翻译来源&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
arstechnica.com/information-technology/2011/11/two-decades-of-productivity-vims-20th-anniversary/
&lt;/p&gt;

&lt;p&gt;
一个程序员，用着Emacs来翻译这篇没有什么技术含量的软文，毫无利己的动机，把Vim的宣传事业当作自己的事业，这是什么精神？这绝对是吃饱了撑的慌，闲得蛋疼没事干，脱了裤子才放屁的共产主义奋斗终身的精神。
&lt;/p&gt;

&lt;p&gt;
当然，后面那些为什么人们用Vim的理由把其中所有的Vim机械的替换成Emacs也成立。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
vim首发于1991.11.2,恰好20年前的今天。虽然最初不过只为Amiga的vi克隆，不过很快就被移植于多个平台，迅速成长为最流行的vi兼容的编辑器。至今依然开发活跃，广泛使用在各个操作系统上。
&lt;/p&gt;

&lt;p&gt;
这篇文章，我们只一窥vi简史以及其后裔，然后再谈vim的诞生。同时也会一探使得vim如今依然光彩不减的那些让人拜倒的技术特性。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 前传&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
vi最初由Bill Joy开发于70年代后期。Bill是早期BSD开发者之一，后来更是和他人联合创建了Sun。vi是为类似ed的行编辑器ex开发的可交互的“可视”模式。于一个旧的ADM-3A的终端上开发，大约在鼠标流行的10年前。用户都依赖命令和通过键盘导航来和编辑器交互。
&lt;/p&gt;

&lt;p&gt;
ADM-3A的物理限制和特性造就了很多vi最为特立独行的特点。比如，vi使用h,j,k,l来作为方向键，那是因为ADM-3A的键盘上这些按键上都刻了代表方向的箭头。虽说这个设计不过是历史的偶然，但是却最后变成了十分高效的移动方式。这些按键的组合已经成为vi用户们的最爱了。同时这一导航模式已经被广泛应用在其他程序中，比如Gmail和Twitter在Mac OS X上的客户端。
&lt;/p&gt;

&lt;p&gt;
vi编辑器已经是UNIX世界里不可分割的一部分。Joy将其随BSD一起发布，ATT也将其放入SystemV中。vi最核心的功能和表现都已经成为POSIX的标准，自然也就成为很多主流的UNIX系统的一部分。
&lt;/p&gt;

&lt;p&gt;
vi的克隆，在80年代末到90年代初开始出现，并且都采用了更宽松的许可。Joy的vi实现基于ATT版本的ed，其代码不能自由分发。也只能用于那些从ATT获得UNIX许可的商业伙伴。
&lt;/p&gt;

&lt;p&gt;
最先异军突起的两个克隆是Stevie和Elvis。Stevie，为vi爱好者设计的ST编辑器，首先在1987年为Atari ST所开发，下一年就被移植到UNIX上，虽说还是比较原始，但也吸引了一些跟随者。Elvis，1990年首发，更加完善，设计能够提供更多的功能。她也是第一个支持语法高亮的vi克隆。
&lt;/p&gt;

&lt;p&gt;
尽管Elvis有不少用户，也一直在Slackware社区中流行，但是03年后就没有大更新了。Elvis先是替代了BSD在386的移植版本中的Joy的vi，不过后来BSD开发者又开发了一个新的克隆，nvi，他可以更好的符合Joy版本的行为。BSD大家庭中也还一直提供nvi编辑器。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 历史&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
最早的vim是Bram Moolenaar 于1988年在Amiga机器上开发的。Moolenaar不太满意Amiga平台上的各种vi克隆，于是决定自己写一个可以更加符合vi功能的。他在Stevie的基础上进行修改，据他自己说这是他当时在Amiga上能够找到的最好的vi克隆了。
&lt;/p&gt;

&lt;p&gt;
一个公开发布的vim版本是1991.11.2发布的1.14。在Fish Disk #591上发行，这是Fred Fish的Amiga免费软件集合的一部分。随着首次登场，用户们就开始提交补丁了。
&lt;/p&gt;

&lt;p&gt;
“很早之前我自己弄了个Amiga计算机。因为我之前一直使用Vi，所我希望能够找到一个类似Vi的Amiga程序。虽说找到了一些，但是都不够好，于是我找了其中最好的那个开始改进。刚开始只为能够完成所有Vi可以实现的功能。后来我就慢慢的加入一些新特性，比如多层撤销，”这是2001年 Moolenaar在《Free Software》杂志第一期上说的。“我开始写Vim的时候只是为了自己用的舒服。后来我发现其实它对其他人也有用处，于是就把它发布出来了。之后我就一直努力让这个有巨大用户群的软件越来越好。能够创造有用的事物真的是很有意思的事情。而且，还有一群非常棒的共同作者和高级用户，这特别能够激励我。”
&lt;/p&gt;

&lt;p&gt;
Moolenaar 自己摆弄了一份宽松的copyleft的软件许可。许可允许用户自由的使用、分发、重用代码，但是同时给了维护者要求别人贡献回项目的权利。6.0版本中也已经加入了一些新的说明，确保之前的预科与GNU的GPL协议能够兼容。
&lt;/p&gt;

&lt;p&gt;
Vim是一个开源软件项目，同时也是一个慈善项目。 Moolenaar在荷兰帮助建立了一个叫做ICCF的基金会，旨在帮助一个乌干达的儿童救助中心。他鼓励用户考虑对ICCF或者是Kibaale儿童基金进行捐助。作为基金会的赞助人，他几乎每年都会拜访Uganda，监督中心的运行进展。
&lt;/p&gt;

&lt;p&gt;
Vim名称本来意思是Vi模拟（IMitation），不过后来变成了Vi加强(IMproved)。名字是在1.22版本发布的时候改变的，那次发布包括了很多吸引人的新特性和UNIX的一直。1994年的3.0版本实现了多缓冲区。96年的4.0版本则提供的图形用户界面。98年的5.0版本增加了语法高亮，2001年的6.0则支持垂直的窗口分割和用来简化脚本载入的插件系统。
&lt;/p&gt;

&lt;p&gt;
之后很多很多其他的特性也都加入进来。Vim也已经被一直到了很多其他的平台上，包括Linux、BeOS、Windows、Mac OS X还有QNX。尽管Vim最初是设计工作在终端下的，目前也已经有很多利用各种用户界面工具包开发的的图形界面前端了，有方便的菜单、工具栏、滚动条。
&lt;/p&gt;

&lt;p&gt;
Vim最新的主版本是于2006发布的7。包括了很多十分让人耳目一新的特性，包括支持本地内容的拼写检查，自动完成系统，tab界面，撤销分支。最新的次版本是7.3,去年发布，引入了持久撤销功能、Python3支持。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 如今的Vim&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
由于克隆的广泛使用，“vi”这一名称已经被用来描述任何与vi兼容的编辑器了，这些编辑器或多或少都实现了POSIX标准中的特性。如今，Joy的vi的直接后裔只存在于少数的商业UNIX环境中。所有现代BSD和Linux系统包含的都是某个克隆版本，而非vi原始版本了。
&lt;/p&gt;

&lt;p&gt;
BSD发新版依然使用nvi，Mac OS X和大部分主流Linux系统都是Vim。很多情况下，vi命令不过就是直接启动Vim的符号链接，或者是启动Vim的vi兼容模式的脚本。如果在过去的10年里，你用过Linux系统上的vi，很有可能你用的就是Vim。
&lt;/p&gt;

&lt;p&gt;
不像其他优秀的vi克隆，Vim一直处于活跃的开发状态，也有很多贡献者。每年新的特性都在被开发和加入，让Vim越来越强大。 Moolenaar也一直作为首席维护做着大量工作确保贡献的补丁的功能运行良好，集成如Vim正确。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 为何人们使用Vim&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
使用一个基于命令的编辑器第一眼开上去似乎有点老古董，不过Vim丰富的特性和可以深度扩展已经让很多高级计算机用户一直坚持使用。它始终是一个流行的编辑器，在计算机程序员、Web开发者、科学家还有系统管理员群体中，更是如此。
&lt;/p&gt;


&lt;p&gt;
Vim的优势有时很难在不熟悉编辑器的用户群面前描述清楚。当然，如何使用Vim工作实在不是这篇文章的篇幅能够覆盖的，以下只是对一些有用功能的简短描述：
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt; 顺畅的多文档界面：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;p&gt;
在Vim中，你的文件和未保存的文档都是在缓冲区中。编辑器则给你了你很大的空间来控制这些缓冲区的显示方法。你可以横向或者垂直分割窗口任意多次，这样你就可以同时查看多个缓冲区了。你也可以在多个窗口中现实同一个缓冲区，这样就可以让你同时查看同一文档的不同部分了。你也可以将各种不同的分割方式组织成tab。这些布局和状态也可以保存在一个“session”中，随后还可以恢复。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.2&lt;/span&gt; 使用巧妙的键盘快捷键进行编辑：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;p&gt;
Vim对输入和编辑有区分不同的模式。插入模式就如同普通的文本编辑器，命令可以通过简单的快捷键执行你按键后字符都会被加入缓冲区。在普通模式中，按键的组合会执行相应命令。最有用的命令就是你可以快速的在文本中游走还能够操作文本。你还可以自由定制自己的按键绑定和命令。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.3&lt;/span&gt; 多剪切板：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;p&gt;
不同于简单的剪切板，Ｖim利用叫做寄存器的机制。标准的剪切和删除操作会保存在默认的寄存器中，用户也可以指定一个特别的寄存器来存储他剪切和拷贝的内容。这就像是多个剪切板一样。寄存器中的内容在退出的时候会持久保存。你可以退出编辑器，等到重新打开编辑器的时候，你还是可以获得之前的寄存器中的内容。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.4&lt;/span&gt; 宏：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-4&quot;&gt;
&lt;p&gt;
Vim有宏的功能，可以允许你录制键盘按键方便随后重复。宏可以简单通过键盘创建，包含多个模式下的操作。宏是保存在寄存器中的，如同剪切板中的内容，这样，你可以像上条所说的一样，可以在之久保存方便不同的应用中通用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.5&lt;/span&gt; 十分强大的搜索功能：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-5&quot;&gt;
&lt;p&gt;
Vim提供很智能的工具来搜索和替换，包括对正则表达式的扩展支持。也有一个内置的grep命令，可以和Vim方便的quickfix功能结合在一起，可以在一个特殊的缓冲区里显示结果列表，允许你方便的在其间跳来跳去。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.6&lt;/span&gt; 超级丰富的扩展：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-6&quot;&gt;
&lt;p&gt;
Vim十分适于脚本化，也非常适合自动化。它有自己的脚本语言，语言里包括容器、类型、独特的变量作用域模型，还有很多有用的Vim的功能函数。它也有内置的脚本引擎和绑定，可以方便允许通过其他的主流编程语言来自定义功能，这些语言包括：Perl、Python、Ruby、Tcl和Lua。Vim也可以为其他的语言扩展语法高亮的功能，或者也可以自定义颜色组合。用户都会广泛的通过在线的代码库分享他们的脚本或者将其打包成插件的形式。如之前所述的那样，为Vim安装一些简单的插件和脚本可以让Vim具备很多继承开发环境所具有的功能。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6-7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.7&lt;/span&gt; 可移植性：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-7&quot;&gt;
&lt;p&gt;
Vim可以在几乎任何地方使用。已经被广泛的使用在Windowd,Linux,Mac OS X上，还有其他很多平台。用户在这三个主流系统中都可以从终端中或者本地图形界面上运行Vim。很多系统管理员喜欢Vim就是因为当他们通过ssh在终端上连接到Linux或者Mac OS X上时，Vim可以提供一个十分高效的文本编辑环境。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
我自1998年开始使用Vim，也就是我把Linux作为我自己的主要的桌面操作系统后一年。我已经用它写了好几千的文章，还有很多很多行代码。尽管我体验过各种方便的现代文本编辑器，我从没有找到一个可以匹敌Vim的效率。这么多年来我天天都用Vim，现如今我还是可以发现新特性、功能、有用的行为可以进一步提升我的效率。
&lt;/p&gt;

&lt;p&gt;
Vim已经有20多年历史。但他可不是白胡子的老爷爷，他依然与之前一样风采依旧，始终吸引新用户。虽然学习续签陡峭，但是从中获得的效率绝对可以收回那些付出的学习成本。
&lt;/p&gt;

&lt;p&gt;
你是否还记得自己第一次使用vi或者Vim？为了纪念这珍贵的编辑器20周年，分享你的记忆和最爱的特性到留言区去吧。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;postamble&quot; class=&quot;status&quot;&gt;
&lt;p class=&quot;date&quot;&gt;Created: 2013-06-20 四 16:49&lt;/p&gt;
&lt;p class=&quot;creator&quot;&gt;&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 24.2.1 (&lt;a href=&quot;http://orgmode.org&quot;&gt;Org&lt;/a&gt; mode 8.0.3)&lt;/p&gt;
&lt;p class=&quot;xhtml-validation&quot;&gt;&lt;a href=&quot;http://validator.w3.org/check?uri=referer&quot;&gt;Validate XHTML 1.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Coursera的机器学习课程下载器</title>
   <link href="http://qinjian623.github.com/2013/05/24/coursera_ml_downloader"/>
   <updated>2013-05-24T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/05/24/coursera_ml_downloader</id>
   <content type="html">&lt;div id=&quot;content&quot;&gt;
  &lt;p&gt;
    虽说现在也都是在线看的课程的视频，说不定自己哪天蛋疼了就有线下看的需求&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。
  &lt;/p&gt;
  &lt;div class=&quot;org-src-container&quot;&gt;

    &lt;pre class=&quot;src src-bash&quot;&gt;base_subtitles_url='https://class.coursera.org/ml-003/lecture/subtitles?q=SMTM_en&amp;amp;format=srt'
      base_mp4_url='https://class.coursera.org/ml-003/lecture/download.mp4?lecture_id=SMTM'

      for i in `seq $1 $2`
      do
      subtitles_url=`echo $base_subtitles_url| sed &quot;s/SMTM/$i/g&quot; `
      mp4_url=`echo $base_mp4_url| sed &quot;s/SMTM/$i/g&quot;`

      echo &quot;Downloading video: &quot;$i
      wget --progress=bar:force -q -c $mp4_url -O $i'.mp4' 2&amp;gt;&amp;amp;1 
      echo &quot;Downloading subtitle: &quot;$i
      wget --progress=bar:force -q -c $subtitles_url -O $i'.srt' 2&amp;gt;&amp;amp;1 
      done
    &lt;/pre&gt;
  &lt;/div&gt;

  &lt;p&gt;
    使用方法么：
  &lt;/p&gt;
  &lt;div class=&quot;org-src-container&quot;&gt;

    &lt;pre class=&quot;src src-bash&quot;&gt;./download_ml.sh start end
    &lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;
    会下载[start end]闭区间的视频和字幕，视频的编号是从1开始的。现在应该有57个视频了。本身不是并行下载的，不过shell里面多跑几个就变成并行的了，比如：
  &lt;/p&gt;
  &lt;div class=&quot;org-src-container&quot;&gt;

    &lt;pre class=&quot;src src-bash&quot;&gt;for ((i=0;i&amp;lt;5;i++));do { s=`echo $i*10+1|bc -l`; e=`echo $i*10+10|bc -l`; ./download_ml.sh $s $e &amp;amp;} done;
    &lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;
    这个就是4并发，每发10个。
  &lt;/p&gt;
  &lt;div id=&quot;footnotes&quot;&gt;
    &lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
    &lt;div id=&quot;text-footnotes&quot;&gt;

      &lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
          不作就不会死啊。我觉得我也是早晚要去领便当的人啊。
      &lt;/p&gt;&lt;/div&gt;


    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>内核之辩2</title>
   <link href="http://qinjian623.github.com/2013/05/22/ast_reliable_os"/>
   <updated>2013-05-22T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/05/22/ast_reliable_os</id>
   <content type="html">&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 说明&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Tanenbaum-Torvalds Debate这个是N年前就已經闻名于世了，这个Part2貌似是Andrew S. Tanenbaum时隔多年又来一发的结果，当然，肯定不是他想来一发的。
原文地址：
&lt;a href=&quot;http://www.cs.vu.nl/~ast/reliable-os/&quot;&gt;http://www.cs.vu.nl/~ast/reliable-os/&lt;/a&gt;
以下就是正文了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
貌似这次又要来一发&lt;a href=&quot;http://www.oreilly.com/catalog/opensources/book/appa.html&quot;&gt;微内核之争&lt;/a&gt; 了。不过在上技术流前，我还是有几句话要说的。好多人都说或者是暗示我和Linus是仇人见面分外眼红。其实没这回事。我之间见过他一次。他还是一个很不错的人，而且非常聪明。虽说我们在一些技术问题上有点小分歧吧，但是也不至于变成仇人。所以么，观点上的不同不代表我们个人关系不和。所以我没什么针对Linus个人的，也很尊重他所取得的成就。
&lt;/p&gt;

&lt;p&gt;
为防万一有谁不知道这件事情，我先说一下，几年前，微软雇了个叫Ken Brown枪手，写书说Linus的Linux是从我的MINIX 1系统上剽窃的。我可是&lt;a href=&quot;http://www.cs.vu.nl/~ast/brown/&quot;&gt;跳出来说了&lt;/a&gt; ，这纯属污蔑，要为Linus正名。虽说我不怎么感冒Linux的设计理念吧，不过Linux确实是他写的，和我没关系。至于我听到Brown瞎扯说Linus从我这里剽窃东西，我瞬间就怒了。
&lt;/p&gt;

&lt;p&gt;
开始前，容我再再说一句：从本质上来讲我兴趣不在微不微内核上。我其实是想弄个很稳定可靠又安全的操作系统，然后呢，微内核正好躺枪，我觉得实现这个目标得靠它才可以。下面再细说。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 嘴仗&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
听说在Colorado的Air Force Academy有这么个标语：
&lt;/p&gt;

&lt;p&gt;
脑袋清楚的时候再说话。&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;

&lt;p&gt;
不知道是不是真有这句话，不过我还是很同意这个观点的。
&lt;/p&gt;

&lt;p&gt;
这么多年了，各种论坛（比如Slashdot）都一直有帖子没完没了的吐槽微内核有多慢，微内核有多难写程序，微内核都没什么商用的，当然还有其他战斗力为渣的废话。其实吧，这些帖子都是那些不知微内核为何物或者是不知微内核为何的人发的。我觉得吧，发这些帖子的人起码也应该先试试看微内核操作系统后，然后再发个帖子，开头带上这句，“我已经试过微内核操作系统了，然后我自己发现了X，Y，Z现象”。这样的吐槽才有战斗力么。
&lt;/p&gt;

&lt;p&gt;
要想体验，最简单的当然是去下载安装&lt;a href=&quot;http://www.minix3.org/&quot;&gt;MINIX 3&lt;/a&gt;啦。免费又开源（而且是BSD的授权协议哦），下了镜像后就可以刻在CD上，然后启动，然后登陆。不过你要是想干点实在的，还是需要给磁盘分个区的（1G就够），然后把系统装上。请千万记得先把&lt;a href=&quot;http://www.minix3.org/doc/A-312.pdf&quot;&gt;安装手册&lt;/a&gt; 打印出来读一读。安装差不多要十分钟的样子。然后就按照手册上说的把CD上的软件包都装上。等你安完了进入X系统就能实实在在体验下了。你也可以试着照手册上的方法重新构建整个系统。内核加上用户态的驱动还有所有的用户态的服务（总共125个）需要5-10秒。
&lt;/p&gt;

&lt;p&gt;
请千万记得，如今的MINIX 3可不再是你爷爷当年用的MINIX了。MINIX 1不过是教学用途，到现在还在很多大学里用着。Al Woodhull和我还专门为它写了&lt;a href=&quot;http://www.amazon.com/gp/product/0131429388/sr=1-1/qid=1147293670/ref=sr_1_1/104-9514733-5370326?_encoding=UTF8&quot;&gt;本书&lt;/a&gt; 。MINIX 3可不止于此，目标就是为了建一个超可靠的、能够自愈、而且&lt;a href=&quot;http://www.tech2.com/india/news/internet/linux-too-bloated-for-$100-laptop/101/0&quot;&gt;不会越来越来臃肿&lt;/a&gt; 的操作系统，而且可能在&lt;a href=&quot;http://laptop.org/&quot;&gt;100刀笔记本项目&lt;/a&gt; 上能用上，造福第三世界的孩子们，还有嵌入式系统。MINIX 1和MINIX 3的关系就像Windows 3.1和Windows XP的关系：同名不同姓的熊孩子。所以，你要是大学时用过MINIX 1，试试3吧，包你满意。它完全是小而精的UNIX系统，包括了X、bash、pdksh、zsh、cc、gcc、perl、python、awk、emacs、vi、pine、ssh、ftp、GNU工具链还有其他400多别的程序。全靠那个小小的微内核，现在马上立刻你就可以拥有！
&lt;/p&gt;

&lt;p&gt;
所以，亲们，请不要再一遍遍的这样吐槽了：“如果Tanenbaum认为微内核NB，干嘛不自己动手写一个？” 爷爷我真的已经写了。做人要低调，其实是我和我的学生、程序员一起写的。虽说它还没有Linux或者BSD这么完整和成熟吧，不过，这就是明证啊，谁说的不能在一个小而易懂的微内核上实现一个在用户态中运行的可靠的、自愈、多服务的UNIX克隆？当然，别把我说的不成熟（我们就3个人，花了一年多一点的时间）和那些与微内核相关的问题混淆了。我们会增加更多的功能，移植更多的软件（我们也欢迎你的加入）。从05年十月起到现在MINI3的网站已经有&lt;a href=&quot;http://wereld.cs.vu.nl/report/index.html&quot;&gt;40多万&lt;/a&gt; 访问量了。谁用谁知道。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 论文&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
不久前，我带的PhD &lt;a href=&quot;http://www.cs.vu.nl/~jnherder&quot;&gt;Jorrit Herder&lt;/a&gt;，我同事&lt;a href=&quot;http://www.cs.vu.nl/~herbertb&quot;&gt;Herbert Bos&lt;/a&gt;，还有我写了篇叫做&lt;a href=&quot;http://www.computer.org/portal/site/computer/menuitem.5d61c1d591162e4b0ef1bd108bcd45f3/index.jsp?&amp;pName=computer_level1_article&amp;TheCat=1005&amp;path=computer/homepage/0506&amp;file=cover1.xml&amp;xsl=article.xsl&amp;&quot;&gt;《我们能否构建可靠而安全的操作系统？》&lt;/a&gt; 的文章，然后投了IEEE的《Computer Magazine》，这个可是IEEE计算机学会的旗舰刊物哦。已经通过了，发表在2006五月刊上。这篇文章里面我们说明了，其实对大部分计算机用户来说，可靠性要比性能更重要，而且讨论了4个目前正在进行中的研究项目，都是致力于改善操作系统的可靠性。其中3个用的都是微内核。IEEE把这篇文章放在他们的网站上，然后就有人把&lt;a href=&quot;http://developers.slashdot.org/developers/06/05/08/1058248.shtml&quot;&gt;链接&lt;/a&gt; 给发上Slashdot了，重燃微内核与宏内核这一古老纷争的战火。虽说我是这篇文章的共同作者吧，不过我发誓我绝对不是想要重启“Linux已经过时了”这种争论。
&lt;/p&gt;

&lt;p&gt;
Linus&lt;a href=&quot;http://www.realworldtech.com/forums/index.cfm?action=detail&amp;id=66630&amp;threadid=66595&amp;roomid=11&quot;&gt;回应&lt;/a&gt; 了，所以可能又要来一个小小的争论了。没问题，不过各位亲，请千万记得多关注下技术话题。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; Linus的论点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
Linus的基本观点是微内核需要分布式算法，但是目前分布式算法都很屎。尽管我和&lt;a href=&quot;http://www.cs.vu.nl/~steen&quot;&gt;Maarten van Steen&lt;/a&gt;一起写了一&lt;a href=&quot;http://www.amazon.com/gp/product/0130888931/sr=1-1/qid=1147294749/ref=sr_1_1/104-9514733-5370326?_encoding=UTF8&quot;&gt;本书&lt;/a&gt; 专门解决分布式算法惨不忍睹的问题，我还是得承认分布式算法确实是个大坑。过去十年我也设计、编写和公布了两个分布式系统，&lt;a href=&quot;http://www.cs.vu.nl/pub/amoeba&quot;&gt;Amoeba&lt;/a&gt; （LAN环境）和&lt;a href=&quot;http://www.cs.vu.nl/globe&quot;&gt;Globe&lt;/a&gt; （WAN环境）。分布式算法的主要问题是由于可能会中途丢失消息还有其他一些不确定的事情，比如远程进程死掉了或者仅仅是运行缓慢，造成缺少一个共同的时间基准。但是呢，这些问题对于一个单机上运行的微内核系统环境都不存在。所以，我同意Linus说的分布式算法难度比较大，但是这个和我们讨论的问题没什么关系。
&lt;/p&gt;

&lt;p&gt;
另外，大部分用户空间的组成都是驱动，他们和服务的交互都是很简单直接的。所有的字符设备都遵循一样的协议（读写字节流），所有的块设备也一样（读写块）。用户空间的服务组件都不大：文件服务、进程服务、网络服务、轮回服务，还有数据存储和其他不多的服务。每个的任务都很明确，和系统其他部分的交互也都很明确。比如说数据存储，提供了一个发布/订阅的服务，保证了其他组建之间的松耦合，这可是很有用的。服务组件的数量未来也不会有大量的增加。所以复杂性也是在可控范围内的。我说的这些都不是推测，毕竟我们都已经实现了这样的系统。不信你就自己装MINX 3看代码去。
&lt;/p&gt;

&lt;p&gt;
Linus也说共享数据结构是个好主意，这个我不敢苟同。如果你上过操作系统的课程就肯定记得课程上大把大把的时间还有课本上大把大把的空间都是拿来讨论协作进程间同步和互斥的。只要两个以上的进程可以访问相同的数据结构，你就要非常非常小心否则就等着不得好死吧。哪怕带上信号量、管程、互斥锁还有其他的好方法，想要把问题弄对也难如登天。
&lt;/p&gt;

&lt;p&gt;
我的观点就是你应该拼着命的避免共享数据。系统就应该由多个对外完全隐藏了自己内部数据的小模块组成。这些模块允许外部调用的借口都应该是良好定义的可以满足工作需求的“瘦”接口。这其实也是面向对象编程在干的事情，隐藏信息而不是共享。我认为隐藏信息（如&lt;a href=&quot;http://en.wikipedia.org/wiki/David_Parnas&quot;&gt;Dave Parnas&lt;/a&gt;所言）是个好注意。这样你就可以随意改变数据结构、算法、模块设计，只要你保证借口不变就不会影响系统的正确性。软件工程课上都会教授这点。而Linus说过去20年的面向对象编程都是误导，这点我可不同意。
&lt;/p&gt;

&lt;p&gt;
一旦你想保护一个模块的纯洁数据不被别的模块的脏手玷污，那么第一步很显然就是把模块们放在不同的地址空间，然后通过MMU的硬件来保证。应用在在操作系统上，就是微内核加上一堆通过消息和良好定义的接口和协议通讯的用户态的进程。这种设计就更加干净易维护。Linus由于自己大量的宏内核的经验而没怎么接触过微内核和分布式系统，所以得出了他的结论。我的经验则来自于自己设计、实现和发布过这样操作系统。由于经历不同，所以我们对于什么简单和什么容易有不同的观点。
&lt;/p&gt;

&lt;p&gt;
对于可靠操作系统的的论述也可以参看Jonathon Shapiro的短文&lt;a href=&quot;http://www.coyotos.org/docs/misc/linus-rebuttal.html&quot;&gt;《揭露Linus最近的言论》&lt;/a&gt;。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 微内核实际应用了么？&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
简单回答下：当然。周一（五月八日），Slashdot上又是一票类似的无休止的评论：“要是微内核真那么NB，怎么我从没见过？”其实吧，呵呵，有的。除了MINIX 3,还有：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.qnx.com/news/pr_1074_4.html&quot;&gt;QNX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ghs.com/news/20040731_INTEGRITY.html&quot;&gt;Integrity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sysgo.com/en/products/pikeos/technology/microkernel/&quot;&gt;PikeOS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.symbian.com/developer/techlib/papers/HWinterupt/HwInterrupt.pdf&quot;&gt;Symbian&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://l4linux.org/&quot;&gt;L4Linux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://research.microsoft.com/os/singularity/&quot;&gt;Singularity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://encyclopedia.thefreedictionary.com/K42&quot;&gt;K42&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arstechnica.com/reviews/2q00/macos-qna/macos-x-qa-3.html&quot;&gt;Mac OS X&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/hurd/hurd.html&quot;&gt;HURD&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coyotos.org/&quot;&gt;Coyotos&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
QNX在商业系统中广泛应用。比如，思科最&lt;a href=&quot;http://www.lightreading.com/document.asp?site=lightreading&amp;doc_id=53319&quot;&gt;NB的路由器&lt;/a&gt; 就是用的他们，另外我打包票，思科是很很关心性能问题的。
&lt;/p&gt;

&lt;p&gt;
在军事和航空领域的佼佼者就是Green Hills的Integrity，这两个领域可靠性要求都是很高的。
&lt;/p&gt;

&lt;p&gt;
PikeOS 也是另外的一个微内核的实时操作系统，广泛应用于国防、航空还有工业的应用。
&lt;/p&gt;

&lt;p&gt;
Symbian也是另外一个流行的微内核系统，主要应用在手机上。不过不是纯的微内核，算是混合内核吧，因为驱动都是在内核里，不过文件系统、网络还有电话服务都是在用户空间。
&lt;/p&gt;

&lt;p&gt;
我可以三天三夜讲不停，不过很显然在对可靠性和安全性要求较高的应用上，设计者基本都是选择微内核的操作系统。Linus个人可能不太关注嵌入式实时系统领域（这一领域十分看重性能、可靠性和安全性），这些领域的市场都是很大的，很多相关的公司都认为微内核是实现这些目标的途径。
&lt;/p&gt;

&lt;p&gt;
回到下PC领域吧，还有个L4Linux，由Technical University of Dresden（TUD）的Hermann Härtig的团队开发。可以将整个Linux运行在L4微内核上的用户空间里，而性能只低了几个百分比。使用微内核可以允许TUD的师生们在L4基础上构建新的系统，比如：&lt;a href=&quot;http://os.inf.tu-dresden.de/papers_ps/sintra98.pdf&quot;&gt;DROPS&lt;/a&gt; （重实时性）和&lt;a href=&quot;http://os.inf.tu-dresden.de/papers_ps/nizza.pdf&quot;&gt;NIZZA&lt;/a&gt; （重安全性），这些系统都可以完全访问Linux而不用修改代码来增加新特性。这样，他们可以实现在新的设备上运行旧程序。也有其他团队使用L4来进行操作系统研究的，比如&lt;a href=&quot;http://www.ertos.nicta.com.au/software/kenge/wombat/latest/&quot;&gt;Wombat&lt;/a&gt; ，半虚拟化的Linux用于支持在嵌入式系统运行遗留的旧程序。还有&lt;a href=&quot;http://demo.tudos.org/&quot;&gt;TUD-OS&lt;/a&gt; 以及更多更多。
&lt;/p&gt;

&lt;p&gt;
微软也对微内核感兴趣。它可是比任何人都明白维护一个宏内核都多让人想死。Windows NT 3.1就是个三心二意的微内核尝试，不过搞砸了，性能在90年代初期的硬件上不足，所以就放弃这一尝试了，当然，暂时的。目前，它正在目前的硬件上再次尝试，结果就是Singularity。我知道很多人都说要是微软真要这么干下去，那就蠢死了。不过推动这个项目的人，Galen Hunt和Jim Larus都不笨，人家知道Windows一团糟，要找个新路线。哪怕是负责Vista的都知道有问题，把驱动往用户空间里移，这可是我一直提倡的。
&lt;/p&gt;

&lt;p&gt;
大约十年前，IBM开始从头开发一个新的高性能的操作系统用来服务它的超级大客户。一个明确的目标就是把系统功能从内核内转换成服务组件和应用程序的组合，这很类似微内核。这个系统，K42,已经部署在能源部和其他地方了。
&lt;/p&gt;

&lt;p&gt;
Mac OS X也是类似微内核的。在内部，就是由Mach的微内核和之上的Berkeley UNIX组成的。因为所有东西都运行在内核态（就为了那么点可怜的性能），所以不是一个真正的微内核，不过Carnegie Mellon University很多年前就已经把 Berkeley UNIX的放Mach的用户空间里运行了。所以再来一次又不是不可能，也就想L4Linux一样损失一点性能。把苹果的BSD的代码（Darwin）往L4上移植变成真的微内核系统也已经有人&lt;a href=&quot;http://www.ertos.nicta.com.au/software/darbat/&quot;&gt;正在做&lt;/a&gt; 了。
&lt;/p&gt;

&lt;p&gt;
虽说一直都是展望的巨人，行动的矮子，GNU HURD也是微内核的。两个都是，前一个版本基于Mach，后一个L4。第三个版本或许基于另一个微内核，Coyotos。HURD是&lt;a href=&quot;http://en.wikipedia.org/wiki/Richard_Stallman&quot;&gt;Richard Stallman&lt;/a&gt;的设计作品，他也是emacs、gcc，还有其他广泛使用的软件，以及GPL的作者以及著名的&lt;a href=&quot;http://www-tech.mit.edu/V110/N30/rms.30n.html&quot;&gt;麦克阿瑟天才奖&lt;/a&gt; 得主。
&lt;/p&gt;

&lt;p&gt;
另一个开发中的微内核系统是Coyotos，EROS的后继。相对可靠性更加集中于安全性，不过么，放不断膨胀的内核里面，这两个相关的问题都会越来越明显。
&lt;/p&gt;

&lt;p&gt;
我就不说虚拟化的东西了，比如&lt;a href=&quot;http://www.cl.cam.ac.uk/Research/SRG/netos/xen/&quot;&gt;Xen&lt;/a&gt; 和&lt;a href=&quot;http://www.trango-systems.com/english/frameset_en.html&quot;&gt;Trango&lt;/a&gt; ，和微内核有不少区别，但是也都秉承内核态代码越少越好的特点。这一特点一直是我强调的构建可靠和安全系统的关键。
&lt;/p&gt;

&lt;p&gt;
看看 MINIX 3, QNX, Integrity, PikeOS, Symbian, L4Linux, Singularity, K42, HURD, Coyotos还有那一坨坨其他的一个理念的系统，显然不止我一个觉得微内核有特点。你要是好奇怎么微内核不流行，我只能说，很多系统都是有惯性的。为什么Linux和Mac OS X不能取代Windows？一样的，一堆惯性放那的。巴西的汽车都可以用家里种的乙醇，所以巴西相对就比较少&lt;a href=&quot;http://www.cbsnews.com/stories/2006/03/29/eveningnews/main1454613.shtml&quot;&gt;依赖汽油&lt;/a&gt; 。怎么美国就不这么做这样就可以不用依赖朝三暮四的中东？嗯，惯性。让人们改变，即使让他们换成更优秀的方式也都难如登天。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 我正在说明什么？&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
其实么，MINIX 3 还有我的研究不是有关微内核的，是有关构建高可靠、可自愈的操作系统。我希望等我的工作完成了，电脑就用不上重启键了。电视机没有重启键，音响也是，汽车也是。他们也都由软件实现功能，但是却用不上重启键。计算机之所以需要就是因为计算机软件老爱崩溃。我知道计算机软件和汽车软件有区别，不过用户就希望他们都能工作，不希望被人告知为什么汽车就可以正常工作而计算机就不可考。我就是想构建一个平均死机一次的时间比一般计算机的寿命还要长的操作系统。这样一般用户就不会有机器死机的体验了。MINIX 3有很多特别的&lt;a href=&quot;http://www.minix3.org/reliability.html&quot;&gt;可靠性的特性&lt;/a&gt; 。虽说我们还没有完全完成吧（比如，虚拟内存计划在今年晚期完成），我想提高可靠性是目前操作系统设计者所面临的最大挑战。一般用户是不会关心什么新特性的或者是榨取硬件最后一丝的性能的，但是却会关心计算机可以100%的完美工作从不死机。不信就问你奶奶去。
&lt;/p&gt;

&lt;p&gt;
那么微内核和这个理想有个什么关系呢？只不过微内核可以实现自愈的系统。这就是我所关心的和我的研究的内容。把操作系统中的一大部分改造成为用户进程，每个驱动一个进程外加各种服务组件，这种凡是其实并不能减少代码中的bug数量，但是却可以显著的减少每个bug可能带来的严重破坏的能力，同时也减少了可信计算基的大小。在我们的设计中，如果大部分驱动失效了，再生服务都可以重新开始一个新的拷贝，然后保存下已死的驱动的内存镜像方便调试，并且记录下时间，发送邮件给管理员或者开发者等等额外的工作。系统则可以继续运行，最不济也可以优雅的关闭系统而不损失任何工作结果和数据。其他的一些部分，比如重生服务本身、文件服务还有进程服务是很重要的，因为一旦他们不能正常工作就会导致系统崩溃，但是显然是不可能允许出错的视频驱动、打印机或者扫描仪驱动来损坏系统的。这些程序应该都可以重新启动然后继续正常工作。我们的目标就是系统可以检测和修复自己本身的错误。这在微内核的系统上很容易实现。而在宏内核上就相对有难度，不过华盛顿大学的研究人员已经利用&lt;a href=&quot;http://nooks.cs.washington.edu/&quot;&gt;Nooks&lt;/a&gt; 做了很多工作，Karlsruhe大学的团队也利用&lt;a href=&quot;http://l4ka.org/projects/virtualization/&quot;&gt;虚拟机技术&lt;/a&gt; 完成了很多有意思的工作。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; Linus论Linux&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
最近更新，Linus似乎也明白了Linux正在越来越膨胀，&lt;a href=&quot;http://www.theregister.co.uk/2009/09/22/linus_torvalds_linux_bloated_huge/&quot;&gt;这里&lt;/a&gt; 有他自己的评论。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; 作业&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;p&gt;
在自以为是的讨论微内核能做什么和不能做什么前，最好试一试&lt;a href=&quot;http://www.minix3.org/&quot;&gt;MINIX 3&lt;/a&gt;,好歹可以明白的更多些。这可以增加你吐槽的战斗力。要想更深入了解MINIX 3的设计，可以看IEEE上挂着的&lt;a href=&quot;http://www.computer.org/portal/site/computer/menuitem.5d61c1d591162e4b0ef1bd108bcd45f3/index.jsp?&amp;pName=computer_level1_article&amp;TheCat=1005&amp;path=computer/homepage/0506&amp;file=cover1.xml&amp;xsl=article.xsl&amp;&quot;&gt;文章&lt;/a&gt; ，&lt;a href=&quot;http://www.usenix.com/publications/login/2006-04/openpdfs/herder.pdf&quot;&gt;这个模块化编程的文章&lt;/a&gt; 刚出现在USENIX ;login上，或者看这个&lt;a href=&quot;http://www.minix3.org/doc/reliable-os.pdf&quot;&gt;技术报告&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
你要是看到了这里，我只能感谢你能花这么多时间看我写的东西了。
&lt;/p&gt;


&lt;p&gt;
&lt;a href=&quot;http://www.cs.vu.nl/~ast/&quot;&gt;Andy Tanenbaum&lt;/a&gt;, 12 May 2006
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
应该意思就是，说话别不过脑子。
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>WTFPL协议</title>
   <link href="http://qinjian623.github.com/2013/04/26/wtfpl"/>
   <updated>2013-04-26T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/04/26/wtfpl</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 说明&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;  无意中更新switch-window插件，在代码里发现这样的一个金矿，里面的版权声明如下：
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;Licence: WTFPL, grab your copy here: &lt;a href=&quot;http://sam.zoy.org/wtfpl/&quot;&gt;http://sam.zoy.org/wtfpl/&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
  当然，以我的验货无数的火眼金睛，立马发现了该licence的反常，心中立马补了一句“wtf”，立马就点进去了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 内容&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;对于法律相关条文具有天生仇恨的程序员应该可以对这个安心，全文如下：
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;  DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
                    Version 2, December 2004 
&lt;/p&gt;
&lt;p&gt;
 Copyright (C) 2004 Sam Hocevar &amp;lt;sam@hocevar.net&amp;gt; 
&lt;/p&gt;
&lt;p&gt;
 Everyone is permitted to copy and distribute verbatim or modified 
 copies of this license document, and changing it is allowed as long 
 as the name is changed. 
&lt;/p&gt;
&lt;p&gt;
            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You just DO WHAT THE FUCK YOU WANT TO.
&lt;/li&gt;
&lt;/ol&gt;



&lt;/blockquote&gt;


&lt;p&gt;
第一次看到这么赏心悦目的license。我的人生又少了一份遗憾，心中不免哼起来Lily Allen的那首“Fuck you”。当然，法律是严肃的，所以有FAQ的哦，地址还是在官方网站上。除了最后那几个yes，you can（这里我怎么又想起来了观海兄），还有这个亮点：
&lt;/p&gt;&lt;blockquote&gt;

&lt;ul&gt;
&lt;li id=&quot;sec-2-1&quot;&gt;But profanity is offensive!&lt;br/&gt;
     You know what? Fuck your stance on profanity. Fuck your priorities in life. The WTFPL is about fucking freedom and we mean it. Freedom means freedom to copy and modify and share works of art and science with the rest of mankind, but also freedom to be gay and marry and have crazy gay sex, freedom to have tattoos, freedom to say there is no God, freedom to take the pill, freedom to have an abortion. People die for being gay or atheists. Don’t tell me that there is something sacred enough that it must be protected from the mere existence of the word “fuck”. If the F in WTFPL offends you, then fuck you and your beliefs. Triple fuck you.

&lt;/blockquote&gt;


&lt;p&gt;
Yeah，triple fuck you.不免让我想起来黑客帝国里的Trinity，霸气都是由内而外的。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 客户&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;

&lt;ol&gt;
&lt;li&gt;el-get竟然赫然在列，官方网站上的showcase里面给了项目在github上别人提的issue，当然已经close了，close的原因，还是请自己去看看吧 &lt;a href=&quot;https://github.com/dimitri/el-get/issues/474&quot;&gt;https://github.com/dimitri/el-get/issues/474&lt;/a&gt; 。我还是太naive啊，孤陋寡闻孤陋寡闻啊。
&lt;/li&gt;
&lt;li&gt;还有本篇文章，特别注明，使用WTFPL。
&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 漫画&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;  &lt;a href=&quot;http://www.wtfpl.net/wp-content/uploads/2012/12/wtfpl-strip.jpg&quot;&gt;请直接点击吧&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Why *nix ?</title>
   <link href="http://qinjian623.github.com/2013/04/16/why_nix"/>
   <updated>2013-04-16T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/04/16/why_nix</id>
   <content type="html">&lt;p&gt;
这个问题实在是，蛋疼，充满争议，打标签被动式之王复数形式之一，起码曾经是。不过最近云计算什么什么的玩意突然把这个问题给消除了，现在，没用过*nix，你都不好意思说出口。简历上怎么也得贴一个，熟悉*nix环境，以显示或者说标榜自己的Geek、程序员的一面。
&lt;/p&gt;

&lt;p&gt;
不过（为什么我要用“不过”这个词呢？）按照我自己那点微不足道的经验来看，使用*nix的作用还是很大的，当然，这里仅仅是限制在程序员的范围内。
&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 观点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; CLI是落后的、原始的、低级的&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
这个麽，实在是没有什么好吐槽了，一点战斗力都没有的观点，只能说，有这样的观点的倒是真是落后的。find、grep、sed、awk、sort和管道，仅仅需要这几个东西就足以推翻猜想了。只要是尝试过shell脚本结合一些小工具
的作用，这样的观点休矣。当然，CLI并不落后，不代表CLI就一定代表先进，CLI不落后，也不代表GUI就落后，这句多余的废话纯属，没错，废话。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 用来装逼的么？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
这里其实想想费曼先生的那本书名“what do you care what other people think”，用CLI的逼格岂是你们这些泥巴种能够理解的。我们常常想不通有钱人为什么花泥马那么多钱买包包，或者买个小陆龟放生蔚蓝色的海洋，往往的结论就是“装逼”，其实么，人家只是have fun。别红眼，人家就是钱多多，哪天内心空虚寂寞冷了，就烧点钱暖暖。当然，把陆龟往大洋里放的，那真属于不是逼格不够就是智商不够的问题。同理，我开心整个终端噼里啪啦弄键盘，have fun。当然，如果你弄个终端只是为了让别人看见你在用终端，等没人看了就不用了，那么，这句话还真说对了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 有用么？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
这个么，起码简历上有光&amp;#x2026;..折腾这个东西，确实浪费时间，也别信什么折腾好了之后就一劳永逸的骗子，有心思折腾不停的，总有理由挑战新玩法，有事没事好奇心就要被挑逗起来，从此废寝忘食。不过这个过程倒是像是从黑盒测试到白盒测试的过程，开始，你什么都不清楚，找个人问下，给你个命令就照着敲，一个字母都不敢改，那简直就是巫师的魔咒，整个系统就是个黑盒子，渐渐的，你慢慢明白了命令的意义，明白了配置文件的位置与作用，整个系统稍微的明了，开始了定制化之路，自己没事改改玩，看见别人的东西不错，就拿来自己捣鼓捣鼓。然后&amp;#x2026;我觉得我没资格继续说下去了。To follow the path: look to the master, follow the master, walk with the master, see through the master, become the master. 真的有用么？我想其实没有用，但是这个过程却有用，解决问题的能力、理解问题的能力、自己进行主题阅读的能力、学会独立学习的能力、对系统的通过自己的实践得到的观点，这些副作用留下的软能力才有用。 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 那些缺点呢？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
万物都有缺点，何况*nix基本都是意外的产生，有的貌似是两人为了打游戏写的，有的是为了写着玩，发了个邮件没想到成正果了。看来看去基本就一个缺点，网银，这个吧，货到付款吧，总要有个缺点让你委屈委屈的吧，否则不就完美了么。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 作用&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 开窗&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
不管承认与否，*nix环境下相对更加丰富多彩，譬如打开了一扇窗进入了新世界，花花绿绿的多开心。如果只用某一个东西，总会限制自己的视野，错过很多，当然，多了也容易分心，不过，井底之蛙的专心，与看遍世界后的专心境界大不同。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 深入&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
为什么能深入呢？因为你折腾了。最开始的亲自用编辑器写代码用编译器编译最后执行，就已经剥离了IDE的包装。之后对问题的理解的角度就不同的，折腾么，就是一个遇到问题然后解决问题，没有问题制造问题的过程，当然解决问题也有很多方法，但是用*nix环境的好处就是，总有些问题你非得自己亲自动手才能解决，也就是，逼着自己向白盒方向前进。没几次折腾，就慢慢开始深入了解问题了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 软实力&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
就像有用么一样，其实本身的作用未必有多大，简单的熟悉下命令也可以很好的使用了，但是相对来说还是和编程调用API没有多大区别，命令么，不就是shell里面的API么，单纯就调调API挺没有出息的，起码得问问为什么API要这么设计，优缺点如何，然后再深入深入问问API怎么实现的。这时候就开始挑战智力水平了，因为往往这个时候就不再停留在知识的水平上了，而是进入了融会的水平，知识么，也就是多记多背就可以，交给计算机就可以，要么是Google，要么自己整一个：硬盘＋lucene，但是运用知识背后的能力就不是计算机能够处理的，人和计算机比，能找到的竞争壁垒，目前来看也就是这个了，比知道的多、记得多，都不屑于比，你能比Google知道的多、记得多？但是Google没法拿这些知道的、记得的解决问题，人才有这个能力。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; MAC OS&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
好处就是真的折腾少了，不用有系统升级强迫症候群，软硬件结合的好，电池、散热、噪音都是过去，驱动不再是噩梦，实际情况是，“驱动是什么？”自己再整个homebrew或者mac port，从此生活好滋味。其他的，没感觉和Ubuntu等等有什么区别。除了有个什么Apple Script，可以脚本化GUI进程之间的通讯。
但是，折腾少了也就没有了其他的*nix的那些好处了，没法再深入了解表层后面的东西了，所以理想的状态就是，首先用GNU/Linux，熟悉了再转Mac OS。直接用的结果是，看着花哨的界面哈哈傻笑，很多有用的或者说是有威力的东西放在那里自己却从来不知道为何物。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 白眼狼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
用了东西当然要反咬一口，连白眼狼都没有做成真的会很亏本的啊。对一个东西，批评的难度一般都要大于夸奖。因为优点往往是被人明了的，而批评要能够批评个所以然出来就需要对这个东西有很好的理解，当然，那些瞎批评的就不算数了。所以没事看看XX痛恨者手册是颇有必要的，这样才能培养自己的白眼狼的潜质，同时么，回头引用个两句话，也可以提升自己的逼格啊。所以么，买东西也一样，盯着好评看一点意义都没有，你都打开商品页面了，说明准备要买了，那还看你妹的好评呢，赶紧看差评，那才是王道，知道了缺点再买，使用的时候才会客观冷静不狂热。再进一步，知道了缺点还能爱，那才是真爱。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 保护逼格&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
麻瓜们往往还是对于装逼表现的十分崇拜的，所以么，在麻瓜面前，逼格高低不是问题，因为，再低都比麻瓜高，麻瓜都不知道装逼为何物的。可惜的是泥巴种们，爱骂装逼问题，所以逼格要用心保护。
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;雷蒙德的黑客X部曲，入门逼格必备，哪怕没有照着做，背下来几句，在一年级的泥巴种面前已经具有良好的智力优越感了。人家的UNIX编程艺术也要看，KISS要时刻挂在嘴边。要表现出恨不得额头上打个Geek或者hack标签的激情。当然，最近貌似比较流行Paul，黑客与画家不管看没看完，书要多翻翻，不能全新，瞬间暴露，当然也不能翻烂了，逼格，拼的就是一个度。
&lt;/li&gt;
&lt;li&gt;怀旧与历史感是任何领域提升逼格的必备，比如音乐要弄Classic的，哲学要讨论讨论柏拉图、康德、黑格尔，哪怕讨论讨论向量空间也要扯出来希尔伯特，瞬间高大全形象飙升。专业史是很重要的，起码在吹牛X上可以占据主动，其他的好处么，冷暖自知。
&lt;/li&gt;
&lt;li&gt;最新发展。就像要fashion,巴黎时装周哪能少。硅谷最近怎么怎么了，那就像自己家后院一样清楚了。要谈就谈facebook的取代者会是谁，说什么中国的facebook会是谁立马暴露你土鳖一面，一看就知道和腊肉一个德行，也就懂个毛。风投的动向，要比被投资的公司还要明白清楚。当然，天天挂嘴边那不行，那是XX分析师，连个May I help you都是满口的伦敦乡下腔外带苏格兰味，还忘了那点睛的sir。当然，以上是非技术范围的，还得有技术范围内的，某某新推出的技术，当然，直接说出来那就是逼格跌停，要和历史联系起来。最新技术其实是XX年前的技术的翻版，然后说出个“所以然”来，这里的引号表示引号中的内容无所谓。新东西出来当然要立马试试，然后和别人聊天的时候表现下自己玩过的心态，谨记是玩玩，深入么，hu cares，哦，现在是she cares了。
&lt;/li&gt;
&lt;li&gt;形象气质佳。暧昧之心，人皆有之。是爱美，不小心暴露了地球人的本质。短裤加T，T还得是XX开源会议送的，要是有个Fuck MS，那简直就是大神级人物。Ubuntu的圆圈圈太俗，都烂大街了，再不济大便的小九九也行，gentoo，LFS、Apache等等对于提升逼格是有作用的。拖鞋和那忧郁的眼神、唏嘘的胡茬子、神乎其神的不离键盘的指法，还有那杯drymartine，恩&amp;#x2026;没有酒，有也是啤酒，看不起的就是那些喝洋酒装逼的人。
&lt;/li&gt;
&lt;li&gt;神秘主义与哲学。没错，Hello World你都要蒙上一层神秘主义的面纱，“你知道这最简单的程序背后计算机的运行过程么”。哲学，没错，哲学与装逼简直有天然的联系，而且要尽量的形而上。综合来看，就是要有讲故事的能力，让观众觉得：挖～～好NB。
&lt;/li&gt;
&lt;li&gt;没有好坏。评价什么什么的，大是大非的要绝对狂热，小是小非的要瞬间转换活用辩证法，批评就是装逼的一种形式。一般都要加个“但是”或者“不过吧”。
&lt;/li&gt;
&lt;li&gt;小众，绝对的小众。小众给人的错觉就是高端。人多的还就不玩，要有这样的心态，宁可做正态分布某一端的SB也不做中间的那堆不知道是什么东西的东西，俗，太俗。优越感，优越感，没错，就是那种由内而外的优越感，要找好感觉。
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
本节内容村吐槽。以至于自己都要精神分裂了，不能继续了，不然疯了对不起父母了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>clojure与fp</title>
   <link href="http://qinjian623.github.com/2013/04/16/clojure_slide"/>
   <updated>2013-04-16T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/04/16/clojure_slide</id>
   <content type="html">&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/18916275&quot; width=&quot;476&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>clojure与FP</title>
   <link href="http://qinjian623.github.com/2013/04/16/clojure"/>
   <updated>2013-04-16T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/04/16/clojure</id>
   <content type="html">&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Clojure 初体验&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 说明与动机&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;自己也是初学，介绍不深入，很简单。
&lt;/li&gt;
&lt;li&gt;没有大局观，不系统，小例子。
&lt;/li&gt;
&lt;li&gt;内容分散。
&lt;/li&gt;
&lt;li&gt;引用为主。
&lt;/li&gt;
&lt;li&gt;内容与Clojure相关性不大。
&lt;/li&gt;
&lt;li&gt;Progamming Language课程的学习。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 可能具有的一些特点&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.1&lt;/span&gt; 不变数据与副作用&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
无变量，数据是不变的。性能上的问题， &lt;b&gt;应该是&lt;/b&gt; 通过写时复制与重用之前的数据。副作用本身与不变数据没有必然的联系，但是不变数据是促进了无副作用的编程，因为没有变量，减少了全局变量的因素，也就限制了副作用可能产生的范围，副作用往往都是受限在一定范围内的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.2&lt;/span&gt; 惰性求值&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
最近的王垠对于这一问题的批评：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5d90e82f0101jz6j.html&quot;&gt;http://blog.sina.com.cn/s/blog_5d90e82f0101jz6j.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
集中于性能上的讨论，惰性求值可能带来堆积和连锁效应，在某些时刻触发之前所有的堆积的操作。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 可能的优点？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.1&lt;/span&gt; 单元测试&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
主要是无副作用，保证了函数映射的固定，固定输入固定输出，方便了测试。与外界的变量隔离后，内部状态相对容易控制和观察，调试方便。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.2&lt;/span&gt; 并行&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;p&gt;
无外部变量的影响，所以竞争条件不多，没有必要增加锁。Map Reduce与hadoop 的应用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 小径的主题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.4.1&lt;/span&gt; continuation&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.4.2&lt;/span&gt; monad&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;p&gt;
这个不清楚，太复杂。Haskell使用。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://zhuoqiang.me/what-is-monad.html&quot;&gt;http://zhuoqiang.me/what-is-monad.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iis.sinica.edu.tw/~scm/ncs/2009/11/a-monad-primer/comment-page-1/&quot;&gt;http://www.iis.sinica.edu.tw/~scm/ncs/2009/11/a-monad-primer/comment-page-1/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.douban.com/group/topic/1238401/&quot;&gt;http://www.douban.com/group/topic/1238401/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yi-programmer.com/2010-04-06_haskell_and_category_translate.html&quot;&gt;http://yi-programmer.com/2010-04-06_haskell_and_category_translate.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stefan-klinger.de/files/monadGuide.pdf&quot;&gt;http://stefan-klinger.de/files/monadGuide.pdf&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.4.3&lt;/span&gt; uniqueness&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.5&lt;/span&gt; 语法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5.1&lt;/span&gt; Lambda算子&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;p&gt;
之前已经有过介绍，不再多言。
&lt;a href=&quot;http://www.slideshare.net/qinjian623/lambda-15570486&quot;&gt;http://www.slideshare.net/qinjian623/lambda-15570486&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5.2&lt;/span&gt; S-expression介绍&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;/div&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;什么是？&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-5-2-1&quot;&gt;
&lt;p&gt;
树结构的数据格式表示形式。有形式化的文档描述，一个没有通过的RFC，地址：
&lt;a href=&quot;http://people.csail.mit.edu/rivest/Sexp.txt&quot;&gt;http://people.csail.mit.edu/rivest/Sexp.txt&lt;/a&gt; 用于通讯数据。
John McCarthy最先提到。
&lt;/p&gt;


&lt;p&gt;
第一代计算机科学家的年代。
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Dennis Ritchie found dead 2011.10.12
&lt;/li&gt;
&lt;li&gt;John McCarthy 2011.10.24
&lt;/li&gt;
&lt;li&gt;Steve Jobs 2011.10.05
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5.3&lt;/span&gt; XML、JSON 与S-exp的相似性&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-3&quot;&gt;
&lt;p&gt;
reinvent, 显然，三者的表达能力等价，语法相异但相近。相关的讨论.
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://quoderat.megginson.com/2007/01/03/all-markup-ends-up-looking-like-xml/&quot;&gt;http://quoderat.megginson.com/2007/01/03/all-markup-ends-up-looking-like-xml/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2012/03/04/some-thoughts-on-json-vs-s-expressions/&quot;&gt;http://eli.thegreenplace.net/2012/03/04/some-thoughts-on-json-vs-s-expressions/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
XML相对更加接近数据，JSON和S-exp则与语言更紧密。技术哲学话题，见仁见智。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5.4&lt;/span&gt; 高阶函数，Map Reduce&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-4&quot;&gt;
&lt;/div&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;Map and Reduce&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-5-4-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.cs.cornell.edu/courses/cs3110/2009sp/lectures/lec05.html&quot;&gt;http://www.cs.cornell.edu/courses/cs3110/2009sp/lectures/lec05.html&lt;/a&gt;
良好的数据操作的抽象，可以作为一个通用的大规模数据处理框架，因为可以并行。80年代末就存在了使用这一抽象的并行系统The Connection Machine。但是时机对于技术的影响极大，有其自己的进化路径，Google将其发扬光大，Hadoop作为Google 的Map reduce的开源实现，目前已经被被广泛应用。
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&quot;Our abstraction is inspired by the map and reduce primitives present in Lisp and many other functional languages. We realized that most of our computations involved applying a map operation to each logical record in our input in order to compute a set of intermediate key/value pairs, and then applying a reduce operation to all the values that shared the same key in order to combine the derived data appropriately.&quot;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&quot;inspired by&quot;,视界和思维定式往往限制了一个人，虽然这一说法过于“形而上”，但是保持学习的态度，广泛的开拓视野的作用自不言说。
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;大数据 互联网大规模数据挖掘与分布式处理&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-5-4-1-1&quot;&gt;
&lt;p&gt;
第二章利用map-reduce来实现选择、投影、并交差运算的方法，这些方法基本都可以自然的应用于具有map reduce操作语言上。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Map func list&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-5-4-1-2&quot;&gt;
&lt;p&gt;
将list中的每个元素都经过func进行操作，形成新的一个list。其实也可以同时操作多个list,相对的func就需要同时传入多个参数。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Reduce func init list&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-5-4-1-3&quot;&gt;
&lt;p&gt;
func接受两个参数，以此遍历list，刚开始传入的是list的第一和第二项，然后通过func计算返回值，作为下次迭代传入的第一个参数。如有init，第一次传入的为init和list第一个项。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;小径&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-5-4-1-4&quot;&gt;
&lt;p&gt;
Map自然也可以通过reduce来实现，包括filter也可以。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5.5&lt;/span&gt; call-by-value or call-by-name&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-5&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.cs.columbia.edu/~sedwards/classes/2010/w4115-spring/functional.pdf&quot;&gt;http://www.cs.columbia.edu/~sedwards/classes/2010/w4115-spring/functional.pdf&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.6&lt;/span&gt; 语法与编程范型的无关性&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-6-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.6.1&lt;/span&gt; Java的实现&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-1&quot;&gt;
&lt;p&gt;
Java也可以写出具有FP特征的代码，但是性能和理解上不舒适。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.6.2&lt;/span&gt; LISP != FP&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-2&quot;&gt;
&lt;p&gt;
最初的LISP并非满足FP.
Fortran与LISP的对比对应于图灵机与Lambda的对比。一个更加靠经硬件，一个更加靠近数学抽象。
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;History of Lisp by John McCarthy&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-6-2-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www-formal.stanford.edu/jmc/history/lisp/lisp.html&quot;&gt;http://www-formal.stanford.edu/jmc/history/lisp/lisp.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;History of Lisp by Paul Graham and also On Lisp&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-6-2-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.paulgraham.com/lisphistory.html&quot;&gt;http://www.paulgraham.com/lisphistory.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;On Lisp，有中文翻译版本。 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp by Peter Norvig&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-6-2-3&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://norvig.com/paip.html&quot;&gt;http://norvig.com/paip.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;Concepts, Techniques, and Models of Computer Programming&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-6-2-4&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.info.ucl.ac.be/~pvr/book.html&quot;&gt;http://www.info.ucl.ac.be/~pvr/book.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.6.3&lt;/span&gt; 其他的语言&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-3&quot;&gt;
&lt;/div&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;ML-&amp;gt; F# OCaml&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-6-3-1&quot;&gt;
&lt;p&gt;
'Programming Language' on coursera.org
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;LISP -&amp;gt; ELISP /Common Lisp/Clojure &amp;#x2026;&lt;br/&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;By GNU&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-6-3-2-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/index.html&quot;&gt;http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/index.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;By Xah&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-6-3-2-2&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://ergoemacs.org/emacs/elisp.html&quot;&gt;http://ergoemacs.org/emacs/elisp.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;ELISP的“原始”&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-6-3-2-3&quot;&gt;
&lt;p&gt;
dynamic scope
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;

&lt;li&gt;Scala in twitter&lt;br/&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;A Conversation with 3 people in twitter&lt;br/&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-6-3-3-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.artima.com/scalazine/articles/twitter_on_scala.html&quot;&gt;http://www.artima.com/scalazine/articles/twitter_on_scala.html&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;

&lt;li&gt;Haskell&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-6-3-4&quot;&gt;
&lt;p&gt;
纯函数式编程语言
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;副作用&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.7&lt;/span&gt; 小陶示例与运行时的性能比较&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-7-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.7.1&lt;/span&gt; 直接版本&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #ff1493;&quot;&gt;extend-list&lt;/span&gt; [char-set]
  &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;&amp;#25193;&amp;#23637;&amp;#21015;&amp;#34920;&amp;#26041;&amp;#27861;&amp;#65292;&amp;#21487;&amp;#23558;(1 2 3)&amp;#65292;&amp;#25193;&amp;#23637;&amp;#20026;((1) (1 2))&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;take&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;inc&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #919191;&quot;&gt;.indexOf&lt;/span&gt; char-set %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;drop-last&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #ff1493;&quot;&gt;flatten-sub-index&lt;/span&gt;
  &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;&amp;#21407;&amp;#22987;&amp;#26080;&amp;#20248;&amp;#21270;&amp;#29256;&amp;#26412;&quot;&lt;/span&gt;
  [char-set]
  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; 1 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 
    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;concat&lt;/span&gt; % &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;last&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;concat&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; []
                 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; flatten-sub-index &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;extend-list char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.7.2&lt;/span&gt; memoize版本&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-2&quot;&gt;
&lt;p&gt;
函数式无副作用带来的优势，本身的基本实现也极为简单。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;declare&lt;/span&gt; fm&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #ff1493;&quot;&gt;flatten-sub-index-two&lt;/span&gt;
  [char-set]
  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; 1 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 
    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;concat&lt;/span&gt; % &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;last&lt;/span&gt; char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;concat&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; []
                 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; fm &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;extend-list char-set&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))))&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #ff1493;&quot;&gt;fm&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;memoize&lt;/span&gt; flatten-sub-index-two&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;memoize 的极端简单的实现示例 in racket&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.7.3&lt;/span&gt; laziness版本&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-7-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.7.4&lt;/span&gt; python的函数式快速排序、以及堆排序的可能性？&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-4&quot;&gt;
&lt;p&gt;
python函数式编程风格的快速排序，没有变量的引入。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #D8FA3C;&quot;&gt;q&lt;/span&gt;=&lt;span style=&quot;color: #FBDE2D;&quot;&gt;lambda&lt;/span&gt; s:s &lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #FF6400;&quot;&gt;len&lt;/span&gt;(s)&amp;lt;2 &lt;span style=&quot;color: #FBDE2D;&quot;&gt;else&lt;/span&gt; q([x &lt;span style=&quot;color: #FBDE2D;&quot;&gt;for&lt;/span&gt; x &lt;span style=&quot;color: #FBDE2D;&quot;&gt;in&lt;/span&gt; s[1:]&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; x&amp;lt;s[0]])+[s[0]]+q([x &lt;span style=&quot;color: #FBDE2D;&quot;&gt;for&lt;/span&gt; x &lt;span style=&quot;color: #FBDE2D;&quot;&gt;in&lt;/span&gt; s[1:]&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; x&amp;gt;=s[0]])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.7.5&lt;/span&gt; Purely Functional Data Structures until 1998&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-5&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf&quot;&gt;http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-6&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.7.6&lt;/span&gt; New Data Structures since 1998&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-6&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://cstheory.stackexchange.com/questions/1539/whats-new-in-purely-functional-data-structures-since-okasaki&quot;&gt;http://cstheory.stackexchange.com/questions/1539/whats-new-in-purely-functional-data-structures-since-okasaki&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.8&lt;/span&gt; 嵌入式语言实现、解释器&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-8-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.8.1&lt;/span&gt; 嵌入式的eval&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-1&quot;&gt;
&lt;/div&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;Racket &amp;lt;- Scheme&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-8-1-1&quot;&gt;
&lt;p&gt;
Lisp，语法不多言
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;来自Programming Language[纸质材料]&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-8-1-2&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://class.coursera.org/proglang-2012-001/class/index&quot;&gt;https://class.coursera.org/proglang-2012-001/class/index&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.8.2&lt;/span&gt; bootstrap scheme的eval，其中的尾递归转化为迭代的优化实现。&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-2&quot;&gt;
&lt;p&gt;
1700 lines c, 
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;尾递归上次提过&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.8.3&lt;/span&gt; 构建系统语言的实现&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-3&quot;&gt;
&lt;/div&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;makefile or ant&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-8-3-1&quot;&gt;
&lt;p&gt;
仅仅在计划上，预计不会继续。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;csv的dsl语言&lt;br/&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-8-3-2&quot;&gt;
&lt;p&gt;
实现一个很简单的对csv进行操作的类SQL。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.8.4&lt;/span&gt; Java的尾递归的上层构建过程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-4&quot;&gt;
&lt;p&gt;
《The Role of the Study of Programming Languages in the Education of a Programmer》
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.9&lt;/span&gt; 杂交化的趋势&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-9&quot;&gt;
&lt;p&gt;
两个方向，与分久必合。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-9-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-9-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.9.1&lt;/span&gt; C++ lambda引入&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-9-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-9-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.9.2&lt;/span&gt; jvm class file dynamic 的类型引入，支持上层动态语言&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 没有银弹&lt;/h2&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Overnight talking.</title>
   <link href="http://qinjian623.github.com/2013/03/28/overnight_talking"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/03/28/overnight_talking</id>
   <content type="html">&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 1&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
和某人又一次进行了彻夜长聊，很奇怪啊，每次能够滿足彻夜长聊标准的，也只有某人你了&amp;#x2026;&amp;#x2026;这对于我这样一个正常状态下超级不爱废话的人实在是，反常。当然，以至于早上真的起不来，预计白天要靠咖啡度日才勉强扛住了。
&lt;/p&gt;


&lt;p&gt;
所以吃饭要趁热，按照我习惯，这句应该是吃屎要趁热的，显然，要严肃认真一点。对于我这样一个具有情商硬伤的人，至今还活在聊天历史记录的理解中，其实，我还是对自己的情商有自信的&amp;#x2026;&amp;#x2026;只是，经历昨晚后，这里的自信稍微少了一点点。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 2&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
按照阅读理解题来处理的话，我们首先要做的就是，阅读。总结下内容，从我的情商角度来看流程如下&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：
&lt;/p&gt;


&lt;p&gt;
首先，当然是回顾了历史，当然，其中还有很多分叉，各种互动问题。虽然貌似起步是我问的各种有关妹子的事宜，但是显然，话题理论上来说是扩大化了，其实吧，没有扩大化，从我的预感来说，基本上双方都是有话要说的，借这个机会谈谈天聊聊地，回忆回忆往事，展望展望未来，想说的话基本也在其中了。借题发挥，顺势就把话说了。
&lt;/p&gt;


&lt;p&gt;
在这里，我首先知道了自己“阴魂不散”的影响力，这里，我只想继续用一句曾经的口头禅：“it's not me”。我从来没有想到我具有摄魂怪的能力，很荣幸，之所以荣幸，一部分原因是，此技能满足我了心理的阴暗面。其实吧，每个人都有阴暗面，你要说没有，要么是你骗人、要么是你骗自己，这句是扩展，和本文无关，据不完全推测，比较喜欢over thinking的某人，早晚会看到这篇，请不要想太多，我只是有EQ硬伤，说话很随意的。只能说，对于该影响力，我很荣幸，但是我知道，这一技能不是我自己具有的，而是某人赋予我的，我不过是一个载体，任何人都有可能对任何的另一人有该技能，我也是该技能的受害者，轻度的。当然，没有必要完全撇清该问题，我的观点是，有该技能的人都是幸运的，某人要被我膜拜为我的lucky star应该不算过分。所以，谢谢。但是，请注意，我的技能是你赋予，或许也只有你能再拿走，怎么感觉进入中土世界的奇幻旅程了&amp;#x2026;&amp;#x2026;女神赋予我技能，然后拿走。
&lt;/p&gt;


&lt;p&gt;
然后，在完成历史回顾后，自然要总结。总结给我的几条真理，再经过我的理解就是，第一，我应该开放一点，不要一天到晚在自己的小世界里面过。第二，我要主动点，闷骚没有用，当然我个人感觉，我只是闷，还没有上升到骚的境界，去做些事情，去改变些事情，去参与。第三，要认真做事情，一天到晚吊儿郎当的，哪里可以。
&lt;/p&gt;


&lt;p&gt;
其实吧，以上几点我也早已经知道了，这个是自己的性格缺点，当然也可以说是性格特点。从各方面对我的评价中，我已经综合出来这一问题了，这些个缺点在所有事情上都有表现，而不仅仅是我和你的讨论的事情上&amp;#x2026;&amp;#x2026;竟然用了你，本文目的欲盖弥彰啊&amp;#x2026;&amp;#x2026;而且也在试图改变之。其实，认真的风险是比较高的，认真的做事情，如果不合自己的理想，实在是会很受伤的，不管是做什么事情，我也是偶尔认真过的，最后&amp;#x2026;都是惨不忍睹，从此就在认真面前当懦夫了，当然，我很享受认真的感觉。主动点的问题，和自我小世界的问题基本一个东西，我一直秉承己所不欲勿施于人，而且从小外星科幻小说看太多，外星人都秉承不干涉地球人的发展，只在极其危险的境地下才介入，我也从来不愿意强人所难，或者搞什么价值观入侵，所以自己一直感觉自己属于一个观察者的角度，其实这个角度还不错的，就像看电影一样。其实，看多了争论就会变得淡定，观点想法哪怕正确，所有错误的人即使都被变成对的，地球也还是那样转动着。更何况，观点正确不正确还不一定。最后往往是，两方面的缺点都看明白了，两方面的优点也都看明白了，反而不再争论了。其实如王垠大大的《论对东西的崇拜》一样，某些人爱给别人打标签某某粉，某某黑，其实，在我看来，只是他境界太低，或者说&amp;#x2026;好吧，就是境界低，给我一次高人一等的错觉吧。這個世界確實是要分成三六九等的，都是精英控制的，有些人就是能夠看到別人所不能看到的東西，就像指環王裡面的魔戒賦予的能力一樣，rule the world，自然要有rule the world的範，有些人注定是rule被动式，這句真是政治不正確啊，以至於輸入法都開始提醒我了，轉成繁體字了。但是，没错，是但是，国际惯例，但是前的都是废话，这些都是借口，以上的废话和自己开不开放、主不主动都没有任何的必然的逻辑联系，你站在外边当然是站着说话不腰疼。我不应该给自己的懦弱找借口，你可以不介入，但不代表你可以不认真，不认真，还找借口，不过是自己害怕认真做事后没结果。你活在自己的世界里没有问题，但是不代表你可以不开放，你可以端起碗吃饭，放下筷子骂娘，但是不代表你就不能去做点事情。天天看这不顺眼，看那不顺眼，那你就自己把东西弄顺眼了。天天跟个深闺怨妇一样，叫嚷我老公太次等等，那你就离了找个好的。怎么感觉这么自干五呢&amp;#x2026;&amp;#x2026;我还是有&quot;Sir, this way&quot;的光荣理想的。所以其实最后回到了原点，任何事情都是自己选择的结果，做了自己的选择，就对自己的选择负好责任。当然，每人的选择都是不一样，但是蜘蛛侠里的话还是重要的，能力越大，责任越大，你的选择带来的影响也越大。泥马，又回到了responsibility的问题上了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 3&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
写作文老跑题这个臭习惯，至今改不了啊。目前已经站在M78星云上开太阳系会议，讨论的话题是，心宿二上的市政设施老化已经是否需要通知天蝎座人民去重建的问题。但是总结还是需要的，这些问题最后回到的都是自己的意愿和选择问题上，是否愿意改变自己都是由自己决定，对自己的决定负责任即可。看，这个总结也是一贯的星际议会风格，不如个屁，还不如银河系漫游指南里面解决掉地球的决定实在。某人看完一定要发飙了，可是，我真的是认真不起来啊。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
流程你妹，程序写多了的副作用。
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>What Every Programmer Should Know About Memory Notes 0</title>
   <link href="http://qinjian623.github.com/2013/03/28/memory_notes_0"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/03/28/memory_notes_0</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 说明&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;  原本想翻译，结果一看100+页，译了下第一页，然后就放弃了，改笔记。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Abstract&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;  作者自然是看程序员都不懂硬件，代码写的太糟糕，内存、缓存统统都没用好，忍不住就给程序员定制一份硬件科普读物。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; Introduction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;  说了下历史，之前是硬件简单，各部分性能都八九不离十，譬如改革前的天朝，大家穷才是真的穷，硬件么，就是大家慢才是真的慢。
  好了，等基本结构稳定了，就开始贫富差距拉大了，拖祖国后腿的主要是两个玩意，存储系统、内存系统，一个2B，一个文艺。
  2B的容易处理，操作系统还可以用内存当缓存，这个shell里面来个free -m就可以看到，但是内存没辙，太文艺，提高性能怎么都要涉及硬件，改造集中于以下：
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;RAM的硬件设计(速度与并发度)
&lt;/li&gt;
&lt;li&gt;内存控制器的设计
&lt;/li&gt;
&lt;li&gt;CPU缓存
&lt;/li&gt;
&lt;li&gt;设备的直接内存访问(DMA)

&lt;p&gt;  
  下面就是文章结构等，等等等等。记住，针对的都是linux，别的么，认真你就输了。作者redhat的，当然不客气了。还有，讨论的问题有些在现实中不同实现差异比较大，所以别认真。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;/div&gt;

&lt;div id=&quot;outline-container-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 文章结构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;

&lt;ul&gt;
&lt;li&gt;第二章，RAM的技术细节。
&lt;/li&gt;
&lt;li&gt;第三章，CPU缓存细节。
&lt;/li&gt;
&lt;li&gt;第四章，虚拟内存的实现。
&lt;/li&gt;
&lt;li&gt;第五章，NUMA系统的细节&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;/li&gt;
&lt;li&gt;第六章，本文主要内容，集合前几章的内容，没耐心的可以从这里开始。
&lt;/li&gt;
&lt;li&gt;第七章，工具。
&lt;/li&gt;
&lt;li&gt;第八章，江湖规矩，展望。
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; Commodity Hardware Today&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;  专业硬件正在滚蛋，商用硬件正在一统江湖。都是被一群互联网企业闹的，PC服务器群，便宜而且，便宜。Redhat，2007年的展望，未来数据中心都要用这样的：都是4插槽，每槽4核CPU，每CPU都超线程，但是没有英国管家。这个刚好够用，所以优化也集中于这点上。
  不同机器结构不同，不过90%以上都在本文范围内，不过随时间变化也很大。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-4-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.1&lt;/span&gt; 南北桥&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;

&lt;p&gt;   貌似现在已经少了一个了？有些要合并和消失的趋势了？不过功能划分应该还是会有遗留的。
   北桥速度要够快，南桥又叫I/O桥，看见IO就知道没救了。北桥主要是CPU与内存，南桥很多口的，还是北桥专一。
   下面开始这一结构大批判：
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;CPU与CPU之前通讯要走和北桥通讯一样的总线。
&lt;/li&gt;
&lt;li&gt;所有内存数据都要通过北桥
&lt;/li&gt;
&lt;li&gt;RAM只有一个端口
&lt;/li&gt;
&lt;li&gt;南桥设备与CPU通讯要经过北桥，因为CPU在西北偏北么&amp;hellip;&amp;hellip;
&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;
   因为A.DMA占用北桥总线带宽而现在DMA的设备又爆多，总线么，是吧。B.北桥与RAM的总线，用的DDR2，双通道，貌似现在i7都有三通道了&amp;hellip;&amp;hellip;爆兵堆数据果然在哪都是王道。然后CPU比内存快，这个大家都知道，所以最后的目的都是为了解决这个问题。下面的图就更加夸张了，每个内存都单独连内存控制器，再连北桥，缺点也有：北桥里面要撑爆了，外面往里狂灌数据。然后作者又提了下这么弄也可以弄成内存RAID，也是哦，这玩意和硬盘RAID也没什么差别了。然后，然后不要北桥的出现了，每个CPU一个MC，这下爽了，每个CPU真正是并行访问了，不过前提也是CPU只访问自己的内存还差不多，访问别人的内存&amp;hellip;.呵呵，于是有了NUMA因子&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.2&quot; href=&quot;#fn-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，应该就是评价访问CPU外内存的代价的指标&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.3&quot; href=&quot;#fn-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.2&lt;/span&gt; RAM类型&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-2&quot;&gt;

&lt;p&gt;   SRAM和DRAM一个静态的一个动态的。然后，觉得我需要重新找下数电书看下。但是手边没有数电书，不过，SRAM的稳定不易失。DRAM的不稳定，因为用的电容，不过电容会漏电，动态的图还是比较有爱的，不像静态的，根本就是不同的世界观设定，存的时候就往电容里充电，当然大电容也无所谓的了，可惜啊，这里是计算机电路，不是激光炮塔的辅助电容，要小啊小，只能存几万个电子，作者知道读者会没有概念，所以说了若干兆欧电阻也会很快跑光。
   所以，DRAM要刷新，每64ms，这么多年了，不知道还是不是这个数字。刷新的时候不能动哦，而且，电容都是慢慢跑出来，所以读数据要信号放大器，而电容充放电也都需要时间，都是有延时的，所以电路图不是完美的数电专用两道杠图，而是弧线，竟然还给了时间公式，给个图不就行了，作者真认真，程序员是只看图不看公式的。
   DRAM也是有好处的，最大的好处是尺寸小、结构简单、成本低，我怎么感觉这是唯一的好处呢？竟然就靠这一个好处满地发芽，果然，人就靠三板斧就够用了。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-4-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-2-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.2.1&lt;/span&gt; DRAM访问&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-2-1&quot;&gt;

&lt;p&gt;    内存访问过程自然是虚拟地址-&amp;gt;物理地址-&amp;gt;内存数据，物理地址通过address line&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.4&quot; href=&quot;#fn-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;的形式传递给内存，4G内存有2&lt;sup&gt;32的AL，所以要被重新编码成为这么多AL的一小部分。传递的地址首先要被多路分配&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.5&quot; href=&quot;#fn-.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;，一个N的AL会有输出为2&lt;/sup&gt;&lt;sup&gt;N行。这些输出才用来定位内存。&lt;/sup&gt;
    然后说，内存量要是上去了，这种直接的法子没法用，一个1Gbit容量的，需要30AL和2&lt;sup&gt;30行。反正我就是理解不能，还是看图吧。&lt;/sup&gt;
    内存组织成行和列，为什么呢？因为这样方便，不用超大的多路分配。我想想啊，就是一维数组和二维数组的区别，如果是16个元素，一维就要16条线来索引每个元组，二维呢，4×4就可以，每个维度4条线。这样就是16比8的线，差距还不大，换成2&lt;sup&gt;32就出来了一个是2&lt;/sup&gt;&lt;sup&gt;32，一个是2&lt;/sup&gt;&lt;sup&gt;16&lt;/sup&gt;+2&lt;sup&gt;16，所以说，小内存一维直接处理还可以，大了就要增加维度了。要是四维呢？2&lt;/sup&gt;&lt;sup&gt;10，是不是维度可以无限增加下去呢？到32维就是&amp;hellip&lt;/sup&gt;;？&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.6&quot; href=&quot;#fn-.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;
    后面还说了扩展性的问题，30根地址线连接到每个RAM芯片也不行，因为针脚会变得很多，解决可扩展问题用的是地址线复用。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-2-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.2.2&lt;/span&gt; 总结&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-2-2&quot;&gt;

&lt;ul&gt;
&lt;li&gt;SRAM和DRAM的成本平衡
&lt;/li&gt;
&lt;li&gt;存储单元都要被单独选择来使用
&lt;/li&gt;
&lt;li&gt;地址线数目影响MC、主板、DRAM模块和DRAM芯片成本
&lt;/li&gt;
&lt;li&gt;读写的时候都要耗费时间的，因为电容的原因
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.3&lt;/span&gt; DRAM访问细节&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-3&quot;&gt;

&lt;p&gt;   上节介绍说明了，地址要被复用，节约针脚。访问内存也需要充放电时间，还要刷新。说的都是同步DRAM。统一一个时钟来保持频率，也就是前端总线，但是FSB不是直接的时钟频率，因为可以很多倍，所以200的可以宣传是800.传输速度是频率×传输的位数，不过还有更多闲置的时间用于协商。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-4-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-3-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.3.1&lt;/span&gt; 读&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-3-1&quot;&gt;

&lt;p&gt;    看图先，先传RAS ，tRCD时间后再传CAS，地址则在这段时间同时传输。然后就要等会，叫做CL时延，之后就开始传数据，但是如果每次只传一个字太浪费，最好每次都把缓存里面的线填满&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.7&quot; href=&quot;#fn-.7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;，同时还可以不用再重新发RAS直接发CAS，这样就是连续读取内存，少了之前的那些通讯开销。双通道的自然是双倍。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-3-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.3.2&lt;/span&gt; 预充电与激活&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-3-2&quot;&gt;

&lt;p&gt;    RAS信号之前还要先锁定当前行然后对新行充电。要那么一段时间，结果就是，又占用了时间，不过预充电的一部分时间可以和数据传输并行，因为是两个不同行&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.8&quot; href=&quot;#fn-.8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;。实际情况可以更加夸张还有tRAS的延时，预充电不是立即执行。
    DDR模块的数据表示方法w-z-y-T,比如2-3-2-9-T1
&lt;/p&gt;&lt;blockquote&gt;

&lt;ul&gt;
&lt;li&gt;w 2 CAS延时（CL）
&lt;/li&gt;
&lt;li&gt;x 3 RAS-to-CAS延时(t RCD)
&lt;/li&gt;
&lt;li&gt;y 2 预充电时间(t RP)
&lt;/li&gt;
&lt;li&gt;z 8 激活到预充电时间(t RAS)
&lt;/li&gt;
&lt;li&gt;T T1 命令速率
&lt;/li&gt;
&lt;/ul&gt;



&lt;/blockquote&gt;



&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-3-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.3.3&lt;/span&gt; 重充电&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-3-3&quot;&gt;

&lt;p&gt;    DRAM必须保持刷新，也是按照行刷新，要是程序读的数据那行正好在刷新，那就中奖了&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.9&quot; href=&quot;#fn-.9&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-3-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.3.4&lt;/span&gt; 内存类型&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-3-4&quot;&gt;

&lt;p&gt;    SDR SDRAM，数据传输和内存总线频率一样。速度比较慢，要提速只能提高频率，但是功耗会增加，同时也需要增加电压，进一步增加功耗。『功率= 动态电容×电压&lt;sup&gt;2×频率&lt;/sup&gt; 』
    DDR SDRAM（DDR1），每周期可以传输两次数据，上升下降都可以传输数据，引入缓冲区。
    DDR2， 总线频率加倍，所以带宽也加倍。但是内存的芯片频率还是保持单倍不变，只是利用缓冲区的频率加倍，每次多读数据到缓存区。最后还要算上每周期的两次数据传输。最后就是阵列频率*4。
    DDR3，频率成为4倍，但是内部频率依然是一倍，还是依靠缓存区。算上两次数据传输，就是阵列频率×8。
&lt;/p&gt;
&lt;p&gt;    
    看了看，内存阵列的频率基本没有变化，都是依靠缓存区的频率加倍来提升。速度快了，但是针脚貌似也增加了&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.10&quot; href=&quot;#fn-.10&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;，并行化就难做，连线要差不多一样长&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.11&quot; href=&quot;#fn-.11&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;，针脚越多就越不好设计，竟然还有个更大的问题，总线上东西连多了信号会有变化。北桥不好保证内存双通道的并行，需要依靠外部内存控制器。
    解决方法：处理器加入内存控制器，或者NUMA架构。
    Intel使用什么全缓冲DRAM（FB-DRAM）技术。不用并行总线，而是使用串行总线，频率可以更高，消除串行的缺点还可以增加带宽。改用串行后
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;每个通道可以连接更多模块
&lt;/li&gt;
&lt;li&gt;北桥内存控制器可以使用更多通道
&lt;/li&gt;
&lt;li&gt;串行总线可以全双工（两条线）
&lt;/li&gt;
&lt;li&gt;实现另外一个总线也容易，每方向也就两根线&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.12&quot; href=&quot;#fn-.12&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;，就可以增加速度了。
&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;
    FB的有69针脚，也可以连接更多到总线上。北桥可以6通道，布线简单。总结比较给了个表，就是针脚小了，通道多了，还可以多连设备，设计上也简单容易。这难道是个万金油，也说说缺点啊。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-3-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-3-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.3.5&lt;/span&gt; 总结&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-3-5&quot;&gt;

&lt;p&gt;    终于到总结了，那就是DRAM的速度在现在的CPU面前就是渣，给的core2的差距是11倍差距，内存总线一个周期CPU要等11个周期，所以这个是数量级的差别。
    当然，极限情况下，DRAM可以很快，但是需要连续的串行访问数据，如果不连续，就要预充电再加上那一堆延时。预读取可以改善一些性能问题，处理完了就要写入的数据可以直接写入，因为下一轮要读取的东西都已经预读取了，不存在读写冲突了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.4&lt;/span&gt; 主存的其他用户&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-4&quot;&gt;

&lt;p&gt;   除了CPU，访问内存的还有一堆东西。DMA的东西，USB的东西。DMA会和CPU竞争内存访问的总线。
   还有利用内存做显存的，这说的好像是我的Pro啊，这个自然也是和CPU竞争内存总线的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 好大一个坑&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;

&lt;p&gt;  下面就进入无中文版参考范围，此坑够大够深，我一定是吃饱了。
&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 这个是个什么东西？
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.2&quot; href=&quot;#fnr-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 原来NUMA就是这里出来的。
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.3&quot; href=&quot;#fnr-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 那末，what if出来了&amp;hellip;每个CPU都和每个内存连起来呢？完全图一样的布线，而且估计CPU并行的问题还不太好处理，内存可以自带内存锁？
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.4&quot; href=&quot;#fnr-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 这又是个什么东西？简称AL吧。
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.5&quot; href=&quot;#fnr-.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; 没错，电子词典上就是这个词。
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.6&quot; href=&quot;#fnr-.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 这里先歇歇，有问题。
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.7&quot; href=&quot;#fnr-.7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; 这里又是什么东西？不是总线填满么？
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.8&quot; href=&quot;#fnr-.8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; 同行怎么办呢？同行连续读多了是不是电也会漏光呢？
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.9&quot; href=&quot;#fnr-.9&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; 可不可以用冗余内存，错开刷新时间来避免？不过这个成本有点高，小概率事件投入那么多。
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.10&quot; href=&quot;#fnr-.10&quot;&gt;10&lt;/a&gt;&lt;/sup&gt; 这是为什么？
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.11&quot; href=&quot;#fnr-.11&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; 应该是因为电流速度太慢了，要保持电流的电位同时到达，所以，还是换成光实在，宇宙极限了，要再快点只能交给造物主了。
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.12&quot; href=&quot;#fnr-.12&quot;&gt;12&lt;/a&gt;&lt;/sup&gt; 应该是指实现后每条方向总共2条线。
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Beamer_in_org</title>
   <link href="http://qinjian623.github.com/2013/03/05/beamer_in_org"/>
   <updated>2013-03-05T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/03/05/beamer_in_org</id>
   <content type="html">&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; A simple slide&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
This slide consists of some text with a number of bullet points:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;the first, very @important@, point!
&lt;/li&gt;
&lt;li&gt;the previous point shows the use of the special markup which
translates to the Beamer specific &lt;i&gt;alert&lt;/i&gt; command for highlighting
text.
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
   The above list could be numbered or any other type of list and may
include sub-lists.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; IO&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
可以用org写pdf，然后就想着写slide玩，是的，人都是这么贱，没事找事。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 参考&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://orgmode.org/worg/exporters/beamer/tutorial.html&quot;&gt;http://orgmode.org/worg/exporters/beamer/tutorial.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; Beamer&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
NOTHING HERE
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unit Test in Clojure</title>
   <link href="http://qinjian623.github.com/2013/02/26/clojure_unit_test"/>
   <updated>2013-02-26T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/02/26/clojure_unit_test</id>
   <content type="html">&lt;p&gt;
其实语言显然也是有 &lt;b&gt;用户友好&lt;/b&gt; 一说的&amp;#x2026;&amp;#x2026;比如说,包管理呀,测试框架呀,调试支持呀,外围库呀等等思密达,让我严密的想一想:
&lt;/p&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 包管理、名字空间&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
没有这个东西显然是不可能的,不过用起来是不是方便还是稍微有点区别.动态语言的特别重要，因为没有编译过程，最好可以随时导入包、库什么的，特别是repl上，代码有变动了就可以立即再重新导入，而且不会遇上诡异问题。Coursera上的Programming Language里面的ML的repl上貌似就可能有问题，课程材料上还专门说明了。当然，我没管，也没遇上问题。包管理还有就是rails的库，maven的库等等这样的，安装的时候一个命令就OK，否则，你还得自己找官网，下载，解压，拷项目里面，也不方便管理，出了新版本半年了，你哪天闲的蛋疼去看了下才发现，呀，有新版了，得用，继续下载，解压，拷项目里面。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 测试框架或者说是框架&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
有一个固定的方便的测试框架，可以在项目里面组织好测试代码，特别是，用户只需要直接写测试代码就可以，不需要管理测试代码，切换测试环境等等思密达，貌似这说的是RoR，直接区分好了生产环境和测试环境，而且其他什么都给框架好了，少了多少麻烦，关于框架会影响了解底层的问题，哈哈哈，能指望说这话的去了解底层么，只要是开源的，你看或是不看，代码就在那里，只增不减。还有xUNIT这种单元测试框架那是一定得有,否则&amp;#x2026;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 调试支持&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
调试器不是万能的,但是没有调试器是万万不能的,总有碰上倒霉时刻的时候,没有调试器,那就等着吃屎吧.当然比吃屎更惨的,运行的错误信息没法定位,比如来个这种的@5x23f或者function ce786xf,这就是吃所有人的屎了.是不是松鼠会的文章?说是吃自己的屎更安全点,因为菌群都是自己的,但是,肠胃病人菌群失调的,不是应该多吃别人的屎么?我想起来了,在哪读到的,有实验,用别人的菌群治疗肠胃病的,这个不就是等价于吃别人的屎么&amp;#x2026;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 外围库&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
虽说这实在怪不得语言,但是没有外裤只有内裤,又不是镁铝,是镁铝的话,没有内裤更好&amp;#x2026;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 文档和教程系统&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
教程这个东西,入门必备,属于可持续发展的问题.文档这个东西,没有文档,有外裤也没用啊,而且文档也有良好的框架,结构化的文档,方便parse和处理,这样对IDE的设计也友好。文档似乎可以和语言没关系，但是集成进去又不会死的，比如Python的内省什么的。想了想,貌似文档也可以弄成sexps的形式,再想想,xml格式的文档不就是这个思密达么?最好有个生成器,可以把文档生成xml格式一类的,应该不会有地球人原因亲自用xml写文档的.文学编程应该以结构化为基础,否则,地球人谁愿意读那么无聊的小说.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 打断的可能性&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
就是传说中的&quot;流&quot;,就是不要烦人,要是语言里面一堆需要按着shift才能打出来的乱七八糟的符号,特别是还要在键盘上找一下的,或者容易打错的,打错了还得删,这样的&amp;#x2026;哈哈哈&amp;#x2026;那还是让我吃屎去吧。果然,语法设计、关键词设计都是艺术思密达啊。编译的天生具有打断光环，所以要是能背后自动识别和编译，一定不错，但是&amp;#x2026;这个世界还有一种名叫“编译时间要按照小时算”的怪物，貌似有并行化编译技术。不过，依赖关系得处理的好，否则，并你妹去吧。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; IDE或者说DE&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
终于发现，DE才是以上各种问题的终极解决方案，比如包管理，可以自动导入包、自动识别系统已经安装的包、自动组织好项目内的包，比如框架，可以一键生成测试代码框架，自动化部署，因为框架都是固定的，文件组织也都是固定的，全世界的物种，都只需要一种部署工具。比如调试支持和错误信息，现在的IDE都是集成好了的，出错了直接点到错误处处理下，最好还要能够dump当时的数据，点过去就显示出来，而且最好还能够回退几步，时间机器在计算机里应该有部分地方是可以实现的，反正计算机又没有波函数，之前的苹果的那个可视化的编程的示例，写的过程中，就自动执行，显示数据情况出来，这个一定也得要，堪比英国管家。比如外围库，这个&amp;#x2026;貌似真不是DE能做的，不过方便外围库的加入使用这个是义不容辞的责任。比如文档和教程，教程可以利用DE做成交互式的，该怎么做也算是一目了然，哪里不懂点哪里，so easy，文档这种，自动提示，自动完成，eclipse思密达，写文档也要够方便，语义上能分析出来的东西，都不用人写，用户方便，用户的用户也开心。比如打断，DE要够简约，别一天到晚一堆窗口，该多窗口的时候要多窗口，该单窗的时候就单窗，而且要有全屏功能，主题也要够方便，都是插件型的，要什么装什么，而且要都可以背后执行，像Chrome那样，自动背后升级思密达，eclipse有时候装个插件就可以去练习2000m了，不支持插件的DE&amp;#x2026;&amp;#x2026;那都是练葵花宝典的。
&lt;/p&gt;



&lt;p&gt;
综上，DE才是王道，用户友好的DE至关重要，没有用户友好的DE，就等着死吧，或者，就等着半死不活吧。
&lt;/p&gt;

&lt;p&gt;
然后，进入主题：主题就是，主题写错了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>WebQQ逆向</title>
   <link href="http://qinjian623.github.com/2013/02/21/webqq"/>
   <updated>2013-02-21T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/02/21/webqq</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;部分参考资料&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;ul&gt;
&lt;li&gt;Google的关键字 &quot;webqq 协议&quot;，有一篇文章，但是版本旧了，而且在密码生成上没有说明，自己动手。
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jsbin.com/itiqef/1/edit&quot;&gt;http://jsbin.com/itiqef/1/edit&lt;/a&gt; 用来调试JS代码的。
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;目前的进展:&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1&quot;&gt;确定了登陆接口位置:&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1&quot;&gt;

&lt;p&gt;   GET方法的&lt;a href=&quot;https://ssl.ptlogin2.qq.com/login&quot;&gt;https://ssl.ptlogin2.qq.com/login&lt;/a&gt; ，但是似乎没有使用https协议。
&lt;/p&gt;&lt;ul&gt;
&lt;li id=&quot;sec-2-1-1&quot;&gt;可能的分析&lt;br/&gt;
     以下是GET方法中传递的参数。



&lt;pre class=&quot;example&quot;&gt;     action=3-22-67651
     aid=1003903
     dumy=
     fp=loginerroralert
     from_ui=1
     g=1
     h=1
     js_type=0
     js_ver=10021
     login2qq=1
#这个签名可能有作用
     login_sig=f34BxoLH*o9XFnZJwZA2QPGJ94nQ0aFl55FqbM-a6647vQkl4ZL-QKRtOhe-OSPn
     mibao_css=m_webqq
#这个应该是md5加密后的用户密码,但是需要知道密码的转换方法
     p=7BB11BE08A1923E1F2704BFA4D40F6F0
     ptlang=2052
     ptredirect=0
     pttype=1
     remember_uin=1
     t=1
#用户qq号
     u=569945030
     u1=http://web.qq.com/loginproxy.html?login2qq=1&amp;amp;webqq_type=10
#验证码
     verifycode=!QSG
     webqq_type=10
&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2&quot;&gt;加密方法定位&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2&quot;&gt;

&lt;p&gt;    发起登陆请求的代码位置,由Chrome开发者工具完成定位.其中搜索md5,可以找到的代码段,猜测代码加密方法为此,继续查找相关函数.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;if(C[J].name==&quot;p&quot;){
                var M=C.p.value;
                var I=hexchar2bin(md5(M));
                var H=md5(I+pt.uin);
                var G=md5(H+C.verifycode.value.toUpperCase());
                A+=G
}else{
        if(C[J].name==&quot;u1&quot;||C[J].name==&quot;ep&quot;){
                var D=C[J].value;var L=&quot;&quot;;
                if(g_appid==&quot;1003903&quot;&amp;amp;&amp;amp;B){
                        L=/\?/g.test(D)?&quot;&amp;amp;&quot;:&quot;?&quot;;
                        var F=document.getElementById(&quot;webqq_type&quot;).value;
                        L+=&quot;login2qq=&quot;+B.value+&quot;&amp;amp;webqq_type=&quot;+F
                }
                A+=encodeURIComponent(D+L)
        }
}
&lt;/pre&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3&quot;&gt;相关函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3&quot;&gt;

&lt;ul&gt;
&lt;li id=&quot;sec-2-3-1&quot;&gt;hexchar2bin&lt;br/&gt;
动态语言就是这么流氓&amp;hellip;没辙啊&amp;hellip;



&lt;pre class=&quot;example&quot;&gt;function hexchar2bin(str){
        var arr=[];
        for(var i=0;i&amp;lt;str.length;i=i+2){
                arr.push(&quot;\\x&quot;+str.substr(i,2))}
        arr=arr.join(&quot;&quot;);
        eval(&quot;var temp = '&quot;+arr+&quot;'&quot;);
        return temp}
&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-2-3-2&quot;&gt;md5&lt;br/&gt;



&lt;pre class=&quot;example&quot;&gt;var chrsz=8;

function md5(A){
        return hex_md5(A)}
function hex_md5(A){return binl2hex(core_md5(str2binl(A),A.length*chrsz))}
function binl2hex(C){
        var B=hexcase?&quot;0123456789ABCDEF&quot;:&quot;0123456789abcdef&quot;;
        var D=&quot;&quot;;
        for(var A=0;A&amp;lt;C.length*4;A++){
                D+=B.charAt((C[A&amp;gt;&amp;gt;2]&amp;gt;&amp;gt;((A%4)*8+4))&amp;amp;15)+B.charAt((C[A&amp;gt;&amp;gt;2]&amp;gt;&amp;gt;((A%4)*8))&amp;amp;15)
                }
        return D}
function str2binl(D){
  var C=Array();
  var A=(1&amp;lt;&amp;lt;chrsz)-1;
  for(var B=0;B&amp;lt;D.length*chrsz;B+=chrsz){
    C[B&amp;gt;&amp;gt;5]|=(D.charCodeAt(B/chrsz)&amp;amp;A)&amp;lt;&amp;lt;(B%32);}
  return C;}
function core_md5(K,F){
        K[F&amp;gt;&amp;gt;5]|=128&amp;lt;&amp;lt;((F)%32);
        K[(((F+64)&amp;gt;&amp;gt;&amp;gt;9)&amp;lt;&amp;lt;4)+14]=F;
        var J=1732584193;
        var I=-271733879;
        var H=-1732584194;
        var G=271733878;
        for(var C=0;C&amp;lt;K.length;C+=16){
                var E=J;var D=I;var B=H;var A=G;
                J=md5_ff(J,I,H,G,K[C+0],7,-680876936);
                G=md5_ff(G,J,I,H,K[C+1],12,-389564586);
                H=md5_ff(H,G,J,I,K[C+2],17,606105819);
                I=md5_ff(I,H,G,J,K[C+3],22,-1044525330);
                J=md5_ff(J,I,H,G,K[C+4],7,-176418897);
                G=md5_ff(G,J,I,H,K[C+5],12,1200080426);
                H=md5_ff(H,G,J,I,K[C+6],17,-1473231341);
                I=md5_ff(I,H,G,J,K[C+7],22,-45705983);
                J=md5_ff(J,I,H,G,K[C+8],7,1770035416);
                G=md5_ff(G,J,I,H,K[C+9],12,-1958414417);
                H=md5_ff(H,G,J,I,K[C+10],17,-42063);
                I=md5_ff(I,H,G,J,K[C+11],22,-1990404162);
                J=md5_ff(J,I,H,G,K[C+12],7,1804603682);
                G=md5_ff(G,J,I,H,K[C+13],12,-40341101);
                H=md5_ff(H,G,J,I,K[C+14],17,-1502002290);
                I=md5_ff(I,H,G,J,K[C+15],22,1236535329);
                J=md5_gg(J,I,H,G,K[C+1],5,-165796510);
                G=md5_gg(G,J,I,H,K[C+6],9,-1069501632);
                H=md5_gg(H,G,J,I,K[C+11],14,643717713);
                I=md5_gg(I,H,G,J,K[C+0],20,-373897302);
                J=md5_gg(J,I,H,G,K[C+5],5,-701558691);
                G=md5_gg(G,J,I,H,K[C+10],9,38016083);
                H=md5_gg(H,G,J,I,K[C+15],14,-660478335);
                I=md5_gg(I,H,G,J,K[C+4],20,-405537848);
                J=md5_gg(J,I,H,G,K[C+9],5,568446438);
                G=md5_gg(G,J,I,H,K[C+14],9,-1019803690);
                H=md5_gg(H,G,J,I,K[C+3],14,-187363961);
                I=md5_gg(I,H,G,J,K[C+8],20,1163531501);
                J=md5_gg(J,I,H,G,K[C+13],5,-1444681467);
                G=md5_gg(G,J,I,H,K[C+2],9,-51403784);
                H=md5_gg(H,G,J,I,K[C+7],14,1735328473);
                I=md5_gg(I,H,G,J,K[C+12],20,-1926607734);
                J=md5_hh(J,I,H,G,K[C+5],4,-378558);
                G=md5_hh(G,J,I,H,K[C+8],11,-2022574463);
                H=md5_hh(H,G,J,I,K[C+11],16,1839030562);
                I=md5_hh(I,H,G,J,K[C+14],23,-35309556);
                J=md5_hh(J,I,H,G,K[C+1],4,-1530992060);
                G=md5_hh(G,J,I,H,K[C+4],11,1272893353);
                H=md5_hh(H,G,J,I,K[C+7],16,-155497632);
                I=md5_hh(I,H,G,J,K[C+10],23,-1094730640);
                J=md5_hh(J,I,H,G,K[C+13],4,681279174);
                G=md5_hh(G,J,I,H,K[C+0],11,-358537222);
                H=md5_hh(H,G,J,I,K[C+3],16,-722521979);
                I=md5_hh(I,H,G,J,K[C+6],23,76029189);
                J=md5_hh(J,I,H,G,K[C+9],4,-640364487);
                G=md5_hh(G,J,I,H,K[C+12],11,-421815835);
                H=md5_hh(H,G,J,I,K[C+15],16,530742520);
                I=md5_hh(I,H,G,J,K[C+2],23,-995338651);
                J=md5_ii(J,I,H,G,K[C+0],6,-198630844);
                G=md5_ii(G,J,I,H,K[C+7],10,1126891415);
                H=md5_ii(H,G,J,I,K[C+14],15,-1416354905);
                I=md5_ii(I,H,G,J,K[C+5],21,-57434055);
                J=md5_ii(J,I,H,G,K[C+12],6,1700485571);
                G=md5_ii(G,J,I,H,K[C+3],10,-1894986606);
                H=md5_ii(H,G,J,I,K[C+10],15,-1051523);
                I=md5_ii(I,H,G,J,K[C+1],21,-2054922799);
                J=md5_ii(J,I,H,G,K[C+8],6,1873313359);
                G=md5_ii(G,J,I,H,K[C+15],10,-30611744);
                H=md5_ii(H,G,J,I,K[C+6],15,-1560198380);
                I=md5_ii(I,H,G,J,K[C+13],21,1309151649);
                J=md5_ii(J,I,H,G,K[C+4],6,-145523070);
                G=md5_ii(G,J,I,H,K[C+11],10,-1120210379);
                H=md5_ii(H,G,J,I,K[C+2],15,718787259);
                I=md5_ii(I,H,G,J,K[C+9],21,-343485551);
                J=safe_add(J,E);I=safe_add(I,D);H=safe_add(H,B);G=safe_add(G,A)}
        if(mode==16){
                return Array(I,H)}
        else{
                return Array(J,I,H,G)
                }
        }
function safe_add(A,D){
  var C=(A&amp;amp;65535)+(D&amp;amp;65535);
  var B=(A&amp;gt;&amp;gt;16)+(D&amp;gt;&amp;gt;16)+(C&amp;gt;&amp;gt;16);
  return(B&amp;lt;&amp;lt;16)|(C&amp;amp;65535);
}
function md5_cmn(F,C,B,A,E,D){
  return safe_add(bit_rol(safe_add(safe_add(C,F),safe_add(A,D)),E),B);}
function md5_ff(C,B,G,F,A,E,D){
  return md5_cmn((B&amp;amp;G)|((~B)&amp;amp;F),C,B,A,E,D);}
function md5_gg(C,B,G,F,A,E,D){return md5_cmn((B&amp;amp;F)|(G&amp;amp;(~F)),C,B,A,E,D);}
function md5_hh(C,B,G,F,A,E,D){return md5_cmn(B^G^F,C,B,A,E,D);}
function md5_ii(C,B,G,F,A,E,D){return md5_cmn(G^(B|(~F)),C,B,A,E,D);}
function bit_rol(A,B){return(A&amp;lt;&amp;lt;B)|(A&amp;gt;&amp;gt;&amp;gt;(32-B));}

var chrsz=8;
var hexcase=1;var b64pad=&quot;&quot;;var chrsz=8;var mode=32;
function str2binl(D){
  var C=Array();
  var A=(1&amp;lt;&amp;lt;chrsz)-1;
  for(var B=0;B&amp;lt;D.length*chrsz;B+=chrsz){
    C[B&amp;gt;&amp;gt;5]|=(D.charCodeAt(B/chrsz)&amp;amp;A)&amp;lt;&amp;lt;(B%32);}
  return C;}
&lt;/pre&gt;

&lt;p&gt;
当然,最后自己验证的结果就是,算的就是MD5.函数名字没起错,- -!
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-4&quot;&gt;猜测密码转换过程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-4&quot;&gt;

&lt;p&gt;    基本不用猜了,很明显,从之前的if语句中可以看到转换算法了,但是缺一个pt.uin不知道,找了找,要用这个函数,函数的参数就是uin,其实就是qq号:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;function uin2hex(str){
  var maxLength=16;
  str=parseInt(str);
  var hex=str.toString(16);
  var len=hex.length;
  for(var i=len;i&amp;lt;maxLength;i++){hex=&quot;0&quot;+hex;}
  var arr=[];
  for(var j=0;j&amp;lt;maxLength;j+=2){arr.push(&quot;\\x&quot;+hex.substr(j,2));}
  var result=arr.join(&quot;&quot;);
  eval('result=&quot;'+result+'&quot;');
  return result;}
&lt;/pre&gt;

&lt;p&gt;
    综上,md5混合着用户密码、用户qq号、验证码生成最后上传用于验证的加密后密码.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-5&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; 进一步的其他待猜测的数据&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-5&quot;&gt;

&lt;p&gt;    拼图上还缺的一些东西：
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;cookie中的内容的作用，不过考虑到在登录前cookie貌似没什么用，所以cookie应该就是意思意思，接受下服务器内容就没了。
&lt;/li&gt;
&lt;li&gt;那个GET方法中的什么什么sig，怎么弄来的？
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>回归问题</title>
   <link href="http://qinjian623.github.com/2013/02/20/regression"/>
   <updated>2013-02-20T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/02/20/regression</id>
   <content type="html">&lt;p&gt;
有关回归的杂东西.
超级初始版本，以后慢慢改思密达。
&lt;/p&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;回归是什么?&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;   将多个点X映射为一个函数f(x)来表示.但是由于不一定所有的点已经能够准确在f(x)上,所以存在误差问题,将误差最小化自然 &lt;i&gt;拟合&lt;/i&gt; 的比较好,于是就是个最优化问题.
&lt;/p&gt;
&lt;p&gt;
   有关误差函数,其实可以随便定义,不过平方误差用的比较多: \(\sum_{i} \left(y_i - f(x_i)\right)^2\), 更符合直觉上的情况是,直接相减的误差: \(\sum_{i} \left|y_i - f(x_i)\right|\) &lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;简单线性回归&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;   一元的线性回归,用$f(x) = &amp;omega;&lt;sub&gt;1&lt;/sub&gt; x + &amp;omega;&lt;sub&gt;0&lt;/sub&gt;$来模拟.使用的方法是Least Square.就是最小化误差,而误差函数使用的是平方误差.由于假设了函数形式和待解的参数,可以带入方程来处理.$$ SSE = \sum_{i=1}^N \left[ y_i -f(x_i)\right]^2 = \sum_{i=1}^N \left[ y_i -\omega_1 x - \omega_0\right]^2 $$
   然后需要求解的就是SSE的最小值,其实就是这个函数的最小值.常规过程,求导\得0\解结果.SSE有两个变量,所以会有两个偏导:
   $$\frac{\partial E}{\partial \omega_0} = -2 \sum_{i=1}^N \left[y_i - \omega_1 x_i - \omega_0 \right] = 0$$
   $$\frac{\partial E}{\partial \omega_1} = -2 \sum_{i=1}^N \left[y_i - \omega_1 x_i - \omega_0 \right]x_i = 0$$
   两方程解的两个未知数,看着也不是线性相关,自然可以解出来.不过,还可以蛋疼的用矩阵来解这样的方程组,因为这样以后如果方程组多了也说得过去.
   \begin{equation}
   \begin{pmatrix} 
   N &amp; \sum_i x_i \\ 
   \sum_i x_i &amp; \sum_i x_i^2\end{pmatrix}
   \begin{pmatrix}
     \omega_0 \\
     \omega_1
   \end{pmatrix}
   =
   \begin{pmatrix} 
   \sum_i y_i \\
   \sum_i x_i y_i \end{pmatrix}
   \end{equation}
   还可以证明,这样的方程有个通解,
   \begin{eqnarray}
   \hat{\omega_0} = \bar{y} - \hat{\omega_1}\bar{x} \\
   \hat{\omega_1} = \frac{\sigma_{xy}}{\sigma_{xx}}
   \end{eqnarray}
   其中:
   \begin{eqnarray}
   &amp;&amp; \bar{x} = \sum_i x_i / N \\
   &amp;&amp; \bar{y} = \sum_i y_i / N \\
   &amp;&amp; \sigma_{xy} = \sum_i (x_i - \bar{x})(y_i - \bar{y}) \\
   &amp;&amp; \sigma_{xx} = \sum_i (x_i - \bar{x})^2 \\
   &amp;&amp; \sigma_{yy} = \sum_i (y_i - \bar{y})^2 \\
   \end{eqnarray}
&lt;/p&gt;
&lt;p&gt;   
   公式怎么这么多&amp;hellip;&amp;hellip;然后就可以将通解带入最开始的函数了.不写公式了,都是些超级水的公式.浪费时间.但是资料里有这么一句话:
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;&lt;b&gt;线性模型是具有连续导数的任意函数的一阶泰勒级数近似&lt;/b&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
   什么叫做赤裸裸的讨厌.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;误差问题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;   误差无处不在,所以回归的时候自然要考虑误差对数据的影响,而且在误差面前,人类实在太渺小,都是假定误差是随机独立的,在函数外面加一个噪音数据.
   \begin{equation}
   y = f(X) + \epsilon
   \end{equation}
   如果假定是正态分布,就需要分布如下:
   \begin{equation}
     P(\epsilon | x,\Omega ) = \frac{1}{\sqrt{2\pi\sigma^2}}
     e^{-\frac{[y-f(x,\Omega)]^2}
     {2\sigma^2}}
   \end{equation}
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4&quot;&gt;多元线性回归&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;   继续变 X = (1 x) ,有:
   \begin{equation}
   X^T X = \begin{pmatrix}
             1^T 1 &amp; 1^Tx \\
             x^T 1 &amp; x^Tx \\
           \end{pmatrix}
          =    
   \begin{pmatrix} 
   N &amp; \sum_i x_i \\ 
   \sum_i x_i &amp; \sum_i x_i^2\end{pmatrix}
   \end{equation}
   \begin{equation}
     (1 x)^T y = \begin{pmatrix}
                   1^Ty \\
                   x^Ty \\
                 \end{pmatrix}
                 =    \begin{pmatrix} 
                 \sum_i y_i \\
                 \sum_i x_i y_i \end{pmatrix}
   \end{equation}
   再将这些变换代回去,
   \begin{eqnarray}
   &amp;&amp; X^TX\Omega = X^Ty
   &amp;&amp; \Omega = (\omega_0, \omega_1)^T
   \end{eqnarray}
   解方程的结果:
   \begin{eqnarray}
     \Omega = 
   \end{eqnarray}

&lt;/p&gt;&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 为什么是用平方用得特别多呢?应该还有更进一步的原因.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>org-mode中文导出latex解决方法</title>
   <link href="http://qinjian623.github.com/2013/02/20/chinese_latex_in_org_mode"/>
   <updated>2013-02-20T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/02/20/chinese_latex_in_org_mode</id>
   <content type="html">&lt;p&gt;
为什么折腾这个?因为自己看文章看烦了.具体解决方法很简单,因为英文的导出org-mode一点问题都没有.
&lt;/p&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;tex的中文支持&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;   因为xelatex的中文支持没有问题了,所以只要按照xelatex的要求,在tex文件里面加一句,就可以:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;%这里是tex文件思密达
\setmainfont{SimSun}
&lt;/pre&gt;

&lt;p&gt;
   里面的字体使用系统中的字体名字就可以,命令:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;#这里是shell命令思密达
fc-list
&lt;/pre&gt;

&lt;p&gt;
   简直简单爆了,不过中英文字体得分开,否则就丑爆了.所以要用包,依然简单爆了:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;%这里是tex文件思密达
\usepackage{xeCJK}
\setCJKmainfont{SimSun}
%之前的setmainfont就不需要了.或者拿去设定英文字体?(这句我不负责任的).
&lt;/pre&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;org-mode的中文支持&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;   既然知道怎么处理tex的中文,org-mode的中文导出就一点问题都没有了.在header里面加两行内容就可以了:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;#+这里是org文件思密达
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
&lt;/pre&gt;

&lt;p&gt;
   然后,导出的tex文件就可以用xelatex直接生成pdf了.但是,org-mode可以直接顺便导出pdf的,所以要把默认的程序改成xelatex,改改配置文件,以下内容我不负责任的,因为自己在公司的XP上没弄好思密达.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;;;这里是emacs的配置文件思密达
(setq org-latex-to-pdf-process '(&quot;xelatex %f&quot;))
&lt;/pre&gt;

&lt;p&gt;
   里面的路径就看各自环境了,然后,就没有然后了.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;后来&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;   懒人自然也可以直接把内容写到配置文件里面,以后就不用手动写.或者YASnippet里.自动填写.参考内容实在是没有记录下来对不起思密达.Google &quot;latex export org-mode&quot;是其中的一部分.好水思密达.用org写东西绝对比用tex写东西要爽歪歪,字体中文对齐等等细节问题就先不纠结了.
&lt;/p&gt;



&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Java Class File Format</title>
   <link href="http://qinjian623.github.com/2013/01/11/java_class_file"/>
   <updated>2013-01-11T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/01/11/java_class_file</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Reference&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_class_file&quot;&gt;http://en.wikipedia.org/wiki/Java_class_file&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Java Specification Request-202 Chapter 4
&lt;/li&gt;
&lt;/ol&gt;



&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;文件头&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;struct Class_File_Format {
   u4 magic_number;   

   u2 minor_version;   
   u2 major_version;   

   u2 constant_pool_count;   

   cp_info constant_pool[constant_pool_count - 1];

   u2 access_flags;

   u2 this_class;
   u2 super_class;

   u2 interfaces_count;   

   u2 interfaces[interfaces_count];

   u2 fields_count;   
   field_info fields[fields_count];

   u2 methods_count;
   method_info methods[methods_count];

   u2 attributes_count;   
   attribute_info attributes[attributes_count];
}
&lt;/pre&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;magic_number&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;

&lt;p&gt;   固定值 &quot;0xcafebabe&quot;,但是在一个文件中看到的竟然是 &lt;b&gt;c38a c3be c2ba c2be&lt;/b&gt; ,只好换一个文件看了.
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;  A Java virtual machine implementation can support a class
ﬁle format of version v if and only if v lies in some contiguous
range Mi.0 ≤ v ≤Mj.m. Only Sun can specify what range of
versions a Java virtual machine implementation conforming to a
certain release level of the Java platform may support.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;minor_version and major_version&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;

&lt;p&gt;   看到的两个都是 &lt;b&gt;0000 0032&lt;/b&gt; ,
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;constant_pool_count and constant_pool&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;

&lt;p&gt;   constant_pool 范围是 1~constant_pool_count-1,
   constant_pool中的数据结构是变长的:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;cp_info {
  u1 tag;
  u2 info[];
}
&lt;/pre&gt;

&lt;p&gt;
   前面的tag表明类型.类型表格:
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;right&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;Constant Type&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;Value&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Class&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;7&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Fieldref&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;9&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Methodref&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;10&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_InterfaceMethorref&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;11&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_String&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;8&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Integer&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Float&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;4&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Long&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Double&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;6&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_NameAndType&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;12&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CONSTANT_Utf8&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

   后面跟随的是则是根据tag不同的结构.


&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-1&quot;&gt;CONSTANT_Class&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-1&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;CONSTANT_Class_info {
  u1 tag;
  u2 name_index;
}
&lt;/pre&gt;

&lt;p&gt;
    注意,这里代表的是cp&lt;sub&gt;info的整个&lt;/sub&gt;,所以也包括了tag.name_index则代表的具体的名称的index,具体的名称同样也会在pool里面,指向的类型应该是 CONSTANT_Utf8_info 的类型.
&lt;/p&gt;
&lt;p&gt;
    数组也是对象,表示形式比较特殊:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;int[][] =&amp;gt; [[I
Thread[] =&amp;gt; [Ljava/lang/Thread;
&lt;/pre&gt;

&lt;blockquote&gt;

&lt;p&gt;An array type descriptor is valid only if it represents 255 or fewer dimensions.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
    这句是什么意思呢?最多只支持255维度?
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-2&quot;&gt;CONSTANT_*ref_info&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-2&quot;&gt;

&lt;p&gt;    *代表的是Field/Method/Interface,这几个结构一致.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;CONSTANT_*ref_info {
  u1 tag;
  u2 class_index;
  u2 name_and_type_index;
}
&lt;/pre&gt;

&lt;ul&gt;
&lt;li id=&quot;sec-2-3-2-1&quot;&gt;class_index&lt;br/&gt;
     指向的内容,必须是 CONSTANT_Class_info 的结构. 而Methodref指向的不能是interface而只能是class.Interfaceref的只能是interface. Fieldref的则两种随便.

&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-2-3-2-2&quot;&gt;name_and_type_index&lt;br/&gt;
     指向的则是 CONSTANT_NameAndType_info, 这个表述的是method/field的名字和描述&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.field的必须是一个field descriptor. CONSTANT_Methodref_info的名字如果以 '&amp;lt;' 开始, 就需要是固定的 &amp;lt;init&amp;gt; ,表示 an instance initialization method, 其返回值必须是void.
&lt;ul&gt;
&lt;li id=&quot;sec-2-3-2-2-1&quot;&gt;field descriptor&lt;br/&gt;



&lt;pre class=&quot;example&quot;&gt;  A field descriptor represents the type of a class, instance, or local variable. It is a series of characters generated by the grammar
FieldDescriptor:
  FieldType
ComponentType:
  FieldType
FieldType:
  BaseType
ObjectType
  ArrayType
BaseType:
  *B*
  *C*
  *D*
  *F*
  *I*
  *J*
  *S*
  *Z*
ObjectType:
  L Classname;
ArrayType:
  [ComponentType
&lt;/pre&gt;


&lt;p&gt;
      /BaseType/的对应表格如下:
&lt;/p&gt;&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;BaseType Character&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Type&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Interpretation&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;B&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;byte&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;signed byte&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;C&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;char&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Unicode character&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;D&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;double&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;double-precision floating-point value&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;F&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;float&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;single-precision floating-point value&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;I&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;int&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;integer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;J&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;long&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;long integer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;L Classname;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;reference&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;an instance of class &amp;lt;classname&amp;gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;S&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;short&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;signed short&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;Z&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;boolean&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;true or false&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;[&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;reference&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;one array dimension&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-2-3-2-2-2&quot;&gt;剩下的都要是method descriptor&lt;br/&gt;
      直接引用吧:



&lt;pre class=&quot;example&quot;&gt;MethodDescriptor:
  ( ParameterDescriptor* ) ReturnDescriptor
A parameter descriptor represents a parameter passed to a method:
ParameterDescriptor:
  FieldType
A return descriptor represents the type of the value returned from a method. It is a
series of characters generated by the grammar:

ReturnDescriptor:
  FieldType
  VoidDescriptor

VoidDescriptor:
  *V*
&lt;/pre&gt;

&lt;p&gt;
这里,parameters的length要少于等于255.具体的length计算要包括所有的parameters的和, &lt;b&gt;long&lt;/b&gt; 或者 &lt;b&gt;double&lt;/b&gt; 代表两个单元,而其他的都代表一个单元&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.2&quot; href=&quot;#fn-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.还要注意,实体类和接口方法调用的时候,this这个参数也是要算进去的&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.3&quot; href=&quot;#fn-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;  Object mymethod(int i, double d, Thread t)
=&amp;gt; (IDLjava/lang/Thread;)Ljava/lang/Object;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-3&quot;&gt;CONSTANT_String_info&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-3&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;CONSTANT_String_info {
  u1 tag;
  u2 string_index;
}
&lt;/pre&gt;


&lt;p&gt;
比较简单,index指向的必须是 CONSTANT_Utf8_info
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-4&quot;&gt;CONSTANT_Integer_info and CONSTANT_Float_info&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-4&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;CONSTANT_*_info {
  u1 tag;
  u4 bytes;
}
&lt;/pre&gt;


&lt;p&gt;
bytes中保存是常量的值,其中float的是IEEE 754 floating-point single format.都是big-endian.
表示float的value,首先转换为int,直接引用:
&lt;/p&gt;&lt;blockquote&gt;

&lt;ul&gt;
&lt;li&gt;If bits is 0x7f800000, the float value will be positive inﬁnity.
&lt;/li&gt;
&lt;li&gt;If bits is 0xff800000, the float value will be negative inﬁnity.
&lt;/li&gt;
&lt;li&gt;If bits is in the range 0x7f800001 through 0x7fffffff or in the range 0xff800001 through 0xffffffff, the float value will be NaN.
&lt;/li&gt;
&lt;li&gt;In all other cases, let s, e, and m be three values that might be computed from bits:
&lt;ul&gt;
&lt;li&gt;int s = ((bits &amp;gt;&amp;gt; 31) == 0) ? 1 : -1;
&lt;/li&gt;
&lt;li&gt;int e = ((bits &amp;gt;&amp;gt; 23) &amp;amp; 0xff);
&lt;/li&gt;
&lt;li&gt;int m = (e == 0) ?
       (bits &amp;amp; 0x7fffff) &amp;lt;&amp;lt; 1 :
       (bits &amp;amp; 0x7fffff) | 0x800000;
&lt;/li&gt;
&lt;li&gt;Then the float value equals the result of the mathematical expression . s * m* 2&lt;sup&gt;(e-150)&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;/blockquote&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-5&quot;&gt;CONSTANT_Long_info and CONSTANT_Double_info&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-5&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;CONSTANT_*_info {
  u1 tag;
  u4 high_bytes;
  u4 low_bytes;
}
&lt;/pre&gt;


&lt;p&gt;
这里计算index有个特殊情况,这两个结构一次占用两个位置.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;All 8-byte constants take up two entries in the constant_pool table of the class
ﬁle. If a CONSTANT_Long_info or CONSTANT_Double_info structure is the item
in the constant_pool table at index n, then the next usable item in the pool is
located at index n +2. The constant_pool index n +1 must be valid but is
considered unusable.
&lt;/pre&gt;

&lt;p&gt;
基本类似上面的integer和float,只不过长度加多了.有关double的确定也是一样:
&lt;/p&gt;&lt;blockquote&gt;

&lt;ul&gt;
&lt;li&gt;If bits is 0x7ff0000000000000L, the double value will be positive inﬁnity.
&lt;/li&gt;
&lt;li&gt;If bits is 0xfff0000000000000L, the double value will be negative inﬁnity.
&lt;/li&gt;
&lt;li&gt;If bits is in the range 0x7ff0000000000001L through 0x7fffffffffffffffL or in the range 0xfff0000000000001L through 0xffffffffffffffffL, the double value will be NaN.
&lt;/li&gt;
&lt;li&gt;In all other cases, let s, e, and m be three values that might be computed from bits:
&lt;ul&gt;
&lt;li&gt;int s = ((bits &amp;gt;&amp;gt; 63) == 0) ? 1 : -1;
&lt;/li&gt;
&lt;li&gt;int e = (int)((bits &amp;gt;&amp;gt; 52) &amp;amp; 0x7ffL);
&lt;/li&gt;
&lt;li&gt;long m = (e == 0) ?
        (bits &amp;amp; 0xfffffffffffffL) &amp;lt;&amp;lt; 1 :
        (bits &amp;amp; 0xfffffffffffffL) | 0x10000000000000L;
&lt;/li&gt;
&lt;li&gt;Then the ﬂoating-point value equals the double value of the mathematical expression s*m*2&lt;sup&gt;(e-1075)&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;/blockquote&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-6&quot;&gt;CONSTANT_NameAndType_info&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-6&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;CONSTANT_NameAndType_info {
  u1 tag;
  u2 name_index;
  u2 descriptor_index;
}
&lt;/pre&gt;

&lt;p&gt;
index指向的都是 CONSTANT_Utf8_info,一个是名字,一个是 descriptor.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-7&quot;&gt;CONSTANT_Utf8_info&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-7&quot;&gt;

&lt;blockquote&gt;

&lt;p&gt;The CONSTANT_Utf8_info structure is used to represent constant string values.String content is encoded in &lt;i&gt;modified&lt;/i&gt; UTF-8.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
和标准的UTF-8有小不同:
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;There are two differences between this format and the “standard” UTF-8 format.
First, the null character (char)0 is encoded using the 2-byte format rather than
the 1-byte format, so that modiﬁed UTF-8 strings never have embedded nulls.
Second, only the 1-byte, 2-byte, and 3-byte formats of standard UTF-8 are used.
The Java VM does not recognize the four-byte format of standard UTF-8; it uses
its own two-times-three-byte format instead.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
结构如下:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;CONSTANT_Utf8_info {
  u1 tag;
  u2 length;
  u1 bytes[length];
}
&lt;/pre&gt;

&lt;p&gt;
没有可以多废话,很明显,限制条件是,不能是0 和 range(0xf0, 0xff)&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.4&quot; href=&quot;#fn-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;扯远了,要回来了,access_flags&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;

&lt;p&gt;   列表就可以,如下:
&lt;/p&gt;&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;right&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;Flag Name&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;Value&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Intepretation&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_PUBLIC&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x0001&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Declared public; may be accessed from outside its package.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_FINAL&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x0010&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Declared final; no subclasses allowed.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_SUPER&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x0020&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Treat superclass methods specially when invoked by the invokespecial instruction.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_INTERFACE&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x0200&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Is an interface, not a class.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_ABSTRACT&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x0400&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Declared abstract; must not be instantiated.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_SYNTHETIC&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x1000&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Declared synthetic; Not present in the source code.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_ANNOTATION&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x2000&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Declared as an annotation type.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ACC_ENUM&lt;/td&gt;&lt;td class=&quot;right&quot;&gt;0x4000&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Declared as an enum type.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

  看位置就可以知道,几个flag可以同时存在,interface必须也要有abstract,annotation有了就要有interface.

&lt;p&gt;
  super的用来向上兼容,新编译器都应该直接设置.应该是为了 invokespecial 这个指令.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot;&gt;this_index&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;

&lt;p&gt;   指向pool里面的CONSTANT&lt;sub&gt;Class&lt;/sub&gt;&lt;sub&gt;info类型&lt;/sub&gt;.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot;&gt;super_class&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;

&lt;p&gt;   除了object都要有,这是废话.不能是final的,这也是废话.interface的都要指向object,这个算不是废话.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-7&quot;&gt;interfaces_count and interfaces[]&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-7&quot;&gt;

&lt;p&gt;   顺序是代码中的从左到右,或者是direct superinterface.指向的,自然是pool里面的东西.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-8&quot;&gt;fields_count and fields[]&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;

&lt;p&gt;   其中的field是field_info结构
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-2-8-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-8-1&quot;&gt;field_info&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-8-1&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;field_info {
 u2 access_flags;
 u2 name_index;
 u2 descriptor_index;
 u2 attributes_count;
 attribute_info attributes[attributes_count];
}
&lt;/pre&gt;

&lt;p&gt;
主要就是 attribute_info ,结构:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;attribute_info {
  u2 attribute_name_index;
  u4 attribute_length;
  u1 info[attribute_length];
}
&lt;/pre&gt;

&lt;p&gt;
有predefined的,SourceFile,ConstantValue,Code,StackMapTable,Exceptions,InnerClasses,EnclosingMethod, Synthetic, Signature,
LineNumberTable, LocalVariableTable and Deprecated&amp;hellip;后面太多了,不看了.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-9&quot;&gt;method_count and methods[]&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-9&quot;&gt;

&lt;p&gt;   methods里面存了所有的方法,除了superclass和superinterface的方法.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-10&quot;&gt;attributes_count and attributes[]&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-10&quot;&gt;


&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 描述是什么东西?Doc?
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.2&quot; href=&quot;#fnr-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 为什么double和long有特殊呢?
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.3&quot; href=&quot;#fnr-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 原来Java也是要传this的&amp;hellip;&amp;hellip;
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.4&quot; href=&quot;#fnr-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 这个区间到底是开是闭没说,估计应该是闭区间.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>JVM指令</title>
   <link href="http://qinjian623.github.com/2013/01/11/JVM_instruction"/>
   <updated>2013-01-11T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/01/11/JVM_instruction</id>
   <content type="html">&lt;p&gt;
转载的表格,来源在:&lt;a href=&quot;http://blog.csdn.net/lm2302293/article/details/6713147&quot;&gt;http://blog.csdn.net/lm2302293/article/details/6713147&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
洋文的:&lt;a href=&quot;http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings&quot;&gt;http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
命令是:javap -help
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot; style=&quot;width:515px; height:13749px&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;指令码&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;助记符&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;功能描述&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x00&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;nop&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;无操作&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x01&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aconst_null&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; aconst_null&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; null进栈。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;null&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;注意：JVM并没有为null指派一个具体的值。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x02&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iconst_m1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型常量值-1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x03&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iconst_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型常量值0进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x04&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iconst_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型常量值1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x05&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iconst_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型常量值2进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x06&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iconst_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型常量值3进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x07&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iconst_4&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型常量值4进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x08&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iconst_5&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型常量值5进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x09&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lconst_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;long型常量值0进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x0A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lconst_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;long型常量值1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x0B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fconst_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;float型常量值0进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x0C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fconst_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;float型常量值1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x0D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fconst_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;float型常量值2进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x0E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dconst_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;double型常量值0进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x0F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dconst_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;double型常量值1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x10&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;bipush&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将一个byte型常量值推送至栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x11&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;sipush&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将一个short型常量值推送至栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x12&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ldc&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将int、float或String型常量值从常量池中推送至栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x13&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ldc_w&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将int、float或String型常量值从常量池中推送至栈顶（宽索引）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x14&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ldc2_w&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将long或double型常量值从常量池中推送至栈顶（宽索引）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x15&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的int型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x16&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的long型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x17&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的float型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x18&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的double型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x19&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; aload index&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 当前frame的局部变量数组中下标为&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index的引用型局部变量进栈&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;objectref&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;index&amp;nbsp; ：&amp;nbsp; 无符号一byte整型。和wide指令联用，&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以使index为两byte。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x1A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iload_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第一个int型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x1B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iload_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第二个int型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x1C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iload_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第三个int型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x1D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iload_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第四个int型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x1E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lload_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第一个long型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x1F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lload_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第二个long型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x20&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lload_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第三个long型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x21&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lload_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第四个long型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x22&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fload_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第一个float型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x23&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fload_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第二个float型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x24&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fload_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第三个float型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x25&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fload_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第四个float型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x26&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dload_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第一个double型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x27&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dload_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第二个double型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x28&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dload_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第三个double型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x29&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dload_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;第四个double型局部变量进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x2A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aload_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：aload_0&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;该指令的行为类似于aload指令index为0的情况。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x2B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aload_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x2C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aload_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x2D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aload_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x2E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iaload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的int型数组的指定下标处的值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x2F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;laload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的long型数组的指定下标处的值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x30&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;faload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的float型数组的指定下标处的值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x31&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;daload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的double型数组的指定下标处的值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x32&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aaload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; aaload&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 栈顶的数组下标（index）、数组引用&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; （arrayref）出栈，并根据这两个数值&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 取出对应的数组元素值（value）进栈。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;抛出异常：&amp;nbsp; 如果arrayref的值为null，会抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NullPointerException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果index造成数组越界，会抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ArrayIndexOutOfBoundsException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;arrayref&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;value&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;index&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;index&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ：&amp;nbsp; int类型&lt;/p&gt;
&lt;p&gt;arrayref&amp;nbsp;&amp;nbsp; ：&amp;nbsp; 数组的引用&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x33&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;baload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的boolean或byte型数组的指定下标处的值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x34&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;caload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的char型数组的指定下标处的值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x35&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;saload&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定的short型数组的指定下标处的值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x36&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;istore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶int型数值存入指定的局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x37&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lstore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶long型数值存入指定的局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x38&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fstore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶float型数值存入指定的局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x39&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dstore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶double型数值存入指定的局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x3A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;astore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; astore index&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 将栈顶数值（objectref）存入当前&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; frame的局部变量数组中指定下标&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; （index）处的变量中，栈顶数值出栈。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;objectref&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;index&amp;nbsp; ：&amp;nbsp; 无符号一byte整数。该指令和wide联&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 用，index可以为无符号两byte整数。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x3B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;istore_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶int型数值存入第一个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x3C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;istore_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶int型数值存入第二个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x3D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;istore_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶int型数值存入第三个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x3E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;istore_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶int型数值存入第四个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x3F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lstore_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶long型数值存入第一个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x40&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lstore_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶long型数值存入第二个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x41&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lstore_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶long型数值存入第三个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x42&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lstore_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶long型数值存入第四个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x43&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fstore_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶float型数值存入第一个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x44&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fstore_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶float型数值存入第二个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x45&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fstore_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶float型数值存入第三个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x46&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fstore_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶float型数值存入第四个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x47&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dstore_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶double型数值存入第一个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x48&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dstore_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶double型数值存入第二个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x49&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dstore_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶double型数值存入第三个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x4A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dstore_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶double型数值存入第四个局部变量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x4B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;astore_0&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; astore_0&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 该指令的行为类似于astore指令index&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 为0的情况。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x4C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;astore_1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x4D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;astore_2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x4E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;astore_3&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x4F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iastore&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶int型数值存入指定数组的指定下标处&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x50&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lastore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶long型数值存入指定数组的指定下标处&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x51&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fastore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶float型数值存入指定数组的指定下标处&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x52&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dastore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶double型数值存入指定数组的指定下标处&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x53&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;aastore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; aastore&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 根据栈顶的引用型数值（value）、数组下&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 标（index）、数组引用（arrayref）出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 栈，将数值存入对应的数组元素中。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;抛出异常：&amp;nbsp; 如果value的类型和arrayref所引用&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 的数组的元素类型不兼容，会抛出抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ArrayStoreException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果index造成数组越界，会抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ArrayIndexOutOfBoundsException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果arrayref值为null，会抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NullPointerException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;arrayref&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;index&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;value&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;arrayref&amp;nbsp;&amp;nbsp; ：&amp;nbsp; 必须是对数组的引用&lt;/p&gt;
&lt;p&gt;index&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ：&amp;nbsp; int类型&lt;/p&gt;
&lt;p&gt;value&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ：&amp;nbsp; 引用类型&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x54&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;bastore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶boolean或byte型数值存入指定数组的指定下标处&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x55&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;castore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶char型数值存入指定数组的指定下标处&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x56&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;sastore&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;将栈顶short型数值存入指定数组的指定下标处&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x57&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶数值出栈 (该栈顶数值不能是long或double型)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x58&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;pop2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶的一个（如果是long、double型的)或两个（其它类型的）数值出栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x59&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dup&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;复制栈顶数值，并且复制值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x5A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dup_x1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;复制栈顶数值，并且复制值进栈2次&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x5B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dup_x2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;复制栈顶数值，并且复制值进栈2次或3次&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x5C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dup2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;复制栈顶一个（long、double型的)或两个（其它类型的）数值，并且复制值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x5D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dup2_x1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x5E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dup2_x2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x5F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;swap&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶的两个数值互换(要求栈顶的两个数值不能是long或double型的)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x60&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iadd&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值相加，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x61&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ladd&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值相加，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x62&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fadd&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两float型数值相加，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x63&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dadd&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两double型数值相加，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x64&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;isub&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值相减，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x65&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lsub&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值相减，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x66&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fsub&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两float型数值相减，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x67&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dsub&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两double型数值相减，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x68&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;imul&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值相乘，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x69&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lmul&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值相乘，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x6A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fmul&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两float型数值相乘，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x6B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dmul&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两double型数值相乘，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x6C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;idiv&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值相除，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x6D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ldiv&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值相除，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x6E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fdiv&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两float型数值相除，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x6F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ddiv&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两double型数值相除，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x70&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;irem&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值作取模运算，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x71&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lrem&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值作取模运算，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x72&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;frem&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两float型数值作取模运算，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x73&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;drem&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两double型数值作取模运算，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x74&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ineg&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶int型数值取负，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x75&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lneg&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶long型数值取负，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x76&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fneg&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶float型数值取负，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x77&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dneg&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶double型数值取负，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x78&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ishl&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型数值左移指定位数，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x79&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lshl&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;long型数值左移指定位数，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x7A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ishr&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型数值带符号右移指定位数，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x7B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lshr&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;long型数值带符号右移指定位数，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x7C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iushr&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int型数值无符号右移指定位数，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x7D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lushr&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;long型数值无符号右移指定位数，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x7E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iand&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值按位与，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x7F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;land&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值按位与，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x80&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ior&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值按位或，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x81&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lor&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值按位或，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x82&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ixor&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两int型数值按位异或，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x83&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lxor&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶两long型数值按位异或，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x84&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iinc&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;指定int型变量增加指定值&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x85&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;i2l&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶int值强转long值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x86&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;i2f&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶int值强转float值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x87&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;i2d&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶int值强转double值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x88&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;l2i&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶long值强转int值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x89&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;l2f&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶long值强转float值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x8A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;l2d&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶long值强转double值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x8B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;f2i&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶float值强转int值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x8C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;f2l&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶float值强转long值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x8D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;f2d&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶float值强转double值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x8E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;d2i&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶double值强转int值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x8F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;d2l&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶double值强转long值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x90&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;d2f&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶double值强转float值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x91&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;i2b&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶int值强转byte值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x92&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;i2c&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶int值强转char值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x93&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;i2s&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;栈顶int值强转short值，并且结果进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x94&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lcmp&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两long型数值大小，并且结果（1，0，-1）进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x95&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fcmpl&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两float型数值大小，并且结果（1，0，-1）进栈；当其中一个数值为NaN时， -1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x96&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;fcmpg&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两float型数值大小，并且结果（1，0，-1）进栈；当其中一个数值为NaN时，1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x97&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dcmpl&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两double型数值大小，并且结果（1，0，-1）进栈；当其中一个数值为NaN时，-1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x98&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dcmpg&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两double型数值大小，并且结果（1，0，-1）进栈；当其中一个数值为NaN时，1进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x99&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ifeq&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当栈顶int型数值等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x9A&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ifne&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当栈顶int型数值不等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x9B&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;iflt&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当栈顶int型数值小于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x9C&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ifge&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当栈顶int型数值大于等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x9D&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ifgt&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当栈顶int型数值大于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x9E&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ifle&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当栈顶int型数值小于等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0x9F&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_icmpeq&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两int型数值大小，当结果等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_icmpne&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两int型数值大小，当结果不等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA1&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_icmplt&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两int型数值大小，当结果小于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_icmpge&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两int型数值大小，当结果大于等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA3&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_icmpgt&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两int型数值大小，当结果大于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA4&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_icmple&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两int型数值大小，当结果小于等于0时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA5&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_acmpeq&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两引用型数值，当结果相等时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA6&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;if_acmpne&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;比较栈顶两引用型数值，当结果不相等时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA7&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;goto&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;无条件跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA8&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;jsr&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;跳转至指定16位offset位置，并将jsr下一条指令地址压入栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xA9&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ret&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;返回至局部变量指定的index的指令位置（通常与jsr、jsr_w联合使用）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xAA&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;tableswitch&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;用于switch条件跳转，case值连续（可变长度指令）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xAB&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lookupswitch&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;用于switch条件跳转，case值不连续（可变长度指令）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xAC&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ireturn&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当前方法返回int&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xAD&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;lreturn&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当前方法返回long&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xAE&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;freturn&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当前方法返回float&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xAF&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;dreturn&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当前方法返回double&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;areturn&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; areturn&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 从方法中返回一个对象的引用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;抛出异常：&amp;nbsp; 如果当前方法是&lt;code&gt;synchronized&lt;/code&gt;方法，&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 并且当前线程不是改方法的锁的拥有者，&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 会抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IllegalMonitorStateException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;objectref&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;objectref&amp;nbsp; ：&amp;nbsp; 被返回的对象引用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB1&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;当前方法返回void&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;getstatic&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;获取指定类的静态域，并将其值压入栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB3&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;putstatic&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;为指定的类的静态域赋值&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB4&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;getfield&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;获取指定类的实例域，并将其值压入栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB5&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;putfield&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;为指定的类的实例域赋值&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB6&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;invokevirtual&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;调用实例方法&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB7&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;invokespecial&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;调用超类构造方法、实例初始化方法、私有方法&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xB8&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;invokestatic&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;调用静态方法&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xb9&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;invokeinterface&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;调用接口方法&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xBA&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;---&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;因为历史原因，该码点为未使用的保留码点&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xBB&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;创建一个对象，并且其引用进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xBC&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;newarray&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;创建一个基本类型数组，并且其引用进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xBD&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;anewarray&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; anewarray index1 index2&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 栈顶数值（count）作为数组长度，创建&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一个引用 型数组。栈顶数值出栈，数组引&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 用进栈。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;抛出异常：&amp;nbsp; 如果count小于0，会抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NegativeArraySizeException&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;count&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;arrayref&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;count&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ：&amp;nbsp; int类型。&lt;/p&gt;
&lt;p&gt;arrayref&amp;nbsp;&amp;nbsp; ：&amp;nbsp; 对所创建的数组的引用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xBE&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;arraylength&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; arraylength&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 栈顶的数组引用（arrayref）出栈，该&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 数组的长度进栈。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;抛出异常：&amp;nbsp; 如果arrayref的值为null，会抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NullPointerException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;arrayref&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;length&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;arrayref&amp;nbsp;&amp;nbsp; ：&amp;nbsp; 数组引用&lt;/p&gt;
&lt;p&gt;length&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ：&amp;nbsp; 数组长度&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xBF&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;athrow&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;指令格式：&amp;nbsp; athrow&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;功能描述：&amp;nbsp; 将栈顶的数值作为异常或错误抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;抛出异常：&amp;nbsp; 如果栈顶数值为null，则使用&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NullPointerException代替栈顶数&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 值抛出。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果方法是的，则有可能抛出&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IllegalMonitorStateException。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;1&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行前&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;指令执行后&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈底&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;...&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;objectref&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;objectref&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;center&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;2&quot;&gt;
&lt;p align=&quot;center&quot;&gt;栈顶&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;objectref&amp;nbsp; ：&amp;nbsp; Throwable或其子类的实例的引用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;checkcast&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;类型转换检查，如果该检查未通过将会抛出ClassCastException异常&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xc1&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;instanceof&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;检查对象是否是指定的类的实例。如果是，1进栈；否则，0进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;monitorenter&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;获得对象锁&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC3&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;monitorexit&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;释放对象锁&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC4&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;wide&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;用于修改其他指令的行为&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC5&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;multianewarray&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;创建指定类型和维度的多维数组（执行该指令时，栈中必须包含各维度的长度值），并且其引用值进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC6&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ifnull&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;为null时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC7&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;ifnonnull&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;不为null时跳转&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC8&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;goto_w&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;无条件跳转（宽索引）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xC9&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;jsr_w&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;跳转至指定32位offset位置，并且jsr_w下一条指令地址进栈&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xCA&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;breakpoint&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&quot;3&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xFE&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;impdep1&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;0xFF&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;impdep2&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Destructuring in Clojure</title>
   <link href="http://qinjian623.github.com/2013/01/10/destructuring_in_clojure"/>
   <updated>2013-01-10T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/01/10/destructuring_in_clojure</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Reference&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure.org/special_forms#Special Forms--Binding Forms (Destructuring)&quot;&gt;http://clojure.org/special_forms#Special%20Forms&amp;ndash;Binding%20Forms%20%28Destructuring%29&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jayfields.com/2010/07/clojure-destructuring.html&quot;&gt;http://blog.jayfields.com/2010/07/clojure-destructuring.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;What is Destructuring?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;One of Speical Froms in clojure.
Kind of Syntactic sugar?
&lt;/p&gt;&lt;blockquote&gt;

&lt;p&gt;Clojure supports abstract structural binding, often called destructuring, in let binding lists, fn parameter lists, and any macro that expands into a let or fn. The basic idea is that a binding-form can be a data structure literal containing symbols that get bound to the respective parts of the init-expr. The binding is abstract in that a vector literal can bind to anything that is sequential, while a map literal can bind to anything that is associative.
&lt;/p&gt;
&lt;/blockquote&gt;



&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Vector binding.&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;

&lt;p&gt;   Anything supports &lt;b&gt;nth&lt;/b&gt; . &lt;b&gt;&amp;amp;&lt;/b&gt; will bind the remainder of the sequence. &lt;b&gt;:as&lt;/b&gt; will bind the whole sequence.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;(let [[a b c &amp;amp; d :as e] [1 2 3 4 5 6 7]]
  [a b c d e])
-&amp;gt;[1 2 3 (4 5 6 7) [1 2 3 4 5 6 7]]

(let [[[x1 y1][x2 y2]] [[1 2] [3 4]]]
  [x1 y1 x2 y2])
-&amp;gt;[1 2 3 4]

(let [[a b &amp;amp; c :as str] &quot;asdjhhfdas&quot;]
  [a b c str])
-&amp;gt;[\a \s (\d \j \h \h \f \d \a \s) &quot;asdjhhfdas&quot;]
&lt;/pre&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Map binding.&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;

&lt;p&gt;   Bind to &lt;i&gt;Associative&lt;/i&gt; things. map/vector/string/array(only integer keys except the map).
&lt;/p&gt;
&lt;p&gt;   
   &lt;b&gt;:as&lt;/b&gt; works as in vector binding.What's more, &lt;b&gt;:or&lt;/b&gt; followed by another map can be used for default values or not-exist keys in the original map(named init-expr).
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;(let [{a :a, b :b, c :c, :as m :or {a 2 b 3}} {:a 5 :c 6}]
  [a b c m])
-&amp;gt;[5 3 6 {:c 6, :a 5}]
;; a is bound to the value of key ':a' in init-expr.
;; c is bound to the default value
&lt;/pre&gt;


&lt;p&gt;
   &lt;b&gt;:keys&lt;/b&gt; for a simpler situation: symbol's name is the same as the key. &lt;b&gt;:strs&lt;/b&gt; and &lt;b&gt;:syms&lt;/b&gt; for string and symbol keys.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;(let [{fred :fred ethel :ethel lucy :lucy} m] ...
(let [{:keys [fred ethel lucy]} m] ...
&lt;/pre&gt;


&lt;p&gt;
Nested form, no need for special attention.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;(let [{j :j, k :k, i :i, [r s &amp;amp; t :as v] :ivec, :or {i 12 j 13}}
{:j 15 :k 16 :ivec [22 23 24 25]}]
[i j k r s t v])
-&amp;gt; [12 15 16 22 23 (24 25) [22 23 24 25]]
&lt;/pre&gt;





&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; How did this happen?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;



&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>2012总结与2013展望</title>
   <link href="http://qinjian623.github.com/2013/01/08/2012_2013"/>
   <updated>2013-01-08T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/01/08/2012_2013</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;  已经找不到2012的展望了，也不知道当时有没有展望，或许真的没有，即使有了，竟然都找不到了，那也只能说明自己的2012展望就没有被当真过。人人上有个对外公布版本的总结，就暂且将里面比较认真的内容当真吧。
&lt;/p&gt;
&lt;p&gt;
  第一点，少吐槽，其实自然是让自己注意多低头踏实做事，focus。人一吐槽往往就喜欢一吐为快，骂骂咧咧，结果还是自己的心情未必好，反而更差，没法踏实做事，也更谈不上集中精力了。今年来看，确实稍微少点了，不过还是不够，自己难改端起碗吃饭，放下筷子骂娘的屌丝本性&amp;hellip;&amp;hellip;与其如此，不如低头做事，少说废话，免得浪费时间，做点实事要比只知道吐槽要好多了。
&lt;/p&gt;
&lt;p&gt;
  第二点，多看书。今年的书杂七杂八的看了20多本，有些还算是比较厚的，有些则是充数的、扫尾的。仔细来看，要比以前看的多，但是还是有差距。新的一年，书还是要多读，大方向还是之前那样，感觉暂时没必要变化了。不过比重要变化一些，自己专业方向的比重要增加点，也要功利一点，多读些“有用”的书。“有用”这种定义其实还是太虚幻了。还要有个详细的书单，书单上的书，自然是要按时完成的，书单外的书则就随时补充了。
&lt;/p&gt;
&lt;p&gt;
  第三点，看电影。看了估计有50-60部的样子。自然还是看评分比较高的电影，不过有时候无聊的时候饥不择食的kill time，有些垃圾片也看了。算下来，其实还是看的有点多了，新年里面，这个数字还是要控制到一周一部以内吧。算下来，应该是40部以内吧，当然，希望自己能够少而精，看完写写观后感什么的，别看完就看完了，一点踪迹都没有。电影单实在是没法列，这种主观的东西，很难说，优先看下豆瓣上想看的电影就可以了。
&lt;/p&gt;
&lt;p&gt;
  第四点，多做有意义的事情。当时自然是警醒自己，不要浪费时间在无聊的事情上的，世界其实真的很美好的，少吐槽多做有意义的事情。去年差不多学会了游泳，今年继续努力，将来这个或许就是运动的主要方面之一了，因为自己的膝盖每次踢球完都会感觉不舒服，其他方面的锻炼自然还是要加强。修身养性，体育、音乐、美术。元旦假期结束回京路上正好看了两部电影 &lt;i&gt;放牛班的春天&lt;/i&gt; 和 &lt;i&gt;地球上的星星&lt;/i&gt; 两部电影,竟然主题类似，真是巧合。一部音乐与教育，一部美术与教育，不过其实都是关于“自我”与教育。弄的自己越来越想回家开学校去了，自己实在是讨厌那种抹杀自我的应试教育了，哪怕应试教育也应该有人性，自己就深受其害，光吐槽没用，何况自己吐槽已经太多了，我也从来没有屈服于应试教育过，那么多年的挣扎与反抗&amp;hellip;&amp;hellip;如果有时间，自己还是要没事画画东西的，自己越来越对良好的设计有好感了，自然自己也希望自己有更好的美感，做码农的副作用太多了&amp;hellip;&amp;hellip;以后天知道还有什么副作用。
&lt;/p&gt;
&lt;p&gt;
  第五点，认真的生活。我真不知道自己是不是认真过。我从来不是个认真的人，以至于自己一路走来真的是屌丝的典范，干什么都吊儿郎当的，没有什么真的投入。或许是自己自我保护的因素过重了，不想表现的对什么事情认真。因为自己知道，太认真了，就没法面对失败的结果了，其实我还是有一颗脆弱的小心肝的，即使自己不承认这点。这也只能慢慢来了，我想我还是在慢慢变得认真的&amp;hellip;&amp;hellip;踏踏实实、有始有终，要有得失感，少点自我保护。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 教训&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;  1.找工作没有太好的结果，自己投简历偷懒不做，很多公司时间都错过了，而且是自己眼睁睁的看着时间截止也不去做，不知道为什么，自己因此也读了很多心理方面的书，不过也还是没头绪，或许是信息过载、自己内心抵触、迷茫等等多方面因素共同造成的结果，历史上很多战略性的失误也可以归结到这些点上，更何况我这样的一个普通人呢？这明显是自己的一个性格缺陷，如何解决好这样的一个缺陷，对于自己有很大的作用。也要重新找到自己生活的动力。当然，自己目前还是在自己有限的范围内选择了让自己做一些自己喜欢的内容的工作，环境也还不错，或许是老天总是对我不错吧，这句话或许太arrogant了，这个世界都是平等的,不过可以理解为自我的乐观主义.
&lt;/p&gt;
&lt;p&gt;
  2.还有自己做事的方式稍微有点自我，元旦假期回家被老同学提醒了下，批评的还是很对的，自己自然也要注意，自己性格太固执、太要强、太个人英雄主义，而最大的问题是我不是英雄。如何经营？自己要好好学习学习。一定要知行合一，顺应天命。
&lt;/p&gt;
&lt;p&gt;
  3.自我管理还是要加强，很多计划还是没有能够执行掉，很多习惯也没有成功养成，都是养一半就结束了。误操作竟然把之前写的内容给删掉了，扫兴了。简练吧，目标要量化、明确+要有监督+要有评价体系。
&lt;/p&gt;
&lt;p&gt;
  4.自己相对一年前有进步否？专业上还是有进步的，工作上的内容让自己还是深入了解了新知识。但是还是不够，新年还要更多的学习。所以还是要多学习、多代码。自己在代码量上不仅仅要定目标，而且要注意检查是否达到了标准。回头看看2012年，代码量有一部分，但是和原来的计划相比，还是有一点差距的。今后工作上的内容也要有量化的数据，方便统计和总结。其他方面自然也有一些进步，不过还是不满意，这些进步很多都是被动的进步，随着经历自然而来的，但是其他一些主动的进步还是缺少，这又牵扯到下面的一点，自己不太主动，性格、经历各方面造成的结果。
&lt;/p&gt;
&lt;p&gt;
  5.自己缺少自己的目标，不知道自己想要什么。这个问题要好好考虑，要让自己知道自己想要什么，然后去努力。没有目标，自己太容易迷失了。不过自己其实缺少的更是中长期的东西，自己总是没有很好的准备，结果机会来到的时候往往就随风而逝了。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 展望&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;基本原则:
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;依然要保持不让自己停留在舒适区的原则,保持学习.虽然这个事情真的让人很难受,但是,男人就应该对自己狠一点,不是么&amp;hellip;.
&lt;/li&gt;
&lt;li&gt;有所专注.自己最喜欢的一个单词就是focus了.感觉这几个字符的组合很有美感[当然也可能拜我自己用的字体所赐,其实就是默认的系统字体,可见通过电脑字体往往也能分析出人的不同]可惜自己缺少的也是这个单词所代表的东西.自己一直以来都是像苍蝇一样,打着兴趣引导学习的大旗,其实最后结果都是浅尝辄止.当然,多点兴趣也没错&amp;hellip;.但是我们在这里不谈辩证法,现在我缺的就是这个有美感的单词.所以这个要参考100000小时的理论.
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
以上两点就是,选择一个有限的范围,集中精力保持学习.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保持自我,但是要有所平衡.过于考虑自我还是不行的,有人指出,我当然也要改正.只是自己还不知道如何平衡,所以要慢慢探索.
&lt;/li&gt;
&lt;li&gt;长远计划,自己当然知道长远计划的不靠谱,但是有一个,起码让自己不用原地转圈圈.自己还是从小过的太舒适,没遇到过什么难处,自然自己没有太强烈的渴望要拥有什么.现在的问题是,显然,自己还是需要有点所谓的aggressive的.要积极主动,而不是从小以来的消极被动.自己这两年在这方面有关注,也有一定的进步,不过,还是太少了,不成比例.今年希望能向成比例靠近.
&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 计划&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;还是清单比较好，想到什么都加入就可以了，自然每个都要有个可以量化的目标。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-4-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.1&lt;/span&gt; 时间控制&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;

&lt;ol&gt;
&lt;li&gt;各种SNS的时间花费,不过目前来看,自己一直以来都有意识在减少SNS的时间,反而已经不是主要部分了,自己主要使用的是QQ/renren/weibo,qq已经在本科阶段完成戒除了,人人研究生阶段又刷的比较多,不过目前也降很大比例了,weibo目前还在65天戒除中,估摸着戒完了也会受控很多了.
&lt;/li&gt;
&lt;li&gt;电影时间还是比较占地方的.新年里的目标就是控制电影量,年前的清点已经发现看的还是比较多的,需要控制下,应该在一周一部以内了,然后再加上我的保留节目big bang.
&lt;/li&gt;
&lt;li&gt;路上时间,自己路上时间不多.上下班骑车的时候安全第一,也没法有太并行的东西.
&lt;/li&gt;
&lt;li&gt;时间黑洞,这个确实比较严重,上面这么一数,显然自己时间还是很富余的,大部分都耗在这里了,首要的任务就做log看下时间黑洞主要在哪里.
&lt;/li&gt;
&lt;li&gt;高质量的实时信息阅读,主要问题不是在垃圾信息阅读上,自己平时读的基本质量都不错,主要还是自己能否保证阅读范围的集中,放弃一部分的内容阅读.
&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.2&lt;/span&gt; 财务&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-2&quot;&gt;

&lt;p&gt;   这个还是开源节流.
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;考虑到期后是不是需要搬个地方,说不定可以降一点租金.
&lt;/li&gt;
&lt;li&gt;是不是要记账加预算制,否则自己还是花的比较糊涂,先找个记账软件,以前用的随手记,不知道还能不能用了.
&lt;/li&gt;
&lt;li&gt;开源上,没什么想法.先节流比较迫切点.
&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.3&lt;/span&gt; 锻炼&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-3&quot;&gt;

&lt;p&gt;   等冬歇期过了，公司里面估计又可以开始踢球了，不过每周就一次，和之前学校的每天一次还是有量级的差距的，总比没有要好。还有就是体重保持，今年要认真处理，否则工作一段时间后一定没法控制了，血淋淋的教训都是在眼前的。
   有氧的训练,自然还是靠足球和游泳.新年里,要考虑是不是要去gym.如果去的话,就需要每周2+次了,但是时间上不知道能不能满足,周末的一次或许可以,但是工作日如何处理?需要找一个离家近的,但是似乎价格都不便宜,而且没法让自己能游泳.或者在家练习,但是怎么监督呢?
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.4&lt;/span&gt; 早起&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-4&quot;&gt;

&lt;p&gt;   年前还有段时间是早起的,但是越到后来越有问题.希望能够每天的睡眠控制在7小时,然后加上午休半小时.最好的办法还是定死时间,我需要考虑的是,是否需要在住的地方断网,在开始的2个月,自己有意识推后了办网,显然的结果是收益肯定大于支出,和办网后比较还是很明显的.睡觉时间还在23/24点之间犹豫,意味着早上的时间就是6/7之间犹豫.目前的情况是24-8的八小时睡眠.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.5&lt;/span&gt; 游泳&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-5&quot;&gt;

&lt;p&gt;   末日前将就学会了，新年里要继续加强，动作标准、速度、耐力，各个方面都要更好的进步，水性还是要加强，最好能够到达负重泅渡的水平。然后还需要多学习几个花样.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.6&lt;/span&gt; 学习做饭和保证饮食健康&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-6&quot;&gt;

&lt;p&gt;   周末或者半月的周末试试看吧。同时减少不健康饮食的摄入,主要集中的问题是:
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;中午工作餐中可能存在的高油盐的饮食.这个年前就已经开始改善了,目标是降低到50%以下.新年要保持在这个比率以下.
&lt;/li&gt;
&lt;li&gt;制品食物的高钠问题,还有添加剂和反式脂肪的问题.这里只能通过减少制品食物来处理,年前为此买了蒸蛋器,蒸馒头来处理,改吃燕麦等等代替.新年要利用学习做饭,减少自己这方面的摄入.
&lt;/li&gt;
&lt;li&gt;饮食不平衡的问题.自己维生素和膳食纤维的摄入比例较低,因为自己不爱吃水果,而且不做饭,更加剧这个问题.新年,要保证每天的水果的摄入量.
&lt;/li&gt;
&lt;li&gt;米饭摄入过多的问题.防止体重增加和糖尿病,年前已经开始有意识控制.新年要保持糖摄入量,防止体重增加.米饭其实是根本没必要多吃的东西,基本都是糖.
&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.7&lt;/span&gt; 代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-7&quot;&gt;

&lt;p&gt;   还是希望能够做到日均50的产量吧。当然，光看代码行没有意义，代码还要写的有美感、设计良好、有重构。自己还应该有自己的Weekend toys.没错，是复数的，规模可以小一点,完成一些小功能的工具类。最好里面能有一个lisp的某个方言的东东，现在看着clojure就挺顺眼的，不过自己还没有能够良好运用。还有,要有一定的阅读量,多读才能多写,免得写出来的都是垃圾.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.8&lt;/span&gt; 阅读、电影&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-8&quot;&gt;

&lt;p&gt;   等下都要列个今年的主要清单。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-4-8-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-8-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.8.1&lt;/span&gt; 书单&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-8-1&quot;&gt;

&lt;p&gt;    越来越发现这个书单里面大块头太多了,所以要冷静点.怎么保证进度?
&lt;/p&gt;&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-1&quot;&gt;经济学原理 微观&lt;br/&gt;
     当时看宏观薄一点,结果看完宏观就没动过微观了.其实微观实用意义更大点.宏观的东西都是吵来吵去没结论的.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-2&quot;&gt;代码大全&lt;br/&gt;
     电子版的,应该可以根据目录跳着翻翻.这个可以很随意.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-3&quot;&gt;GEB&lt;br/&gt;
     这个真是大部头&amp;hellip;.慢慢看吧。算睡前阅读的项目，就放床头看吧，也不用追求完全看完了。
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-4&quot;&gt;SICP&lt;br/&gt;
     已经看了一部分了，所以要继续，主要还是需要完成后面的练习。完成练习的速度如蜗牛.何况每章都差不多有100题.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-5&quot;&gt;On Lisp&lt;br/&gt;
     元旦假期前一天下了电子版，这个看完要写笔记的。自己已经看了前4章，不过没有笔记的，跳跃的也很快。自然还是要看第二遍的。
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-6&quot;&gt;ACM 图灵奖&lt;br/&gt;
     等买了就开始看吧，一直说要看没有看的。
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-7&quot;&gt;图灵传记和图灵的秘密两本&lt;br/&gt;
     同上
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-8&quot;&gt;AI: a modern approach&lt;br/&gt;
     没有翻译版的，只有看影印版了，上帝保佑我能看了这个大块头吧。
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-9&quot;&gt;精益创业&lt;br/&gt;
     听说很有意思的东西，看看有没有电子版的来看，纸质版似乎没必要。亚马逊也没有kindle版的&amp;hellip;&amp;hellip;否则就直接买了&amp;hellip;还是直接买了纸质的.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-10&quot;&gt;SVM导论&lt;br/&gt;
     这个算是继续看，又放那有个把月没进度了。主要是里面的公式一堆堆的让人想死。
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-11&quot;&gt;算法导论 重读, 忘记很多东西了.&lt;br/&gt;
     重新看一遍，可以快速浏览。免得一些基本内容都忘记了。最好自己能够再实现一部分内容.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-12&quot;&gt;编程珠玑 重读&lt;br/&gt;
     不知道为什么,就是突然想重读了.这本书还是每看都有收获的.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-13&quot;&gt;程序员的自我修养与加载器与链接器 重读&lt;br/&gt;
     感觉想重读一遍,可能lal不用了,自我修养还是要看一看.可以不用全看.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-14&quot;&gt;信息论基础&lt;br/&gt;
     这个也是铁定的读不快的书了.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-15&quot;&gt;几本书的收尾&lt;br/&gt;
     跨年的几本书,该看完都把它看完了.留着尾巴好难受.
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-4-8-1-16&quot;&gt;harry potter系列&lt;br/&gt;
     从小到大,影响深远,还记得第一次看魔法石的时候,Hogwarts建筑出现的那一刻,让自己就像也进入了那个世界.阿凡达的感觉都没有那么明显.这系列太多,复习完魔法石先吧.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-8-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-4-8-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;4.8.2&lt;/span&gt; 电影&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-4-8-2&quot;&gt;

&lt;p&gt;    不列清单了，还不知道今年会出哪些片子呢。霍比特人 应该要看的吧.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.9&lt;/span&gt; 语言学习&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-9&quot;&gt;

&lt;p&gt;   还是按照之前的定的目标继续努力，另外顺带翻译些自己感兴趣的东西，也算是为知识传播做贡献了。之前的目标还是比较清楚的，不过不知道能不能实现了。当然,主观来说,&quot;一定能实现&quot;,&quot;人有多大胆,地有多大产&quot;.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-10&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.10&lt;/span&gt; 课外的学习&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-10&quot;&gt;

&lt;p&gt;   自己倒是研究生的时候就想学学电钢琴玩了，还专门查过价格准备买。不过今年不知道能不能实现了(其实很有可能今年要继续压后了),这个算是非首要目标了。为了加强自己的设计感，自己应该有意识的看一些有关设计的东西、文档，自己也慢慢练习练习，以周为单位吧~这个算是基本目标了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4-11&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-11&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.11&lt;/span&gt; 工作&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-11&quot;&gt;

&lt;p&gt;   这个要私下单独写一下了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 结论&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;

&lt;p&gt;  新年计划简直野心太大了,当然,人人都这样.自己也从来没有指望自己的计划能够100%完成,哪怕50%完成也很难.这个问题,唯有交给历史了,年末总结的时候自然知道今年如何了.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;5.1&lt;/span&gt; 下一步&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-1&quot;&gt;

&lt;p&gt;   这才是真正应该关心的,下一步紧接着干什么?要有可执行性.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-5-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.1&lt;/span&gt; 买书.&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-5-1-1&quot;&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-5-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.2&lt;/span&gt; 电脑放公司或者回家不开电脑.&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-5-1-2&quot;&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-5-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.3&lt;/span&gt; 下载app&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-5-1-3&quot;&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-5-1-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.4&lt;/span&gt; 赶紧翻译完自己的pi的ok系列&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-5-1-4&quot;&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-5-1-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.5&lt;/span&gt; 考虑监督\评价\审计方法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-5-1-5&quot;&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-5-1-6&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.6&lt;/span&gt; weekend toys开始&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-5-1-6&quot;&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5-1-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-5-1-7&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;5.1.7&lt;/span&gt; 工作计划&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-5-1-7&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Clojure Persistent Vector</title>
   <link href="http://qinjian623.github.com/2013/01/05/clojure_persistent_vector"/>
   <updated>2013-01-05T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2013/01/05/clojure_persistent_vector</id>
   <content type="html">&lt;p&gt;
有关Clojure中的PersistentVector的记录,主要的参考来源是
&lt;a href=&quot;http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/&quot;&gt;http://blog.higher-order.net/2009/02/01/understanding-clojures-persistentvector-implementation/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
自己感冒头晕,昨晚看American Horror Story又没有休息好. 于是就脑抽点了clojure的源码实现看,wc -l排序完,就想着先看个802行的吧.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;$ wc -l * | sort -n
     13 Sequential.java
     14 IRecord.java
     14 IType.java
     15 IPending.java
     16 Fn.java
     16 IndexedSeq.java
     16 IPersistentList.java
     17 IBlockingDeref.java
     17 IDeref.java
     17 IEditableCollection.java
     17 IHashEq.java
     17 IKeywordLookup.java
     17 IMeta.java
     17 MapEquivalence.java
     17 Reversible.java
     17 Seqable.java
     18 Counted.java
     18 IObj.java
     18 IReference.java
     18 ITransientAssociative.java
     18 Settable.java
     19 Associative.java
     19 ILookup.java
     19 ILookupSite.java
     19 ILookupThunk.java
     19 IMapEntry.java
     19 Indexed.java
     19 IPersistentSet.java
     19 IPersistentStack.java
     19 IReduce.java
     19 ITransientSet.java
     19 Named.java
     20 IChunk.java
     20 IExceptionInfo.java
     20 IPersistentVector.java
     20 ITransientCollection.java
     20 ITransientVector.java
     21 IProxy.java
     22 Box.java
     22 ITransientMap.java
     22 Repl.java
     22 Script.java
     23 IChunkedSeq.java
     23 IPersistentCollection.java
     23 IPersistentMap.java
     23 Reduced.java
     25 Sorted.java
     26 Binding.java
     27 IRef.java
     29 ISeq.java
     32 ArityException.java
     33 SeqEnumeration.java
     34 LazilyPersistentVector.java
     35 Obj.java
     37 ChunkBuffer.java
     40 AReference.java
     40 MapEntry.java
     41 SeqIterator.java
     42 Delay.java
     42 ExceptionInfo.java
     54 ATransientSet.java
     54 StringSeq.java
     55 Cons.java
     57 KeywordLookupSite.java
     64 Range.java
     66 AFunction.java
     67 ChunkedCons.java
     69 ArrayChunk.java
     72 ProxyHandler.java
     75 FnLoaderThunk.java
     75 IteratorSeq.java
     76 DynamicClassLoader.java
     78 EnumerationSeq.java
     78 Ratio.java
     86 ATransientMap.java
     88 MethodImplCache.java
     89 XMLHandler.java
     90 PersistentTreeSet.java
     95 LineNumberingPushbackReader.java
     98 Compile.java
    104 Atom.java
    107 ARef.java
    128 PersistentHashSet.java
    133 Symbol.java
    134 Intrinsics.java
    149 AMapEntry.java
    158 APersistentSet.java
    174 BigInt.java
    197 TransactionalHashMap.java
    197 Util.java
    233 PersistentStructMap.java
    243 Namespace.java
    249 Keyword.java
    256 ASeq.java
    256 LazySeq.java
    287 Agent.java
    294 PersistentQueue.java
    311 PersistentList.java
    379 Ref.java
    395 APersistentMap.java
    436 PersistentArrayMap.java
    439 AFn.java
    449 IFn.java
    513 Reflector.java
    554 Var.java
    569 APersistentVector.java
    584 MultiFn.java
    645 LockingTransaction.java
    661 ArraySeq.java
    802 PersistentVector.java
   1029 PersistentTreeMap.java
   1180 PersistentHashMap.java
   1275 LispReader.java
   2234 RT.java
   4014 Numbers.java
   4104 RestFn.java
   8420 Compiler.java
  35118 总用量
&lt;/pre&gt;



&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;查找&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;在文件里面梦游,看到个眼熟的 &lt;b&gt;nth&lt;/b&gt; 于是就仔细看看,位操作是每个人的噩梦,但是还有前面的arrayFor没看,然后发现噩梦都是一个连一个的.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;
public Object[] arrayFor(int i){
    if(i &amp;gt;= 0 &amp;amp;&amp;amp; i &amp;lt; cnt)
        {
            if(i &amp;gt;= tailoff())
                return tail;
            Node node = root;
            for(int level = shift; level &amp;gt; 0; level -= 5)
                node = (Node) node.array[(i &amp;gt;&amp;gt;&amp;gt; level) &amp;amp; 0x01f];
            return node.array;
        }
    throw new IndexOutOfBoundsException();
}

public Object nth(int i){
    Object[] node = arrayFor(i);
    return node[i &amp;amp; 0x01f];
}
&lt;/pre&gt;

&lt;p&gt;
自然不清楚为什么要取后五位.于是Google,找到了参考.因为数据结构可以理解为32叉树,所以后五位自然是找到最底层后的32个叶子节点后,根据后5位确定叶子.同理,上面的每次level为5,自然也是根据深度一步步往下找,shift大小自然就是树的深度相关,参考说是具体是5*(h+1),说是就是吧.Node的数据实际就是一个长度为32的array了.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;static class Node implements Serializable {
    transient final AtomicReference&amp;lt;Thread&amp;gt; edit;
    final Object[] array;

    Node(AtomicReference&amp;lt;Thread&amp;gt; edit, Object[] array){
        this.edit = edit;
        this.array = array;
    }

    Node(AtomicReference&amp;lt;Thread&amp;gt; edit){
        this.edit = edit;
        this.array = new Object[32];
    }
}
&lt;/pre&gt;

&lt;p&gt;
然后突然发现还有 &lt;b&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/b&gt; 和 &lt;b&gt;&amp;gt;&amp;gt;&lt;/b&gt; 两种,前面的是unsigned后面的是signed,说明地址:
&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html&quot;&gt;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html&lt;/a&gt;
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;final private int tailoff(){
    if(cnt &amp;lt; 32)
        return 0;
    return ((cnt-1) &amp;gt;&amp;gt;&amp;gt; 5) &amp;lt;&amp;lt; 5;
}
&lt;/pre&gt;

&lt;p&gt;
这里相当于检查的是length/32的int值再*32&amp;hellip;&amp;hellip;其实就是数据里面还有个tail,没凑够32个就先存这里.查找增加什么操作的,都需要考虑这个tail.
&lt;/p&gt;
&lt;p&gt;
后面的assocN理解就自然了.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;cons&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;public PersistentVector cons(Object val){
      int i = cnt;
      //room in tail?
      //      if(tail.length &amp;lt; 32)
      //这里还是tail的特殊处理,tail的长度没有32,就先放tail里面.这里好理解.
      if(cnt - tailoff() &amp;lt; 32)
          {
              Object[] newTail = new Object[tail.length + 1];
              System.arraycopy(tail, 0, newTail, 0, tail.length);
              newTail[tail.length] = val;
              return new PersistentVector(meta(), cnt + 1, shift, root, newTail);
          }
      //full tail, push into tree 如前所述,满了32.
      Node newroot;
      Node tailnode = new Node(root.edit,tail);
      int newshift = shift;
      //overflow root?下面的一坨操作,要先看看pushTail和newPath
      //树全满的情况下,重新升高一层树,新的tailnode要放在另外新建的深度如旧树的一棵树上
      if((cnt &amp;gt;&amp;gt;&amp;gt; 5) &amp;gt; (1 &amp;lt;&amp;lt; shift))
          {
              newroot = new Node(root.edit);
              newroot.array[0] = root;
              newroot.array[1] = newPath(root.edit,shift, tailnode);
              newshift += 5;
          }
      //树没有全满,那么就往下找,有空就插入,没空就建新的枝.
      else
          newroot = pushTail(shift, root, tailnode);
      //所有的增加都会直接保证加入位置的深度一致.因为只有叶子才存数据.
      return new PersistentVector(meta(), cnt + 1, newshift, newroot, new Object[]{val});
  }

  private Node pushTail(int level, Node parent, Node tailnode){
      //if parent is leaf, insert node,
      // else does it map to an existing child? -&amp;gt; nodeToInsert = pushNode one more level
      // else alloc new path
      //return  nodeToInsert placed in copy of parent
      //
      int subidx = ((cnt - 1) &amp;gt;&amp;gt;&amp;gt; level) &amp;amp; 0x01f;
      Node ret = new Node(parent.edit, parent.array.clone());
      Node nodeToInsert;
      //parent is leaf的情况
      if(level == 5)
          {
              nodeToInsert = tailnode;
          }
      else
          {
              Node child = (Node) parent.array[subidx];
              //第二个判断情况,子树是null就新建一个单分支的子树到底层.不是的话就一直找到底层,然后加入.
              nodeToInsert = (child != null)?
                  pushTail(level-5,child, tailnode)
                  :newPath(root.edit,level-5, tailnode);
          }
      ret.array[subidx] = nodeToInsert;
      return ret;
  }

  //一路新建单分支的子树
  private static Node newPath(AtomicReference&amp;lt;Thread&amp;gt; edit,int level, Node node){
      if(level == 0)
          return node;
      Node ret = new Node(edit);
      ret.array[0] = newPath(edit, level - 5, node);
      return ret;
  }
&lt;/pre&gt;


&lt;p&gt;
   完成添加后,数据是没有拷贝的,只是在原来树的后面添加了元素,然后成为一个新的树.性能上自然没有太大差别.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;pop&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;




&lt;pre class=&quot;example&quot;&gt;public PersistentVector pop(){
    if(cnt == 0)
        throw new IllegalStateException(&quot;Can't pop empty vector&quot;);
    if(cnt == 1)
        return EMPTY.withMeta(meta());
    //if(tail.length &amp;gt; 1)
    //以直接在tail里面pop的,很容易.
    if(cnt-tailoff() &amp;gt; 1)
        {
            Object[] newTail = new Object[tail.length - 1];
            System.arraycopy(tail, 0, newTail, 0, newTail.length);
            return new PersistentVector(meta(), cnt - 1, shift, root, newTail);
        }
    //不能的情况下,就从树里pop出来一个,当然,同时就需要把剩下的31个不完整的抽出来当做newtail.
    //为什么要以cnt-2开始,因为前面的判断是tail.length &amp;gt; 1,tail里面有可能还有一个孤零零的元素.
    Object[] newtail = arrayFor(cnt - 2);

    //以下的代码就是从树中删除newtail的过程了.

    //新树的root也有可能需要做变更.
    Node newroot = popTail(shift, root);
    int newshift = shift;
    //这里如果一路都是单枝,结果是一路都删除路径到root,应该其实就是长度为32/33的情况.
    if(newroot == null)
        {
            newroot = EMPTY_NODE;
        }
    //层次大于1,但是root的第二子树已经是空的话,就需要降低层次了.
    if(shift &amp;gt; 5 &amp;amp;&amp;amp; newroot.array[1] == null)
        {
            newroot = (Node) newroot.array[0];
            newshift -= 5;
        }
    return new PersistentVector(meta(), cnt - 1, newshift, newroot, newtail);
}

//
private Node popTail(int level, Node node){
    //倒数第二个位置的元素在最底层的index
    int subidx = ((cnt-2) &amp;gt;&amp;gt;&amp;gt; level) &amp;amp; 0x01f;
    //一直往底层走
    if(level &amp;gt; 5)
        {
            //去下层, level-5, 以subidx所在的array开始.
            Node newchild = popTail(level - 5, (Node) node.array[subidx]);
            //上层依然是单枝,需要继续删除路径的情况
            if(newchild == null &amp;amp;&amp;amp; subidx == 0)
                return null;
            else
                {
                    Node ret = new Node(root.edit, node.array.clone());
                    ret.array[subidx] = newchild;
                    return ret;
                }
        }
    //到达底层,位置却是0,这里到达的不是包含叶子的底层,而是最后一个树枝层.
    //到达底树枝层,正好是一个单枝,因为下一步叶子层的index是0,如果要提出来当tail,这个单枝就需要删除了.而且要一路删除到上层不再是单枝路径为止.
    else if(subidx == 0)
        return null;
    //到达底树枝层
    else
        {
            Node ret = new Node(root.edit, node.array.clone());
            //显然,直接将要pop出来的tail删掉了.
            ret.array[subidx] = null;
            return ret;
        }
}
&lt;/pre&gt;

&lt;p&gt;
   这里pop影响的范围都会重新clone.都是新的,原来的数据则还是保持.基本可以简单的认为是写时复制了.
&lt;/p&gt;
&lt;p&gt;
   还有个APersistentVector的抽象类,不管了.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>2012的电影和书盘点</title>
   <link href="http://qinjian623.github.com/2012/12/23/movies_books_in_2012"/>
   <updated>2012-12-23T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/23/movies_books_in_2012</id>
   <content type="html">&lt;p&gt;
年纪不小了，总结也要开始严肃起来了。要细致、要严谨、要成为共产主义战士。
&lt;/p&gt;
&lt;p&gt;
算算自己今年的书和电影吧,从自己的豆瓣上的记录拿来的。
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;书&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1&quot;&gt;&lt;i&gt;鲁滨逊漂流记&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1&quot;&gt;

&lt;p&gt;    从小就想看，一直都没看的。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2&quot;&gt;&lt;i&gt;史蒂夫·乔布斯传&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2&quot;&gt;

&lt;p&gt;    我不是果粉，但是乔布斯真是成就惊人。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3&quot;&gt;&lt;i&gt;胡适口述自传&lt;/i&gt; 50%&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3&quot;&gt;

&lt;p&gt;    自己看着感兴趣的章节。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4&quot;&gt;&lt;i&gt;Linux/Unix设计思想&lt;/i&gt; 快速通览&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4&quot;&gt;

&lt;p&gt;    和 &lt;i&gt;Unix编程艺术&lt;/i&gt; 基本一样，看过的就没必要看这本了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5&quot;&gt;&lt;i&gt;通往奴役之路&lt;/i&gt; 复习&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5&quot;&gt;

&lt;p&gt;    部分章节
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6&quot;&gt;&lt;i&gt;谁会认错&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6&quot;&gt;

&lt;p&gt;    什么时候我能完全做到知错、认错、改错？
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7&quot;&gt;&lt;i&gt;乌合之众&lt;/i&gt; 收尾&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7&quot;&gt;

&lt;p&gt;    扔那好长时间还差一章节，就收尾了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8&quot;&gt;&lt;i&gt;链接器和加载器&lt;/i&gt; 复习&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8&quot;&gt;

&lt;p&gt;    感觉还要再看一遍 &lt;i&gt;程序员的自我修养&lt;/i&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-9&quot;&gt;&lt;i&gt;集体智慧编程&lt;/i&gt; 25%&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-9&quot;&gt;

&lt;p&gt;    图书馆借的，网上似乎都没得卖了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-10&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10&quot;&gt;&lt;i&gt;编码&lt;/i&gt; 90%&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10&quot;&gt;

&lt;p&gt;    还剩一章收尾。从初中物理的电路构造出计算机。数字电路、汇编、计算机组成等等。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-11&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-11&quot;&gt;&lt;i&gt;重构&lt;/i&gt; 快速通览&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-11&quot;&gt;

&lt;p&gt;    零零散散的最佳实践，还是要靠从实践中领悟和学习。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-12&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-12&quot;&gt;&lt;i&gt;自控力&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-12&quot;&gt;

&lt;p&gt;    意志力十分重要。有了意志力才能少费纸，多为四化做贡献。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-13&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-13&quot;&gt;&lt;i&gt;上帝掷骰子吗&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-13&quot;&gt;

&lt;p&gt;    物理史话，科普读物。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-14&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-14&quot;&gt;&lt;i&gt;论中国&lt;/i&gt; 90%&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-14&quot;&gt;

&lt;p&gt;    由于国庆假期在家看的，时间有限，还剩几十页没看。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-15&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-15&quot;&gt;&lt;i&gt;动物庄园&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-15&quot;&gt;

&lt;p&gt;    自从看完 &lt;i&gt;1984&lt;/i&gt; 之后就天天想看看这本小说了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-16&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-16&quot;&gt;&lt;i&gt;论人类不平等的起源&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-16&quot;&gt;

&lt;p&gt;    如果不是翻译的问题，那就一定是我智商的问题。浑浑噩噩看完的。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-17&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-17&quot;&gt;&lt;i&gt;失败的逻辑&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-17&quot;&gt;

&lt;p&gt;    复杂系统、控制、混沌等等。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-18&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-18&quot;&gt;&lt;i&gt;影响力&lt;/i&gt; 75%？&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-18&quot;&gt;

&lt;p&gt;    忘了自己看到哪里了，断断续续看的。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-19&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-19&quot;&gt;&lt;i&gt;浪潮之巅&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-19&quot;&gt;

&lt;p&gt;    技术不是万能，没有技术万万不能。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-20&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-20&quot;&gt;&lt;i&gt;数学之美&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-20&quot;&gt;

&lt;p&gt;    入门的科普读物。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-21&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-21&quot;&gt;&lt;i&gt;信息检索导论&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-21&quot;&gt;

&lt;p&gt;    IR的入门，教科书。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-22&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-22&quot;&gt;&lt;i&gt;金融的逻辑&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-22&quot;&gt;

&lt;p&gt;    电子版的，有意思的书。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-23&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-23&quot;&gt;&lt;i&gt;谣言粉碎机&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-23&quot;&gt;

&lt;p&gt;    快速通览的。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-24&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-24&quot;&gt;&lt;i&gt;华尔街的扑克牌&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-24&quot;&gt;

&lt;p&gt;    同 &lt;i&gt;论人类不平等的起源&lt;/i&gt; &amp;hellip;.两者都在火车看的&amp;hellip;果然。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-25&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-25&quot;&gt;&lt;i&gt;旅行，人生最有价值的投资&lt;/i&gt; 完成&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-25&quot;&gt;

&lt;p&gt;    睡前读物。磨磨唧唧看了一段时间才完成。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-26&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-26&quot;&gt;&lt;i&gt;实用Common Lisp编程&lt;/i&gt; 50%？&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-26&quot;&gt;

&lt;p&gt;    看了SICP的一部分又重新看了这本，感觉要正常多了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-27&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-27&quot;&gt;&lt;i&gt;计算机程序的构造和解释&lt;/i&gt; 30%?&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-27&quot;&gt;

&lt;p&gt;    对于习惯指令式语言的人类来说&amp;hellip;异次元世界的东西真的很brainfuck。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-28&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-28&quot;&gt;还有2-3本书名不方便列出的电子版书&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-28&quot;&gt;

&lt;p&gt;    当然，都是符合社会主义价值观的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;电影&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1&quot;&gt;&lt;i&gt;蝙蝠侠：黑暗骑士崛起&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1&quot;&gt;

&lt;p&gt;    高富帅做好事不留名，雷锋精神永流传。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2&quot;&gt;&lt;i&gt;只有你&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2&quot;&gt;

&lt;p&gt;    女主好漂亮思密达，故事好多泪思密达。可惜我不多泪思密达。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3&quot;&gt;&lt;i&gt;初恋这件小事&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3&quot;&gt;

&lt;p&gt;    女ds逆袭。女ds逆袭故事的大家都喜欢，男ds逆袭的就&amp;hellip;.谁说这个世界已经男女平等了？我要求真正的消除性别歧视。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-4&quot;&gt;&lt;i&gt;壮志凌云&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-4&quot;&gt;

&lt;p&gt;    终于看了，多少年魂牵梦绕。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-5&quot;&gt;&lt;i&gt;V字仇杀队&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-5&quot;&gt;

&lt;p&gt;    拜CCAV6所赐，瞬间网上遍地都是，总菊等着自爆吧。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-6&quot;&gt;&lt;i&gt;人再jiong途之泰jiong&lt;/i&gt; 影院&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-6&quot;&gt;

&lt;p&gt;    搞笑，真的搞笑。同时，也就搞笑了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-7&quot;&gt;&lt;i&gt;巴顿将军&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-7&quot;&gt;

&lt;p&gt;    从小时候开始电影刚开始的星条旗下的演讲那幕就深入我心。全篇的镜头运用都是王。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-8&quot;&gt;&lt;i&gt;少年派的奇幻漂流&lt;/i&gt; 影院&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-8&quot;&gt;

&lt;p&gt;    剧情、配乐、特效、画面没有落下的。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-9&quot;&gt;&lt;i&gt;诱惑法则&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-9&quot;&gt;

&lt;p&gt;    混乱的青春&amp;hellip;我怎么就没赶上那个好时代。哦，忘了，我选了hard模式。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-10&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-10&quot;&gt;&lt;i&gt;危情三日&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-10&quot;&gt;

&lt;p&gt;    真男人，真汉子。爱人不疑，疑人不爱。纽扣恒久远，一颗永流传。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-11&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-11&quot;&gt;&lt;i&gt;谍影重重&lt;/i&gt; 1-4&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-11&quot;&gt;

&lt;p&gt;    为了看4，该复习的复习，该补课的补课。man死了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-12&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-12&quot;&gt;&lt;i&gt;里约大冒险&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-12&quot;&gt;

&lt;p&gt;    忘了是不是今年的了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-13&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-13&quot;&gt;&lt;i&gt;搏击俱乐部&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-13&quot;&gt;

&lt;p&gt;    同上。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-14&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-14&quot;&gt;&lt;i&gt;Ice Age 4&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-14&quot;&gt;

&lt;p&gt;    保留曲目。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-15&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-15&quot;&gt;&lt;i&gt;美丽人生&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-15&quot;&gt;

&lt;p&gt;    好爸爸，就要让孩子生活在童话中。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-16&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-16&quot;&gt;&lt;i&gt;亚伯拉罕·林肯：吸血鬼猎人&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-16&quot;&gt;

&lt;p&gt;    动作片。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-17&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-17&quot;&gt;&lt;i&gt;环形使者&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-17&quot;&gt;

&lt;p&gt;    看完竟然没印象了。快餐片么？
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-18&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-18&quot;&gt;&lt;i&gt;野蛮人&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-18&quot;&gt;

&lt;p&gt;    考虑到以前的 &lt;i&gt;gossip girl&lt;/i&gt; ，于是看了看。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-19&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-19&quot;&gt;&lt;i&gt;大武当之天地密码&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-19&quot;&gt;

&lt;p&gt;    NC片，我还忍着看完了。也忍住没打低分，当然，自从 &lt;i&gt;新生活大爆炸&lt;/i&gt; 占据了我的douban一分榜后，我就没法给别的片打低分了，从此我的评分体系也就崩溃了，毁了我的评分观。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-20&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-20&quot;&gt;&lt;i&gt;光晕4：航向黎明号&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-20&quot;&gt;

&lt;p&gt;    Halo自然一定要看。我爱士官长。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-21&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-21&quot;&gt;&lt;i&gt;坏中尉&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-21&quot;&gt;

&lt;p&gt;    平平淡淡的才见功力。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-22&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-22&quot;&gt;&lt;i&gt;太空一号&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-22&quot;&gt;

&lt;p&gt;    我爱男主和男主的台词，勉强加上女主的脸吧。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-23&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-23&quot;&gt;&lt;i&gt;潘神的迷宫&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-23&quot;&gt;

&lt;p&gt;    高深莫测，目前我还是不知深浅啊。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-24&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-24&quot;&gt;&lt;i&gt;胡桃夹子：魔境冒险&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-24&quot;&gt;

&lt;p&gt;    艾丽·范宁好可爱。男主的名字，对中国人来说天生就有违和感啊！！！当然，里面还是有很多讽刺和隐喻的，这是英国佬的习惯么？
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-25&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-25&quot;&gt;&lt;i&gt;一天&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-25&quot;&gt;

&lt;p&gt;    最后最后的那天的回忆真的是点睛之笔，让人飙泪的泪点，从此与众不同。我飚了？没飚？
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-26&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-26&quot;&gt;&lt;i&gt;黑镜&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-26&quot;&gt;

&lt;p&gt;    恩，就是那个black mirror&amp;hellip;.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-27&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-27&quot;&gt;&lt;i&gt;神探夏洛克&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-27&quot;&gt;

&lt;p&gt;    是今年出的最新一季的么？
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-28&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-28&quot;&gt;&lt;i&gt;罗宾汉&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-28&quot;&gt;

&lt;p&gt;    从小罗宾汉就是偶像之一，尽管只是耳闻其名。我为什么这么喜欢个人英雄主义呢？
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-29&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-29&quot;&gt;&lt;i&gt;敢死队2&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-29&quot;&gt;

&lt;p&gt;    纯粹为了看mans，错了，应该是men。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-30&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-30&quot;&gt;&lt;i&gt;飞屋环游记&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-30&quot;&gt;

&lt;p&gt;    一老一小走天涯，但其实那对两小无猜才是戏份中的高密度物质。相守就是历险，窗内也有世界。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-31&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-31&quot;&gt;&lt;i&gt;泰迪熊&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-31&quot;&gt;

&lt;p&gt;    毁三观，从此看泰迪熊的广告就&amp;hellip;.是德芙的广告么？真的好想要一只，但是，这其实就是基友的写照啊。没有毁三观的基友的人生，算不上完整的人生。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-32&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-32&quot;&gt;&lt;i&gt;猫鼠游戏&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-32&quot;&gt;

&lt;p&gt;    隐约记得以前看过。传奇一般。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-33&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-33&quot;&gt;&lt;i&gt;国王的演讲&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-33&quot;&gt;

&lt;p&gt;    英国人都是演技派，实力派，底蕴派，莎翁派。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-34&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-34&quot;&gt;&lt;i&gt;致命ID Identity&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-34&quot;&gt;

&lt;p&gt;    正常人看的结果都是“我想多了”。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-35&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-35&quot;&gt;&lt;i&gt;本杰明·巴顿奇事&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-35&quot;&gt;

&lt;p&gt;    不公平，越活越年轻。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-36&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-36&quot;&gt;&lt;i&gt;怦然心动&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-36&quot;&gt;

&lt;p&gt;    女主好漂亮，我说的是她小时候。。。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-37&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-37&quot;&gt;&lt;i&gt;普罗米修斯&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-37&quot;&gt;

&lt;p&gt;    不是我喜欢的科幻片，何况自己之前没补课。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-38&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-38&quot;&gt;&lt;i&gt;飓风营救2&lt;/i&gt; 影院&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-38&quot;&gt;

&lt;p&gt;    因为1，所以2.。。可惜2没1好看。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-39&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-39&quot;&gt;&lt;i&gt;野战排&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-39&quot;&gt;

&lt;p&gt;    肯定是经典，所以&amp;hellip;
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-40&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-40&quot;&gt;&lt;i&gt;寂静岭&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-40&quot;&gt;

&lt;p&gt;    不爱玩RPG的人，所以看这个天生有劣势。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-41&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-41&quot;&gt;&lt;i&gt;汉密尔顿：国家利益&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-41&quot;&gt;

&lt;p&gt;    徒手格斗等等， &lt;i&gt;Taken&lt;/i&gt; 的翻版啊。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-42&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-42&quot;&gt;&lt;i&gt;光荣&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-42&quot;&gt;

&lt;p&gt;    光荣就是glory。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-43&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-43&quot;&gt;&lt;i&gt;狗镇&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-43&quot;&gt;

&lt;p&gt;    我竟然坚持看完了。以后有信心看舞台剧了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-44&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-44&quot;&gt;&lt;i&gt;完美风暴&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-44&quot;&gt;

&lt;p&gt;    男人都爱乔治·克鲁尼
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-45&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-45&quot;&gt;&lt;i&gt;总统杀局&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-45&quot;&gt;

&lt;p&gt;    还没收尾，同上。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-46&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-46&quot;&gt;&lt;i&gt;伊娃 Eva&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-46&quot;&gt;

&lt;p&gt;    女主和小女主都好看&amp;hellip;&amp;hellip;男主是个幸福的男人。EVA这名字&amp;hellip;为什么感觉不对呢？
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-47&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-47&quot;&gt;&lt;i&gt;秒速五厘米&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-47&quot;&gt;

&lt;p&gt;    新海诚，新海诚，新海诚。想复习 &lt;i&gt;云之彼端&lt;/i&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-48&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-48&quot;&gt;&lt;i&gt;超级战舰&lt;/i&gt; 影院&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-48&quot;&gt;

&lt;p&gt;    打呀打呀打呀打&amp;hellip;逻辑是不需要的。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-49&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-49&quot;&gt;&lt;i&gt;赛德克·巴莱&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-49&quot;&gt;

&lt;p&gt;    短版，够用了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-50&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-50&quot;&gt;&lt;i&gt;黑衣人3&lt;/i&gt; 影院&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-50&quot;&gt;

&lt;p&gt;    保留曲目。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-51&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-51&quot;&gt;&lt;i&gt;超能失控&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-51&quot;&gt;

&lt;p&gt;    &lt;i&gt;苜蓿地&lt;/i&gt; 后就免疫了&amp;hellip;
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-52&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-52&quot;&gt;&lt;i&gt;晚秋&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-52&quot;&gt;

&lt;p&gt;    普通片吧，有段时间了，忘了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-53&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-53&quot;&gt;&lt;i&gt;泰坦尼克号 3D版&lt;/i&gt; 影院&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-53&quot;&gt;

&lt;p&gt;    &amp;hellip;&amp;hellip;
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-54&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-54&quot;&gt;&lt;i&gt;碟中谍4&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-54&quot;&gt;

&lt;p&gt;    保留节目。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-55&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-55&quot;&gt;&lt;i&gt;战马&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-55&quot;&gt;

&lt;p&gt;    不习惯以马为主角所以感觉没主角么?
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-56&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-56&quot;&gt;&lt;i&gt;白兔糖&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-56&quot;&gt;

&lt;p&gt;    一小部分，记得回头看完。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-57&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-57&quot;&gt;&lt;i&gt;龙门飞甲&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-57&quot;&gt;

&lt;p&gt;    算了，就这样算了吧。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-58&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-58&quot;&gt;&lt;i&gt;那些年，我们一起追的女孩&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-58&quot;&gt;

&lt;p&gt;    电影配乐从此成为保留曲目了。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-59&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-59&quot;&gt;&lt;i&gt;big bang s6&lt;/i&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-59&quot;&gt;

&lt;p&gt;    保留节目。
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>4clojure's elementary and easy solutions</title>
   <link href="http://qinjian623.github.com/2012/12/21/4clojure_solutions"/>
   <updated>2012-12-21T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/21/4clojure_solutions</id>
   <content type="html">&lt;p&gt;
学clojure玩,就跌跌撞撞把4clojure上的elementary和easy的题目都写完了,没错,柿子就是要捡软的捏,目前依然任重道远&amp;#x2026;&amp;#x2026;做这个才真正知道什么叫做行百里者半九十.如今我还在以龟速出门中&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
很多代码屎一般,因为实在不熟悉语言.自己除了括号就知道map和reduce两个东西.看着别人高富帅的代码顿时自己缩小了一万倍.性能什么的都不在考虑范围内,解决问题才是关键.这又让自己回想起了刚看的一篇有关目标的短文,忘了在哪看的了,说的就是定目标其实也有缺点的,比如不择手段啊,十分功利啊&amp;#x2026;&amp;#x2026;都是需要克服才能发挥更好作用的.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt; &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;1&lt;/span&gt;
 true

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;2&lt;/span&gt;
 4

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;3&lt;/span&gt;
 &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;HELLO WORLD&quot;&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;4&lt;/span&gt;
 &lt;span style=&quot;color: #4c83ff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:c&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;5&lt;/span&gt;
 '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;1 2 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
 '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;1 2 3 4&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;6&lt;/span&gt;
 &lt;span style=&quot;color: #4c83ff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:c&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;7&lt;/span&gt;
 [1 2 3 4]
 [1 2 3 4]

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;8&lt;/span&gt;
 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;set&lt;/span&gt; '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #4c83ff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:c&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:d&lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;set&lt;/span&gt; '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #4c83ff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:c&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:d&lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;9&lt;/span&gt;
 2

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;10&lt;/span&gt;
 20
 20

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;11&lt;/span&gt;
 [&lt;span style=&quot;color: #4c83ff;&quot;&gt;:b&lt;/span&gt; 2]

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;12&lt;/span&gt;
 3
 3
 3

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;13&lt;/span&gt;
 [20 30 40]

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;14&lt;/span&gt;
 8

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;15&lt;/span&gt;
 * 2

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;16&lt;/span&gt;
 (fn [x] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; x &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;17&lt;/span&gt;
 '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;6 7 8&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;18&lt;/span&gt;
 '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;6 7&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;35&lt;/span&gt;
 7

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;36&lt;/span&gt;
 [z 1, y 3, x 7]

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;37&lt;/span&gt;
 &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;ABC&quot;&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;64&lt;/span&gt;
 +

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;57&lt;/span&gt;
 '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;5,4,3,2,1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;71&lt;/span&gt;
 last

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;72&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;apply&lt;/span&gt; + %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;134&lt;/span&gt;
 (fn [k,m]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [v &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;m k&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
         containsk &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;contains?&lt;/span&gt; m k&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; containsk
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; v nil&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
           true
           false
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
         false&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;145&lt;/span&gt;
 '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;1 5 9 13 17 21 25 29 33 37&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;162&lt;/span&gt;
 1

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;161&lt;/span&gt;
 #{1 2}

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;156&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; (fn [m v]
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;assoc&lt;/span&gt; m v %1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
         {} %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;166&lt;/span&gt;
 (fn [op x y] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;cond&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;op x y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:lt&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;op y x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:gt&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:else&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:eq&lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;19&lt;/span&gt;
 (fn [x] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nth&lt;/span&gt; x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;20&lt;/span&gt;
 (fn [x] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nth&lt;/span&gt; x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;21&lt;/span&gt;
 (fn [l, n] 
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;loop&lt;/span&gt; [n n
       l l]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; n 0&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;recur&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;dec&lt;/span&gt; n&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;next&lt;/span&gt; l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;22&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; + &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; (fn [x] 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;24&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; + %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;25&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;filter&lt;/span&gt; odd? %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;23&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; conj &lt;span style=&quot;color: #7f7f7f;&quot;&gt;()&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;27&lt;/span&gt;
 (fn [coll]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [rc &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reverse&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; n &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;every?&lt;/span&gt; identity 
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nth&lt;/span&gt; coll %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nth&lt;/span&gt; rc %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;range&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;dec&lt;/span&gt; n&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;26&lt;/span&gt;
 (fn [x]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;take&lt;/span&gt; x
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;(fn fib [a b]
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;cons&lt;/span&gt; a &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;lazy-seq&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;fib b &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;+&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))))&lt;/span&gt; 
       1 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;38&lt;/span&gt;
 (fn [&amp;amp; l]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; (fn [x,y] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;&amp;gt;&lt;/span&gt; x y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; x y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; l &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;29&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;apply&lt;/span&gt; str &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;re-seq&lt;/span&gt; #&lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;[A-Z]+&quot;&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;48&lt;/span&gt;
 6

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;32&lt;/span&gt;
 reduce #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; %1 %2 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; []

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;34&lt;/span&gt;
 (fn [s e]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;take&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; e s&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;iterate&lt;/span&gt; inc s&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;42&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;apply&lt;/span&gt; * &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;range&lt;/span&gt; 1 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;inc&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;47&lt;/span&gt;
 4

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;45&lt;/span&gt;
 '&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;1 4 7 10 13&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;28&lt;/span&gt;
 (fn[x]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;complement&lt;/span&gt; sequential?&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;rest&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;tree-seq&lt;/span&gt; sequential? seq x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;30&lt;/span&gt;
 (fn xxxx[x]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reverse&lt;/span&gt;
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; (fn [a b]
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;not&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; a&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
               a&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #7f7f7f;&quot;&gt;()&lt;/span&gt;
           x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;39&lt;/span&gt;
 (fn [x y] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; x y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;33&lt;/span&gt;
 (fn replicates [l n]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reverse&lt;/span&gt;
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; (fn [x y] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;
                       into x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;repeat&lt;/span&gt; n y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 
                       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;()&lt;/span&gt; l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;40&lt;/span&gt;
 (fn [se l]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;rest&lt;/span&gt;
                         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; se %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; l
                         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;31&lt;/span&gt;
 (fn cap[l]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reverse&lt;/span&gt;
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; (fn [x y]
             &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;(println (first (first x)) (next x) y) &lt;/span&gt;
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;next&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 
           &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt; 
           &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;next&lt;/span&gt; l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;52&lt;/span&gt;
 [c e]

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;41&lt;/span&gt;
 (fn asdf
   [coll n]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;take&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;dec&lt;/span&gt; n&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;partition-all&lt;/span&gt; n coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;49&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;take&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;drop&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;51&lt;/span&gt;
 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; 1 2 3 4 5&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;83&lt;/span&gt;
 (fn [&amp;amp; args]
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [n &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; true %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                                &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;+&lt;/span&gt; 1 %1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                                %1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 0 args&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]
               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;&amp;gt;&lt;/span&gt; n 0&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;&amp;lt;&lt;/span&gt; n &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; args&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;61&lt;/span&gt;
 (fn  
   [keys vals]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;loop&lt;/span&gt; [map {}
            ks &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;seq&lt;/span&gt; keys&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
            vs &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;seq&lt;/span&gt; vals&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;and&lt;/span&gt; ks vs&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;recur&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;assoc&lt;/span&gt; map &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; ks&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; vs&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
                &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;next&lt;/span&gt; ks&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;next&lt;/span&gt; vs&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
         map&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;66&lt;/span&gt;
 (fn [a b]                                                  
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;loop&lt;/span&gt; [x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;min&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]                                            
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;or&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;not=&lt;/span&gt; 0 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mod&lt;/span&gt; b x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;not=&lt;/span&gt; 0 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mod&lt;/span&gt; a x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;             
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;do&lt;/span&gt;                                                        
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;println&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;                                             
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;recur&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; x 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;                                        
       x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;81&lt;/span&gt;
 (fn [s1 s2]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nil?&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;get&lt;/span&gt; s2 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
              %1
              &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
           #{} s1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;62&lt;/span&gt;
 (fn iter [f x]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;cons&lt;/span&gt; x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;lazy-seq&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;iter f &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;f x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;107&lt;/span&gt;
 (fn[n] #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #919191;&quot;&gt;Math/pow&lt;/span&gt; %1 n&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;99&lt;/span&gt;
 (fn [a b] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;int&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 48&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;seq&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #919191;&quot;&gt;String/valueOf&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;*&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;90&lt;/span&gt;
 (fn [a b]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;set&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt;
                  (fn [x]
                    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; x %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; a&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;63&lt;/span&gt;
 (fn
   [f coll]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;persistent!&lt;/span&gt;
    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt;
     (fn [ret x]
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [k &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;f x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;assoc!&lt;/span&gt; ret k &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;get&lt;/span&gt; ret k []&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))&lt;/span&gt;
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;transient&lt;/span&gt; {}&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
     coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;88&lt;/span&gt;
 (fn __ [a b]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;contains?&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;disj&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; %1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
           a
           b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;122&lt;/span&gt;
 (fn [s]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #919191;&quot;&gt;Integer/parseInt&lt;/span&gt; s 2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;126&lt;/span&gt;
 &lt;span style=&quot;color: #919191;&quot;&gt;Class&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;143&lt;/span&gt;
 (fn [a b]
    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;apply&lt;/span&gt; + &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; * a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;97&lt;/span&gt;
 (fn pascal [n]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; n 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
     [1]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;apply&lt;/span&gt; + %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;partition&lt;/span&gt; 2 1
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;concat&lt;/span&gt; [0] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;pascal &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; n 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; [0]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;135&lt;/span&gt;
 (fn __ [&amp;amp; l]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;number?&lt;/span&gt; %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;%1 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
              (fn [i]
                &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;%2 %1 i&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
              &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
           l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;95&lt;/span&gt;
 (fn __ [tree]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;or&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;vector?&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;seq?&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
            &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 3&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;__ &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;second&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;__ &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;second&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;rest&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))&lt;/span&gt;
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;not&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;vector?&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;not&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;seq?&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; false tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
         false
         true&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
       false
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;118&lt;/span&gt;
 (fn mymap [f coll]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;false?&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;empty?&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;lazy-seq&lt;/span&gt;
           &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;cons&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;f &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;mymap f &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;rest&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;120&lt;/span&gt;
 (fn __ [l]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; 
    (fn inside-reduce [a b]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;&amp;lt;&lt;/span&gt; b &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;(fn sum_square [l]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;+&lt;/span&gt; %1 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;*&lt;/span&gt; %2 %2&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
           0
           l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;(fn seq_number [n]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;map&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;int&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 48&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;seq&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #919191;&quot;&gt;String/valueOf&lt;/span&gt; n&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))&lt;/span&gt; b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;+&lt;/span&gt; a 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
     a&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

           0
           l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;128&lt;/span&gt;
 (fn __ [s]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [suit-table {&lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;D&quot;&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:diamond&lt;/span&gt;, &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;H&quot;&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:heart&lt;/span&gt;, &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:club&lt;/span&gt;, &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;S&quot;&lt;/span&gt; &lt;span style=&quot;color: #4c83ff;&quot;&gt;:spades&lt;/span&gt;}
         rank-table {&lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;A&quot;&lt;/span&gt; 12,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;K&quot;&lt;/span&gt; 11,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;Q&quot;&lt;/span&gt; 10,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;J&quot;&lt;/span&gt; 9,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;T&quot;&lt;/span&gt; 8,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;9&quot;&lt;/span&gt; 7,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;8&quot;&lt;/span&gt; 6,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;7&quot;&lt;/span&gt; 5,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;6&quot;&lt;/span&gt; 4,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;5&quot;&lt;/span&gt; 3,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;4&quot;&lt;/span&gt; 2,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;3&quot;&lt;/span&gt; 1,
                     &lt;span style=&quot;color: #61CE3C;&quot;&gt;&quot;2&quot;&lt;/span&gt; 0}
         ss &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;seq&lt;/span&gt; s&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;println&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; ss&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;second&lt;/span&gt; ss&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;assoc&lt;/span&gt; {}
       &lt;span style=&quot;color: #4c83ff;&quot;&gt;:suit&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;suit-table &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; ss&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;
       &lt;span style=&quot;color: #4c83ff;&quot;&gt;:rank&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;rank-table &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;str&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;second&lt;/span&gt; ss&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;100&lt;/span&gt;
 (fn __ [&amp;amp; args] 
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; (fn lcm [a b]
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;/&lt;/span&gt;  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;*&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)(&lt;/span&gt;(fn gcd [a b]
                           &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; b 0&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                             a
                             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;gcd b &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mod&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
           args&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;157&lt;/span&gt;
 (fn __[coll]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;loop&lt;/span&gt; [x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
          l []]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;&amp;gt;=&lt;/span&gt; x 0&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;recur&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; x 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; l &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nth&lt;/span&gt; coll x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;
       &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reverse&lt;/span&gt; l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;96&lt;/span&gt;
 (fn __ [tree]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [[v l r] tree]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; l &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;(fn reflect [tree]
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nil?&lt;/span&gt; tree&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
               tree
               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [[v l r] tree]
                 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; v &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;reflect r&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;reflect l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))))&lt;/span&gt;
           r&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;147&lt;/span&gt;
 (fn __ [coll]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;cons&lt;/span&gt; coll &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;lazy-seq&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;__ &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;(fn next-pacscal [coll]
     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;loop&lt;/span&gt; [length &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; 
                  i 0
                  l [&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]]
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;&amp;lt;&lt;/span&gt; i length&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;recur&lt;/span&gt;
                length
                &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;inc&lt;/span&gt; i&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;
                &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;conj&lt;/span&gt; l &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;bigint&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nth&lt;/span&gt;  coll i&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;nth&lt;/span&gt; coll &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;inc&lt;/span&gt; i&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))))&lt;/span&gt;
               l&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;
           &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;last&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt; coll &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;146&lt;/span&gt;
 #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;reduce&lt;/span&gt; (fn [a b]&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;assoc&lt;/span&gt; a &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;first&lt;/span&gt; b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;second&lt;/span&gt; b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt; 
         {}
         &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; (fn [x]
                   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [[k v] x]
                     &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; (fn [x]
                               &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [[kin vin] x]
                                 {[k kin] vin}
                                 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; 
                             v&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;
                 %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

 &lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;153&lt;/span&gt;
 (fn __ [coll]
   &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FBDE2D;&quot;&gt;let&lt;/span&gt; [x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;(fn [t] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; (fn [y] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; y&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; t&lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt; %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; coll&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt;]
             &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; 0 &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;filter&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;&amp;gt;&lt;/span&gt; % 1&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;mapcat&lt;/span&gt; #&lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;list&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;count&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;filter&lt;/span&gt; &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;(fn [a] (fn [b] &lt;span style=&quot;color: #7f7f7f;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #FF6400;&quot;&gt;=&lt;/span&gt; a b&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt;

                                                                %&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)&lt;/span&gt; x&lt;span style=&quot;color: #7f7f7f;&quot;&gt;)))&lt;/span&gt; x &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))))&lt;/span&gt; 
    &lt;span style=&quot;color: #7f7f7f;&quot;&gt;))&lt;/span&gt;

&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #8B8989; font-style: italic;&quot;&gt;173&lt;/span&gt;
op n
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;postamble&quot; class=&quot;status&quot;&gt;
&lt;p class=&quot;author&quot;&gt;Author: Jian Qin&lt;/p&gt;
&lt;p class=&quot;date&quot;&gt;Created: 2013-08-15 四 17:11&lt;/p&gt;
&lt;p class=&quot;creator&quot;&gt;&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 24.2.1 (&lt;a href=&quot;http://orgmode.org&quot;&gt;Org&lt;/a&gt; mode 8.0.7)&lt;/p&gt;
&lt;p class=&quot;xhtml-validation&quot;&gt;&lt;a href=&quot;http://validator.w3.org/check?uri=referer&quot;&gt;Validate XHTML 1.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>谁会认错和乔布斯传笔记</title>
   <link href="http://qinjian623.github.com/2012/12/18/books_2012_12"/>
   <updated>2012-12-18T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/18/books_2012_12</id>
   <content type="html">&lt;p&gt;
记录下有关的两本书
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&amp;lt;谁会认错&amp;gt; 主题是:认知失调
&lt;/li&gt;
&lt;li&gt;&amp;lt;乔布斯传&amp;gt; 主题是:&amp;hellip;
&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;
最近看的两本书,都是快速浏览性质的.主要原因自然是两本书的性质决定,别找借口了,其实只是临在年前为年终总结刷战绩.讨厌.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;&lt;a name=&quot;&quot; class=&quot;target&quot;&gt;谁会认错&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;&amp;lt;谁会认错&amp;gt;主要集中在认知失调的讨论上,属于一个概念翻来覆去不停说的情况,当然,翻来覆去并不是完全一模一样.总结出来一句话基本就是:人都是死不认错的.哪怕明知道错了,还要找借口.真要认错,要痛苦万分,还有要慢慢来.
&lt;/p&gt;
&lt;p&gt;
死不认错这个现象其实很普遍的,单想想自己父母之间吵来吵去的时候[恕我单身屌丝,实在没女友可吵,哪怕有了,以我嫌麻烦的特点,我也一定是懒得吵的,显然这句&quot;一定是懒得吵&quot;的也是自己认知失调的一种表现].
&lt;/p&gt;
&lt;p&gt;
有一句话是值得先专门挑出来的,&quot;我们的人类是用尽一生来证明自身的存在不是荒谬的一种动物&quot;.其实这或许就是我们每个人都死不认错的原因.只可惜,从这句话中也看出来了,这也是我们区别于普通动物的特点,或许这注定了人类天生就有这种死不认错的&quot;原罪&quot;.当然,这样的仅仅凭一句话和自己的那点微不足道的经验得出的结论实在是过于武断了,不过在此我只能明确表达自己的观点,我对自己或者说对每个人都是持悲观态度的,虽然你可以通过不断努力提升自己,不过,哈哈哈,结局都是悲剧的.
&lt;/p&gt;
&lt;p&gt;
人太渺小了,所以人类只能是社会性的动物[这句典型的没有逻辑联系],没有集体就没有传承[这句典型的没有证据].想想这几百年的科技发展,要是没有传承,可以想象得到,惨不忍睹,科技不可能有发展.那么,那些造成传承中断的人类行为,天上掉个石头结果让人享受恐龙待遇的情况实在不可控就算了吧,就是典型的反人类行为,一定会遭到唾弃,而中断造成的损失也只有天知道了.只可惜,这种反人类的行为还是偶尔会蹦出来,姑且就用偶尔一词吧,譬如,老祖宗的焚书坑儒,当然,似乎自己记得之前读过另一个版本的&quot;史实&quot;,其实都是误会,不过这里针对的是烧书这件事情,就别太管几千年前的&quot;事实&quot;了,不过我们又会考虑一个问题,难道烧书就一定是错误的吗?乌七八糟的,星座算命的,这不也是书么.这只能归结于,本身这个问题就是个伪问题,从慎重的角度来说,烧书当然不会一定是错误的,这不得不忍不住吐槽一下所谓的辩证法,从自己初中开始学思想政治就开始想不通了,什么事情都有两面性,那最后我过个毛日子呢?死还有两面性呢.现在回头再看,自己对自己思想政治20几分的低分记录,不仅不应该以为耻,反而应该引以为荣.当然,从兲朝一路走来,自我 &lt;span style=&quot;text-decoration:underline;&quot;&gt;调整&lt;/span&gt; 的能力起码都到master级别了,所以我们来辩证的看一下辩证法,辩证法也是有两面性的,然后任何人都能胡扯一堆两面性.当然联系的看问题也忍不住要骂,我没吃饭所以肚子饿是有联系的,我没吃饭所以肚子饿所以没有跑大马路上吃屎也是有联系的,当然不吃屎还和其他东西有联系,比如我是人不是狗\昨天下雨了\日本地震了\美帝又有校园枪击案了.其实吐槽后的结论很简单,流氓之所以称之为流氓,就是因为他们是流氓.
&lt;/p&gt;
&lt;p&gt;
继续考虑反人类的行为艺术,比如,某个叫做ITU大会的玩意,所谓的加强互联网监管,我们要辩证的看,哪有不要监管的,哪有没有线的风筝的,哪有没规律还能有方圆的呢?所以监管是需要的,要允许控制色情,所以要允许查IP,所以要允许DNS管理,所以要允许黑名单,所以要允许白名单.从&amp;lt;意志力&amp;gt;一书中引用一个观点,每个人的意志力往往都是在一件件小事上磨损,最终掉自己的坑去里了.
&lt;/p&gt;
&lt;p&gt;
当然,以上的吐槽其实都是我的认知失调.我只不过不想认错而已,所以会扭曲现实,用有色眼镜来看问题,只选取对自已有利的证据,哪怕不利的证据都能堆成山了,我依然能够背靠大山,&quot;我思故我在&quot;,我没看见山,有毛山呢?身后?这tm也算是大山?想当年我看见过比这大不知道多少的山&amp;hellip;这么来看还是要讲唯物论的&amp;hellip;我一定要高呼一声&quot;唯物论万岁&quot;.
&lt;/p&gt;
&lt;p&gt;
只可惜&quot;唯物&quot;也只是一个程度的问题,因为真实的数据很难精确,总有噪点,处理一下噪点的结果往往也是一个概率的问题.所以,有色眼镜是没法脱离了,能做的,不过是让有色眼镜的颜色浅一点而已.当然,这还是在不考虑主观因素的情况下,实验数据摆在那.问题是,一样的数据能给不同的人得出不同的结论,哪怕是相反的结论也不奇怪.当然这也还是不考虑,有些情况下有些人会跳起来叫嚣,&quot;这数据是假的,不可靠&quot;等等.这么一看认知上有偏差是难以避免了,换句话说,一件事情总会有个不同意见,再进一步,最后总会有人是错的.要是一件事情的结果竟然是皆大欢喜,那我只能觉得其实是&quot;皆大欢喜&quot;.哪怕是给全国人民发钱,起码我就不同意,发那么多钱干吗不都给我用?
&lt;/p&gt;
&lt;p&gt;
有错其实没多大关系,从小妈妈对我说,吃屎不忘挖井人,知错就改就好了.结果是,按照书上说的,知错的结果是不知错.其实这太平常了,高高兴兴和谁谁谁宣布了XX的结论,结果被人当面说你的XX的结论是错的,这八成是下不来台了,太丢脸,直接认错那是不行了,谦虚点的,&quot;哦,我再看看,可能是哪错了&quot;,暂且就不考虑谦虚的含金量了.当然,也有爱抬杠的,于是就有了&quot;张真人&quot;,&quot;李真人&quot;,错不了的.再考虑个更加暧昧的情况,要是对错的责任不明白的,几人一小组的,或者本身实在是天生适合辩证法的问题,一般结果是,&quot;不怕神一样的对手,就怕猪一样的队友&quot;,&quot;虽然这里我们犯了个小错,但是我们的收获更大,收益更多&quot;.人的本性都是自利的,哪怕是作总结的时候,这次成绩不错,当然是我努力认真学习的结果,即使不考虑我瞟来的那几题,成绩也很优秀,看,瞟来的那几题还有错的;这次成绩不好,没好好复习,都怪室友拉我打游戏,基友不提醒我去自习,而且那天状态不佳,食堂的饭也难吃,还有,小卖部可口卖完了,我带的百事上的考场啊.
&lt;/p&gt;
&lt;p&gt;
自尊\虚荣\对自我的过分信任等等的结果就是我是对的,犯错的是别人,一群SB.自己都是伟光正,别人都是假大空.死不认错,错了也能&quot;辩证&quot;一下,喜从悲来.只知辩证,不知唯物.借口漫天飞,活在自己编织的世界里.外人提醒一句,恨不得别人死全家.再不济,错误也不是我犯的,是XXX犯得,或者我相信我的选择,任何人在我面临的情况下,也会是这样,所以我的选择是对的.别人这样也不能说这样就对啊,别人这样也不能说你这样就对啊.最后往往脱离了逻辑,脱离还算好的,要是背离了逻辑,那就给人人格分裂的感觉了,但是,他还是活的好好的,因为在&quot;睁一只眼闭一只眼&quot;面前,逻辑和混账,真理和谬论,人人平等.
&lt;/p&gt;
&lt;p&gt;
只可惜,这是任何人都难逃的一个圈,唯一能做的就是减轻,却难以根治.任何一个注意观察的人应该都会发现这一现象的普遍性,或许都会忍不住骂一句,我C,真tm普遍.真理呀!
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;&lt;a name=&quot;&quot; class=&quot;target&quot;&gt;乔布斯传&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;传记实在难说主题,所以&amp;lt;乔布斯传&amp;gt;的主题就是&quot;乔布斯&quot;.之前读过另外一本,当然不是这个官方版,谁知道买了没多长时间帮主就死了,仙逝了,哎,屌丝青年单词量有限,专门跑去查了个好听的,自己唯一知道的文艺点就就是薨了,这还得借着输入法才能打出来.
&lt;/p&gt;
&lt;p&gt;
这也只能整体上说一下了,帮主可能不一定会被称为伟大,但是称为传奇还是绰绰有余了.我不是果粉,其实我什么粉都不是,我连冰冰棒都不是.但是苹果的东西还是有用过,那份工业设计,确实不是一般的产品所能及.当然不是十全十美,比如要是笔记本的mac os x能换成arch,然后待机,发热什么的能和mac os x一样,我就high翻了.或者么,port也有中国源该多好.
&lt;/p&gt;
&lt;p&gt;
帮主在斯坦福的那份毕业演讲实在会是给每个听过看过的人都有深远的影响,高中的时候看到的时候还是too young, too simple,现在再看才更加心有戚戚焉.帮主的那份成就,事实上,成就应该是复数,实在是常人所未能及.只能叹一句&quot;天意如此,造化弄人&quot;.固然,时势造英雄,所以,还有些人还生活在自己的认知失调里,以为自己的成就属于自己天降大任,殊不知自己不过是不小心踩上时代大潮而不自知.但帮主一次又一次的创造惊人成就,一次又一次的弄潮,这个,就是属于开挂无解了.
&lt;/p&gt;
&lt;p&gt;
性格怪异复杂,当然,其实谁都这样,只不过明显不明显的区别,或者有些则是成功的抑制了自己怪异的一面,和帮主一比较,真不知道这种控制到底是好还是坏.
&lt;/p&gt;
&lt;p&gt;
要说收获,实在没什么说的,一来自己看得快,囫囵吞枣,赶进度就是这样讨厌,欲速则不达.二来,本身传记类读一遍未必会有多少积累.三么,何必那么认真呢,收获你妹呢,kill time不算是收获的么&amp;hellip;仔细想想还是有点悲剧的收获的,我也有感觉自己要不久于人世,当然,这个不久单位还是年的.特别是本四后期的时候,那种感觉明显到个位数的年,那段时间太恐怖了.研究僧成功浪费两年生命,感觉倒又不明显了,不过这段时间又隐约出来,不过没之前那么恐怖,或许是淡定了.这么一看,和帮主一比,要我真点正,薨的要比帮主还要早&amp;hellip;&amp;hellip;这是一个多么让人讨厌的收获啊.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>lambda和邱奇编码</title>
   <link href="http://qinjian623.github.com/2012/12/10/Lambda"/>
   <updated>2012-12-10T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/10/Lambda</id>
   <content type="html">&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/15570486&quot; width=&quot;476&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>自控力笔记</title>
   <link href="http://qinjian623.github.com/2012/12/08/willpower"/>
   <updated>2012-12-08T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/08/willpower</id>
   <content type="html">&lt;p&gt;
看日期是9.03到手的。到上上周为止看了几遍，虽然这本书其实不是一本需要读很多遍的书吧，基本也算是一快餐书。而且设计的不错，每章节后面都有一个表格总结一下内容，再看的时候看看后面的表格就可以了。
&lt;/p&gt;
&lt;p&gt;
全书基本说的就是如何抵制诱惑。一般都会先介绍理论性的东西，然后配合一个“意志力实验”来通过实践解决问题。
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;C1&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;   神经学原理就是低级脑和高级脑的矛盾,里面提到了一句“注意力分散更加容易向诱惑屈服”，于是需要一些方法来提高注意力的集中能力， &lt;b&gt;5分钟冥想&lt;/b&gt; 就出来了
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;C2&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;   第一章提到的低级脑往往没法受控制，所以得加强下信心，说明下，其实诱惑还是可以抵制的，但是要注意到自己能够调整自己的状态。如何调整？ 就是 &lt;b&gt;三思而后行&lt;/b&gt; ，也就是保持生理和心理的稳定，不要被冲动一时冲昏头脑。然后提出了一个评价指标，心率异变率，心跳慢下来就可以保持平静，集中注意力。还要注意，认识到自己的冲动，发现自己要做的决定其实不过是自己的冲动而已。然后既然有了心率异变率，那么就可以使用方法来控制了，其实就是减慢心跳，比如锻炼、饮食，然后还有个临时的方法， &lt;b&gt;有意识控制呼吸频率&lt;/b&gt; ，长期的还是得靠锻炼了，所有还有 &lt;b&gt;5分钟锻炼&lt;/b&gt; ，强度低的短期效果更好点。然后就是 &lt;b&gt;睡觉&lt;/b&gt; 还有 &lt;b&gt;打盹&lt;/b&gt; 。还有就是自控力有限，需要补充，所以不能一直太自控，要保持 &lt;b&gt;放松&lt;/b&gt; ，因为压力也使要耗费自控力的。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;C3&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;   意志力是类似肌肉的，会慢慢的耗完，所以每天都要把重要的事情先做了。然后就是发现摄入糖分可以回复自控力，是光吃糖也不科学，继续深入，因为缺糖代表快完蛋了，所以要进入冒险模式了，但是这个只能用在原始社会。要有 &lt;b&gt;饮食方案&lt;/b&gt; 要合理膳食，但是我发现这个和前面的理论实在是矛盾，算了，靠自己考虑，于是应该提高自己对缺糖的耐受度，然后就是多 &lt;b&gt;在小事情上有意识的锻炼自控力&lt;/b&gt; 。后面又提出自控力是否真的有极限，会类似身体上长跑的时候有二次呼吸，挺过去就会感觉更好了，当然这个想法没什么直接的证据和理论支持，这本书也说了，无限意志力不太可能，但是还是有可能存在自己认为的疲惫其实是错觉的可能性，所以 &lt;b&gt;疲惫的时候要靠想想“我想要”来挺过去&lt;/b&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4&quot;&gt;C4&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;   行善之后更容易丧失意志力，因为自己没法准确评估，到底行善了多少，但是却有了借口给自己一点奖励。所以要 &lt;b&gt;取消许可，牢记理由&lt;/b&gt; ，自己完成了目标的一部分时候要清楚自己真正的目标，还要有意识的记住自己行善的理由而不是记住我行善了。还有乐观会让自己明日复明日，于是要回复到现实中，明白 &lt;b&gt;今天和明天没有区别&lt;/b&gt; ，所以要做什么就不要指望到明天了， DO IT NOW。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5&quot;&gt;C5&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5&quot;&gt;

&lt;p&gt;   多巴胺会对上瘾起作用，但是也可以利用多巴胺来实现自己的目标， &lt;b&gt;将有多巴胺的事情和讨厌的事情一起做&lt;/b&gt; 。而多巴胺支持刺激了神经，完成刺激后，还是那个样子，所以要 &lt;b&gt;测试奖励的承诺&lt;/b&gt; ，明白那些上瘾的事情往往最后的结果并不是自己实际期望的。当然，没有欲望也使很痛苦的，因为欲望使人年轻么， &lt;b&gt;合理控制欲望&lt;/b&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6&quot;&gt;C6&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6&quot;&gt;

&lt;p&gt;   情绪低落也会让自控力下降，上一章说的是欲望会降低，这一章说的是压力也会降低，因为也会影响多巴胺，所以要 &lt;b&gt;有效的降低压力&lt;/b&gt; ，而不是用无效的方法。恐惧也会带来压力，所以也要注意控制恐惧，明白自己真正害怕什么，是否值得害怕。还有就是破罐子破摔的问题，对自己太狠往往就是这个结果，错一次情绪立马就下去了，所以要学会 &lt;b&gt;原谅自己&lt;/b&gt; ，还是要保证自己情绪的稳定。还有就是过于乐观造成的虚假希望，计划和现实是有差距的，所以计划去实现才重要，停留在纸面上，不断地计划会让自己产生错觉，要保持一个 &lt;b&gt;乐观的悲观主义&lt;/b&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7&quot;&gt;C7&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7&quot;&gt;

&lt;p&gt;   人往往不能抵制住当下的诱惑而造成最后放弃了未来的机会，换句话来说，就是自己对自己的不负责任。其实这个何止对个人来说是这样，对政府和国家也一样，污染环境等等的，也使为了当下的诱惑牺牲自己的未来。原因似乎是自己的原始脑更加青睐于即时的奖励，不过有个解法，看不见当前的诱惑的情况下会好很多，所以可以 &lt;b&gt;保持距离&lt;/b&gt; ，另外就是 &lt;b&gt;10分钟法则&lt;/b&gt; ，有诱惑的时候，强迫自己延时10分钟去考虑长远的利益。然后就是 &lt;b&gt;降低未来的折扣率&lt;/b&gt; ，考虑下未来的长期利益，如果放弃了，值得么。还有就是 &lt;b&gt;预先承诺&lt;/b&gt; ，基本属于破釜沉舟这一类的，堵死自己的路，让自己只有考虑长期利益，或者犯了错就会有损失。还有就是要明白自己的未来和现在的区别，要看到自己希望自己未来是什么样子，这个似乎和多考虑长期利益一样， &lt;b&gt;预见未来的自己&lt;/b&gt; ，想象自己的未来，给未来的自己写信等等。为了防止矫枉过正，书上又提了下，别太过于看重未来了，享受当下也需要。- -！
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-8&quot;&gt;C8&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8&quot;&gt;

&lt;p&gt;   意志力也使会传染的，这个相信每个人都是会体会，身边什么样子的人，自己也会向那个方向靠近。当然传染源也只会是自己感觉比较亲密的人。 &lt;b&gt;增强自己的免疫系统&lt;/b&gt; 要每天考虑下自己的目标和可能的诱惑，提前打个预防针。 &lt;b&gt;感染自控力&lt;/b&gt; 就是找些意志力强的典范来当偶像，这样也会被传染。也提到了社会认同等等，这个不多记了乌合之众、影响力还有认知偏差一类的书也都说到这些内容了。在我看来就是无解，你永远没有办法得到真正的自我的观点。不过如果社会认同向好的方向，自然对自己有利。 还有就是 &lt;b&gt;自豪的力量&lt;/b&gt; ，看来就是被别人认同或者是自己成功挑战自我后的自豪感。 还有就是 &lt;b&gt;变成集体项目&lt;/b&gt; ，因为一个人更难坚持下来。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-9&quot;&gt;C9&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9&quot;&gt;

&lt;p&gt;   就像是越想睡觉越失眠的感觉，盗梦空间里面如出一辙。解决方法当然没法反抗了，因为越反抗越徒劳。所以就要 &lt;b&gt;忠实自己的想法，但是不能相信它&lt;/b&gt; 。然后同理，对与欲望也使这样 &lt;b&gt;面对欲望，但是不要行动&lt;/b&gt; ，承认欲望的不可控制，但是要注意自己之前的目标和承诺。后面的方法也使一个性质，既然越想越难忘，干脆就不要说什么 -我不要- ，改成我想要干什么就可以了。下一步则是更加危险的 &lt;b&gt;驾驭冲动&lt;/b&gt; ，了解冲动的感觉，控制它，当然，这玩意很容易就变成没法控制了。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-10&quot;&gt;C10&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10&quot;&gt;

&lt;p&gt;   引用原文吧：
&lt;/p&gt;
&lt;p&gt;
   “如果说真的有自控力秘诀，那么从科学的角度来说确实有一个，那就是集中注意力”。
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>无聊的时候</title>
   <link href="http://qinjian623.github.com/2012/12/06/solidot_famous"/>
   <updated>2012-12-06T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/06/solidot_famous</id>
   <content type="html">&lt;p&gt;
本科刚开始就开看solidot了，多么有乐趣的一个网站，虽然一直潜水或者做懦夫以至于自己的账号都忘记了，自己估计应该已经有5年的读龄了。但是，这几天，她改版了。十分想吐槽那个界面，人家slashdot也没有变那么大呢。而且默认的那个屎蓝色的颜色，好丑好丑啊！！！我还是喜欢原来的那个她。。。。于是，这里的于是不代表逻辑联系，我就无聊的刷下面的名言看了。后来干脆wget抓了，本想循环的时候sleep 1一下，但是，其实也就取了1000次，而且用的自己的笔记本，肯定算不上DDOS，否则最先死的肯定是自己用了2年的本。然后去重，其实也就100多条，好失望啊，好失望，多点多好。。。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;内容如下：&lt;/b&gt;
          &lt;p class=&quot;famous&quot;&gt;640K对每一个人来说都已足够--比尔盖茨&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;在b进位制中，以数n起头的数出现的机率为logb(n + 1) − logb(n)--本福特定律&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;硬件:计算机系统中可被踢的部分。--Jeff Pesis&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;不要恐慌--《银河系漫游指南》&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;人人生而平等--美国独立宣言&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我讨厌星期一。--加菲猫&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;会玩的人才会学&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;国家是危险的机器--华盛顿&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;老大哥在看着你。--奥威尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;恐惧比利剑更伤人--《冰与火之歌》&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;任何人均有其价值&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;自由的保证是什么?是对自己不再感到羞耻。--尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;自由的保证是什么?是对自己不再感到羞耻。——尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我爱你，与你无关。--歌德&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;渴求美德而非奖赏。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;异议是爱国的最高形式 --托马斯·杰弗逊&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;人是天生的政治动物。--亚里士多德&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;活了一百年却只能记住30M字节是荒谬的。你知道，这比一张压缩盘还要少。人类境况正在变得日趋退。--Marvin Minsky&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;你自己的代码如果超过6个月不看，再看的时候也一样像是别人写--伊格尔森定律&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;喜爱孤独者，非神即兽。--亚里士多德&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;疑人先自疑，律人先律己&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;资讯是民主社会的流通货币--杰弗逊&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;实力永远意味着责任和危险。 -- 罗斯福. T.&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;管得最少，就是最好的政府。-- 大卫·梭罗&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;以眼还眼，世界只会更盲目。--甘地&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;尊重人不应该胜于尊重真理。--柏拉图&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;任何有可能出错的事将会出错--墨菲定理&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;你不问我，我就不会说谎话。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;善待他人，即是最善待自己。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;有两样重要产品出自伯克利：LSD和BSD*。我们不相信这是个巧合。--Jeremy S. Anderson&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;冬天已经到来，春天还会远吗？--雪莱&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;法律必须被信仰，否则形同虚设。--伯尔曼&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;要节约用水，尽量和女友一起洗澡--加菲猫&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;别向医生和律师提供错误的消息。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;哪里没有财产权，哪里就没有正义。--弗里德里克·哈耶克&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;财富并非供人拥有，而是供人享受。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;真理是时间之产物，而不是权威之产物 --弗兰西斯·培根&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;坚信比谎言更是真理的敌人。——尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;尊严不值钱，却是我唯一真正拥有的！&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;彼窃钩者诛，窃国者为诸侯。——庄子&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;不管民主的定义是什么，没有新闻自由， 民主本身就无法存在。--希尔斯曼&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;想了解一个人的个性，那就赋予他权力。--林肯&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;手段的不纯洁，必然导致目的的不纯洁。--甘地&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;战争即和平，自由即奴役，无知即力量。--奥威尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;计算机没什么用。他们只会告诉你答案。--毕加索&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;世间最庄严的问题是：我能做什么好事？&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;人民不应该怕政府，政府才应该怕人民。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;千里之行始于足下，九层之台起于垒土。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;实现明天理想的唯一障碍是今天的疑虑。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;工作撵跑三个魔鬼：无聊、堕落和贫穷。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;集体主义只不过是暴政的外衣。——莱辛&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;所谓自由就是可以说二加二等于四的自由。--奥威尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;以术治国，政以贿成，吏治日坏，民生多艰&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我们是微软。反抗是徒劳的。你会被同化的&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;把理想运用到真实的事物上，便有了文明。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;肚子大不可怕，可怕的是肚子里没有好东西。--加菲猫&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;对骄傲的人不要谦逊，对谦逊的人不要骄傲。--托玛斯·杰弗逊&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;国家是为人而建立，而人不是为国家而生存。--爱因斯坦&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;罗马帝国灭亡的其中一个主要原因是他们没有0 - 这样他们就没法给自己的C程序指明成功退出的路--Robert Firth&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;具有新想法的人在其想法实现之前是个怪人。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;自由只有为了自由的缘故才能被限制。——约翰 罗尔斯&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;爱国主义是一种有害的、精神错乱的白痴形式。--萧伯纳&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;一个从未犯错的人是因为他不曾尝试新鲜事物。--爱因斯坦 &lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;对他们伟大领袖的无情，是一个民族强大的表现--普鲁塔克&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;哪里没有财产权，哪里就没有正义。——哈耶克&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;通往地狱的路，都是由善意铺成的。——哈耶克&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;所有小说写的都是真事。怕吓着你们才叫小声说。 --王朔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我每天只吃四类食物：早饭、午饭、晚饭和零食。--加菲猫&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;谁控制过去就控制未来，谁控制现在就控制过去。--奥威尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;如果你怀疑自己，那么你的立足点确实不稳固了。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;谁能最恰当地评价一个人，他的敌人还是他自己？&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;所有动物生来平等，但有些动物比其他动物更平等。--奥威尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;自古至今，容忍的总是老百姓，被容忍的总是统治者--殷海光&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;自由意味着责任，正因为如此，多数人都惧怕自由。--萧伯纳&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;你在活着的同时，也在学习着，无论如何，你活着。--道格拉斯·亚当斯&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;什么都比不上厄运更能磨练人的德性。——莎士比亚&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;宗教上最深的误解——认为坏人没有宗教。——尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;爱国者的责任就是保护国家不受政府侵犯——托马斯·潘恩&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;大胆的假设，小心的求证；认真的做事，严肃的做人。 --胡适&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。 --老子&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;程序员的问题是你无法预料他在做什么，直到为时已晚--Seymour Cray&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;没有人足够完美，以至可以未经别人同意就支配别人。--林肯&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;计算机就跟比基尼一样，省去了人们许多的胡思乱想。--萨姆·尤因&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;所谓现实只不过是一个错觉，虽然这个错觉非常持久。--爱因斯坦 &lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;太阳绝不为它所做的善事后悔，也从不指望任何报酬。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;花代价所换来的一点才智，抵过别人传授的数倍不止。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;科学必须始于神话，并伴随着对神话的批判。——卡尔·波普尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;只有两种编程语言：一种是天天挨骂的，另一种是没人用--Bjarne Stroustrup&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;就算它工作不正常也别担心。如果一切正常，你早该失业了--Mosher的软件工程定律&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;若欲求长寿，生活须行善，因为蠢行和邪恶会把生命缩短。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;想想看吧，已经有一百万只猴子坐在一百万台打字机旁，可Usenet就是比不上莎士比。--Blair Houghton&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;真正的无知不是知识的缺乏，而是拒绝获取知识。——卡尔·波普尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;不要向邪恶低头，而是要更勇敢地继续与之对抗。——维吉尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;人们还往往把真理和错误混在一起去教人，而坚持的却是错误。--歌德&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;在这个世界上我只确定一件事。那就是人确定的事情越少越好。--毛姆&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;死会引人哭泣。虽则如此，人生的三分之一却在睡眠中打发掉了。--拜伦&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;发现可能性的界限的唯一办法就是越过这个界限，到不可能中去。--阿瑟·克拉克&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;一个人知道自己为什么而活，就可以忍受任何一种生活。——尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;爱国主义就是积极地为了微不足道的原因杀人并被杀。——勃特兰·罗素&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;每个人都受两种教育，一种来自别人，另一种更重要的是来自自己。--爱德华·吉本&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;工欲善其事，必先利其器。居是邦，事其大夫之贤者，友其士之仁者。 &lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;已经集中起来的权力不会由于创造它的那些人的良好愿望而变为无害。--弗里德曼&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;在民主和独裁的斗争中，纸上的宪法敌不过独裁者的刺刀。——林语堂&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;在人人自危的时代，他不应当因为选择了过不动感情的犬儒式的冷漠生活....不问世事的生活而受到责备....身为政府的批评者，一个人越是沉沦放荡，他就越无害；他越是无害，政府就越喜欢；政府越喜欢，他就越安全。——林语堂&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;如果你点燃了真理的烛光，追求真理的人们就能够发现你。——路德维希·冯·米塞斯&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;也许我是错而你是对，但只有我们一起努力，才能更接近真理。——卡尔·波普尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;爱国主义：一堆随时可以被任何野心家所点燃，去照亮他的名字的易燃垃圾。 ——安卜罗斯·皮尔斯&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;读古人的书，一方面要知道古人聪明到怎样，一方面也要知道古人傻到怎样。--胡适&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;首先他们无视于你，而后是嘲笑你，接着是批斗你，再来就是你的胜利之日。--甘地&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;人民大多数比我们想象的要蒙昧得多，所以宣传的本质就是坚持简单和重复。--戈培尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;在认识一切事物之后，人才能认识自己，因为事物仅仅是人的界限。——尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;为眼睛近视者指引道路是很费力的，因为你不能对他说：“看见十哩外的教堂吗?朝这个方向走。——维特根斯坦&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;一个有政治自由的国家固然不能说就是天堂，一个无政治自由的国家确是地狱了。--蒋廷黻&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我不像你一样是一个机器人，让磁盘把我淹没，除非它们是小甜饼，并且只在嘴里。&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;公安怎样公，猪公、狗公、乌龟公，公心何在？公理何存？每事假公图利禄；公局什么 局，酒局、肉局、大烟局，局内者欢，局外者苦，几时结局得安宁！&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;如果我们过于爽快地承认失败，就可能使自己发觉不了我们非常接近于正确。——卡尔·波普尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;世界上只有两个东西是无限的，一为宇宙，一为人类的愚蠢，我所不能肯定的乃是前者。 --爱因斯坦&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;百善孝为先，论心不论迹，论迹贫家无孝子；万恶淫为首，论迹不论心，论心世上少完人&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;成功的骗子，不必再说谎以求生，因为被骗的人，全成为他的拥护者，我再说什么也是枉然。--莎士比亚&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我向星星许了个愿。我并不是真的相信它，但是反正也是免费的，而且也没有证据证明它不灵。--加菲猫&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;身为一个中国人，最大的痛苦时忍受别人“推己及人”的次数，比世界上任何地方的人都要多。--王小波&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我认为低智，偏执，思想贫乏是最大的邪恶。而聪明，达观，多知的人，比之别样的人更堪信任。--王小波&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;与魔鬼战斗的人，应当小心自己不要成为魔鬼。当你远远凝视深渊时，深渊也在凝视你。——尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;专制制度下只有两种人：一种是哑子，一种是骗子。我看今天的中国就是少数骗子在统治多数哑子。--王亚南&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我注意过，即便是那些声称一切都是命中注定的而且我们无力改变的人，在过马路之前都会左右看。--史提芬·霍金&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;只要有了和平、低税收和宽容的司法当局，一个国家要达到最高富裕水平不需要其它东西。——亚当·斯密&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;如果你想走到高处，就要使用自己的两条腿！不要让别人把你抬到高处；不要坐在别人的背上和头上。 --尼采·F.W.&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;所谓爱国心，是指你既生为这个国家的国民，对于这个国家，当比对其他一切的国家信仰得高贵优越。--萧伯纳&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;明白事理的人使自己适应世界；不明事理的人想使世界适应自己。所以，所有进步都要靠不明事理的人。--萧伯纳&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;在所有的禁欲道德里，人把自己的一部分视为神，加以崇拜，因此被迫把其他部分加以恶魔化。——尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;民主不能从上面给予，而必须从下面争取而来——给予的东西可以收回，但争取来的东西却收不回。——方励之&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;一切拥有权力的人都有滥用权力为自己谋求私利的倾向；任何专制的国家的教育目的都是在极力降低国民的心智。 --孟德斯鸠&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;所谓科学的论辩，从总体上来说则是没有多大效果的，更不用说论辩几乎总是各持己见的这个事实。——弗洛伊德&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;与其被动地同意别人的看法，不如理智地表示反对，因为如果你信自己的智慧，那么你的异议正表明了更多的赞同。--罗素&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;评断一个国家的品格，不仅要看它培养了什么样的人民，还要看它的人民选择对什么样的人致敬，对什么样的人追怀。 --约翰·肯尼迪&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;不管我们已经观察到多少只白天鹅，都不能确立“所有天鹅皆为白色”的理论。只要看见一只黑天鹅就可以驳倒它。——卡尔·波普尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;想在善和恶中作造物主的人，必须首先是个破坏者，并砸烂一切价值。也就是说，最大的恶属于最高的善。不过，后者是创造性的善。--尼采&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;每一个帝国在即将建立的时候，都富于朝气，希望和成功的光芒；然而一旦皇帝登基，这一切都会荡然无存，留下的只有象征腐朽和无意义的各种仪式典礼。--《沙丘》&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;从前的愚民政策是不许人民受教育，现代愚民政策是只许人民受某一种教育。不受教育的人，因为不识字，上人的当，受教育的人，因为识了字，上印刷品的当。--钱钟书&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;自由不是一种达到更高政治目的的工具。它本身就是最高的政治目的。自由之需要并不是为了实现一种好的公共管理，而是为了保证对市民社会和个人生活最高目标的追求。--阿克顿&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;“为什么人可以安定地生活？”因为波函数可以坍缩。“折磨我的是什么？”是无法抗拒的命运。“为什么人不能舍弃希望？”因为波函数可以发散。“你是谁？”我是手儿奈。--《醉步男》&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;极权统治的实质就是消除一切自发的政治生活，把社会中的人分裂成一个个的原子，其目的在于使每个人只能孤立地面对整个制度，从而使人感到形单影只，而且往往茫然若失，敢怒不敢言。--米奇尼克&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;那些没有自尊的人仍然可以是爱国的，他们可以为少数牺牲多数。他们热爱他们坟墓的泥土，但他们对那种可以使他们的肉体生机勃勃的精神却毫无同情心。爱国主义是他们脑袋里的蛆。——亨利·大卫·梭罗&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;真理是伟大的，如果让她自行其道的话，必然会盛行于世。真理是谬误的强劲克星，她无所畏惧，所向无敌，惟有害怕人们解除她的天然武器——自由地论争和思辨；当批判被允许自由进行的时候，谬误也就没什么可怕了--托玛斯·杰弗逊&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;我们所需要的，不是天才，不是玩世不恭者，不是愤世嫉俗者，不是机敏的策略家，而是真挚的，坦诚的人。要使我们能够找到重返纯朴与真诚的道路，我们的精神包容量足够地充分，我们自身的正直足够地问心无愧了吗？--朋霍费尔&lt;/p&gt;
          &lt;p class=&quot;famous&quot;&gt;一个人能够洋洋得意地随著军乐队在四列纵队里行进，单凭这一点就足以使我对他轻视。他所以长了一个大脑，只是出于误会；单单一根脊髓就可满足他的全部需要了。文明国家的这种罪恶的渊薮，应当尽快加以消灭。由命令而产生的勇敢行为，毫无意义的暴行，以及在爱国主义名义下一切可恶的胡闹，所有这些都使我深恶痛绝。——爱因斯坦&lt;/p&gt;

&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>goagent</title>
   <link href="http://qinjian623.github.com/2012/12/06/goagent"/>
   <updated>2012-12-06T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/06/goagent</id>
   <content type="html">&lt;p&gt;
斯巴达那会儿，实在没法过，vpn连着没多长时间也要掉一下。但是想想也就那么半个月就结束了，忍忍就过去了，还是可以再回到之前的“相对”的自由和快乐的状态。但是，没想到，日子一天天过，也没见好转，算是明白了，我们又进入了一个新时代。忍不住又问候了方校长，还专门下了他挂名的那篇机器学习在流量检测分类的综述性质的论文，于是又边骂边读。
&lt;/p&gt;
&lt;p&gt;
不过生活要继续，于是开始转用goagent吧。要比vpn稳定点，每天1G流量，自己也用不完（除了周末有这个可能）。方法实在是简单明了，google code上都说的挺清楚。重新开用app engine，发现之前自己就有个proxy的应用荒废在那里了。。。
&lt;/p&gt;
&lt;p&gt;
国家我给跪美帝，企业我给跪Google，像国际电信联盟（ITU）这种垃圾组织，我觉得让他们吃屎都是委屈了屎。
&lt;/p&gt;
&lt;p&gt;
11.19号开始我的65天NO-SNS，今天已经27天了，发现自己NO-SNS多出来的时间都贡献给了电影了。- -!，这真是个讨厌的事实。
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to Get More From Life</title>
   <link href="http://qinjian623.github.com/2012/12/02/how_to_get_more_from_life"/>
   <updated>2012-12-02T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/12/02/how_to_get_more_from_life</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;说明：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;   来自于Scott Young的博客的一个PDF文件。Scott Young 就是那个一年学了一堆MIT在线课程的人。地址&lt;a href=&quot;http://www.scotthyoung.com/blog/&quot;&gt;http://www.scotthyoung.com/blog/&lt;/a&gt; 。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;内容摘要&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1&quot;&gt;C1 Life is a work in Progress&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1&quot;&gt;

&lt;p&gt;    没什么实质内容，讨论下价值观人生观，全世界各有各的不同。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2&quot;&gt;C2 Habits&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2&quot;&gt;

&lt;p&gt;    习惯当然很重要了，特别是好习惯的作用。所以要保持不断的修正自己的习惯。
&lt;/p&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-2-2-1&quot;&gt;how to&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;定义清楚习惯
&lt;/li&gt;
&lt;li&gt;严格执行30天
&lt;/li&gt;
&lt;li&gt;没把握就再执行90天
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接着就是几个链接，没看了。发现链接会越点越多。
列个清单，然后就每月一个一个的清场吧。  
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3&quot;&gt;C3 Learning&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3&quot;&gt;

&lt;ul&gt;
&lt;li id=&quot;sec-2-3-1&quot;&gt;School != Learning&lt;br/&gt;
     这个是当然了，特别是从兲朝一路走来的。
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-2-3-2&quot;&gt;作者的观点是T型人才，该实用性学习的就实用性，不用成为每个方面的master。&lt;br/&gt;
     换自己的话，还是“书宜杂读，业宜精钻”。旁边是一个有关T型人才学习的链接。这个算了吧，用了model这个词的&amp;hellip;.从本能上就知道，对个人基本没什么意义。
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-2-3-3&quot;&gt;学习方法上面&lt;br/&gt;
     还是注意联系旧知识。抽象的东西要形象化。注意知识点之间的联系，可以画图表示。
     当然还是老生长谈，他在译言上被翻译的一篇文章就是有关如何学习MIT的课程的。可以点那里看下，基本原则就是要注意整体的联系，不要迷失在细节上；多思考，用自己的语言表达，举一反三。

&lt;p&gt;
     其实自己也有方法论，基本也是这个原则，再加一条，“最好的学习方法就是教会别人。”还有要有笔记，别看现在自己学得欢，当心最后毛都没有，忘光光。能练习的，要有练习，光看书那是爽，什么都懂，回头看完了，再一问，白痴一样的，典型的没练习巩固的。某些东西，应试的方法是最好的。要是全面否定应试教育中的方法，那一定是naive，当然应试教育要全面否定。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li id=&quot;sec-2-3-4&quot;&gt;Speed Reading&lt;br/&gt;
     用手指，别默读，多练习，注意一点“要有goal”。读书也要注意不要光读functionality的，天知道某些长远意义的知识会在哪里用到。

&lt;p&gt;
自己的经验是，有些书真的是看看封面就可以的，有些看看标题就可以了，特别是很多书喜欢来个案例分析分析的，只要不是准备深入了解的，都可以扫一眼跳过了。但是专业书一类的，不是快餐书的，想快读也读不快的，当然自己熟悉的领域的复习性质的，可以扫扫就OK。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-4&quot;&gt;C4 Productivity&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-4&quot;&gt;

&lt;p&gt;    还是要有Goals，每天的、每周的，都要有。
&lt;/p&gt;
&lt;p&gt;
    然后要有Calendar，这个东西太多了，Google的、icloud的、emacs的，重要的还是集中用好一个。GTD的东西太多了。
&lt;/p&gt;
&lt;p&gt;
    同时还要注意log，基本就是类似《奇特的一生》了，org-mode就有这个功能。
&lt;/p&gt;
&lt;p&gt;    
    自己也要加一条，注意反馈。计划、行动、反馈、修正，这个得是个闭环啊。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-5&quot;&gt;C5 Social Success&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-5&quot;&gt;

&lt;p&gt;    提了两条，作者自己也知道很空洞，说着简单，做起来难：
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;Empathizing
&lt;/li&gt;
&lt;li&gt;Communicating yourself.
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
    然后是注意平衡问题。这对内向的人没意义，从来都是社交太少。
&lt;/p&gt;
&lt;p&gt;
个人的观点，为社交而社交纯属dt。还是从内而外的发自自然，读读心理书，当然，颜色心理学一类的就算了，针对个人的心理学估摸着都可以直接算作伪科学了，再读读哲学书，没事想想三个问题。有了自我才有社交的意义，否则社交干嘛啊，当然business is business，那真也算不上社交，那玩意叫做搞关系。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-6&quot;&gt;C6 Fitness&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-6&quot;&gt;

&lt;p&gt;    保持健身，作者是素食主义，在这点上，没有肉真的对我是生不如死。不过自己也没有什么暴饮暴食的，注意控制和平衡饮食，其实素不素食倒不是关键。
&lt;/p&gt;
&lt;p&gt;    
    注意定下目标，有氧的、力量的。作者建议是：30天的习惯化；多尝试,找到自己喜欢的，什么合适就算了，所谓的“合适”其实就是自己喜欢的，不喜欢的还坚持，自虐的名额还是留在其他方面上，这里重要的不是类型，是坚持；找个伴，这不光健身什么的有用，其他方面也有用。
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-7&quot;&gt;C7 Entrepreneurship and Finding Your Passion&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-7&quot;&gt;

&lt;p&gt;    这基本就是Follow your heart。每个人每个人的不同。Life’s Too Short to Do Shit You Hate。
&lt;/p&gt;
&lt;p&gt;    
    作者又弄了一个概念Know Your Poverty Threshold，意义就是，怎样平衡生活水平和自己爱做的事情。做自己喜欢的事情，穷点也没关系，饿不死就可以。
&lt;/p&gt;
&lt;p&gt;    
    注意激情没有那么夸张，很平常的东西被人捧得太高了。
&lt;/p&gt;
&lt;p&gt;    
    还有业余的创业，这个不如看《Rework》。个人感觉创业也别捧得太高，就是自己觉得这里有的赚，来玩玩，或者自己觉得这里好玩，于是来赚赚，改变人类进步固然是好事，不过一群创业者们哪有都改变人类的，某些说不定就直接是盯着钱看的，那种就更不用顶个大帽子了，神圣化创业实在没好处，挖坑让人跳，始作俑者啊。
&lt;/p&gt;
&lt;p&gt;
然后作者就是提出要多实践，从小做起，脚踏实地。也是老道理，没事就仰望仰望星空，然后该干吗就去干吗吧。知行合一，知行合一啊。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-8&quot;&gt;C8 Motivation, Confidence and Happiness&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-8&quot;&gt;

&lt;p&gt;    Motivation就直接摘原文吧，简而言之就是找到一个自己喜欢的，然后坚持坚持再坚持。
&lt;/p&gt;


It’s actually ridiculously easy. If you want to motivate yourself, spend 30-60 minutes brainstorming what you want from life and the action steps you need to take immediately to get there. If you aren’t motivated after a half-hour, you’ve done it wrong.
Patience, persistence and sweating out the work in soul-crushing moments of doubt and fatigue are the difficult part. I don’t admire the person who got started. I admire the person who showed up, every day, for years, without fail.

&lt;p&gt;
自信来源于经验，其实吧，自信基本都是盲目的，天知道经验能不能现用，多少人死在自己的经验上，对于现实这样的一个复杂系统来说，实在没什么解法。当然，没做过，说不定反而能做成。不过我们考虑下先验概率的话，有经验的，当然要更不盲目的自信点。
&lt;/p&gt;
&lt;p&gt;
有关 Happiness那就是，人生不如十有八九，这是当然，哪有天天都得意的，点正的少数派就算了吧。何况这种主观判断的东西，你觉得不如意，别人反而觉得如意。保持心情的稳定，inner peace，要淡定。当然，这也要和自我有关系，没有自我的人，你让他淡定最后也是蛋疼。
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-9&quot;&gt;C9 The Meaning of Life&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-9&quot;&gt;

&lt;p&gt;    这就不记了，看下别人的meaning of life，然后再看看自己的，作为自省的一个机会就可以了。要保持自省&amp;hellip;&amp;hellip;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>数独问题解决方法</title>
   <link href="http://qinjian623.github.com/2012/11/15/sudoku_puzzle"/>
   <updated>2012-11-15T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/11/15/sudoku_puzzle</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;我的说明&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;   自己好几年之前无聊的时候写解数独程序的时候看的,原以为到现在还没人翻译成中文版的,搜了搜,果然已经有了.
   自己用的约束传递的方法,不过当时还不知道这个名词,结果发现有缺陷,于是又考虑的在约束传递基础上暴力解决,其实吧,就是后面的搜索,但是感觉暴力太难看,就搜网上的方法,于是就看到了这篇文章,但是当时写完约束传递已经过了热情期了,扔那不管了,果然编程语言很重要.只要不是确实有限制,性能问题还是扔一边吧.好的算法可以弥补性能问题,快速解决问题多好.
   英文原版来自Google的&lt;a href=&quot;http://en.wikipedia.org/wiki/Peter_Norvig&quot;&gt;Peter Norvig&lt;/a&gt; 的 &lt;a href=&quot;http://www.norvig.com/&quot;&gt;blog&lt;/a&gt;，中文版本转自 &lt;a href=&quot;http://shenlizhu.blogspot.com/2007/10/solving-every-sudoku-puzzle.html&quot;&gt;Shenli's Blog&lt;/a&gt; ，与英文原文有出入，可能是版本原因，在此基础上根据原文做了修正。&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
   文中译后记的拼写检查器的中文地址:&lt;a href=&quot;http://blog.youxu.info/spell-correct.html&quot;&gt;http://blog.youxu.info/spell-correct.html&lt;/a&gt; 
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;Solving Every Sudoku Puzzle&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;   by Peter Norvig
&lt;/p&gt;
&lt;p&gt;   
   在这篇文章里，我将提出一种数独(Sudoku)迷题的通用解法。它看上去相当简单（大约100行代码），并采用了两个思想：约束传递（&lt;a href=&quot;http://en.wikipedia.org/wiki/Constraint_satisfaction&quot;&gt;constraint propagation&lt;/a&gt;）和搜索（&lt;a href=&quot;http://en.wikipedia.org/wiki/Search_algorithm&quot;&gt;search&lt;/a&gt;）。
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1&quot;&gt;迷题设定&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1&quot;&gt;

&lt;p&gt;    首先，我们要确定一些符号的名称。数独问题是由91个方块组成的 &lt;i&gt;grid&lt;/i&gt; 。但大多数人喜欢行用A-I标记，列用1-9标记，将9个方块(squares)的集合（是这个方块所处的一行，一列，和3x3方块组成的区（box））称为一个unit，并将其他在同一个unit里面的方块称为这个方块的peers。所以，可以这样来命名方块：
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt; A1 A2 A3 A4 A5 A6 A7 A8 A9
 B1 B2 B3 B4 B5 B6 B7 B8 B9
 C1 C2 C3 C4 C5 C6 C7 C8 C9
---------+---------+---------
 D1 D2 D3 D4 D5 D6 D7 D8 D9
 E1 E2 E3 E4 E5 E6 E7 E8 E9
 F1 F2 F3 F4 F5 F6 F7 F8 F9
---------+---------+---------
 G1 G2 G3 G4 G5 G6 G7 G8 G9
 H1 H2 H3 H4 H5 H6 H7 H8 H9
 I1 I2 I3 I4 I5 I6 I7 I8 I9
&lt;/pre&gt;


&lt;p&gt;
（译者注：在这篇文章里，将数独里的最小单位称为方块square，3x3方块称为区box，9x9方块称为数独盘面Sudoku board,，游戏规则和中文命名看&lt;a href=&quot;http://www.sudoku.name/rules/cn&quot;&gt;这里&lt;/a&gt;）。
&lt;/p&gt;
&lt;p&gt;
我们可以在编程语言Python里实现这些：
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;def cross(A, B):
    return [a+b for a in A for b in B]

rows = 'ABCDEFGHI'
cols = '123456789'
digits   = '123456789'
squares  = cross(rows, cols)
unitlist = ([cross(rows, c) for c in cols] +
            [cross(r, cols) for r in rows] +
            [cross(rs, cs) for rs in ('ABC','DEF','GHI') for cs in ('123','456','789')])
units = dict((s, [u for u in unitlist if s in u])
             for s in squares)
peers = dict((s, set(s2 for u in units[s] for s2 in u if s2 != s))
             for s in squares)
&lt;/pre&gt;



&lt;p&gt;
现在，A1的units和peers可以定义为：
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;&amp;gt;&amp;gt;&amp;gt; units['A1']
[['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1'],
 ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9'],
 ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']]
&amp;gt;&amp;gt;&amp;gt; peers['A1']
set(['A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9',
     'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1',
     'B2', 'B3', 'C2', 'C3'])
&lt;/pre&gt;


&lt;p&gt;
简而言之，方块A1有三个unit: 列1，行A，以及左上角区。方块A1有20个peers（行上8个，列上8个，区里且不包括行和列上4个）。所有其他的方块有同样数目的unit和peer。
&lt;/p&gt;
&lt;p&gt;
接下来是设计数独盘面。像符号一样，在初始盘面上也没有统一的规定，但是一个较好的折中（common denominator）是一串字符，如1-9代表数字，0或句号或破折号代表空方块（但是在一些符号命名中，破折号被用于分隔区，而不是标记空方块）。空格以及其它的字符要被忽略。我们将这样的一个字符串称为grid。
&lt;/p&gt;
&lt;p&gt;
我们想要向一个容易操作的数据结构读入这样一个字符串。有人可能认为一个9x9的矩阵是正确的数据结构。由于我们决定用像A1这样字符来标记方块，而不是用[0,0]，所以我们如果希望改用二维数组的话只能改符号标记了。并且，Python不直接支持二维数组（它支持数组的数组），但是它却支持像带有键A1那样的字典dictionaries（hash tables），所以我们将用dict来代表数独盘面。这个dict的键是方块的序号（如A1），而每一个键对应的值是这个方块的所有可能值。而如何来表示这样一个数字集合呢？我们可以用Python内置的set或list，但是我选择这些数字的字符串（我们将在下面看到为什么要这么做）。例如，表示将7填入方块A1，而A2为空，我们可以用一个dict[‘A1’ : 7, ‘A2’ : ‘123456789’, …]。
&lt;/p&gt;
&lt;p&gt;
以下是将一个grid读入dict的程序:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;def parse_grid(grid):
    &quot;Given a string of 81 digits (or . or 0 or -), return a dict of {cell:values}&quot;
    grid = [c for c in grid if c in '0.-123456789']
    values = dict((s, digits) for s in squares) ## To start, every square can be any digit
    for s,d in zip(squares, grid):
        if d in digits and not assign(values, s, d):
     return False
    return values
&lt;/pre&gt;



&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;约束传递&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;   函数parse&lt;sub&gt;grid调用assign&lt;/sub&gt;(values,s,d)来将数字d赋予方块s的值。所以，我们希望以values[s]=d来结束，但是我们还是想要用一些其他的方法来改变values。特别是我们希望在s的peers里消除所有可能的d。如果消除d导致其中的一个peer变成一种可能（译者注：即只有一个数字），我们称之为d2，那么我们希望从这个peer的peer消除所有可能的d2，（译者注：这里好像和代码有些出入？，代码里是消除d导致方块s的值变成一种可能），等等。以上被称为约束传递(constraint propagation)：将某个约束置于一个方块之上会引发蝴蝶效应，即将更多的约束递推到了其它方块上。
&lt;/p&gt;
&lt;p&gt;
   这里还有第二种约束传递。比如说我们刚刚将6从方块A1的所有可能值中消去。而假如我们看到包含A1的第一个unit里面所有的方块里，只有C1将6作为它的可能值。我们可以将6赋给C1。所以我们需要两个函数：assign(values,s,d) 和eliminate(values,s,d)，它们会互相调用来实现约束传递（我们将这种函数称为mutually recusive）。虽然不是很明显，但是我们有可能会犯一个错误：我们会试图将一个不符合数独规则的数赋给方块。在这种情况下，我们希望assign()和eliminate()返回False来指示错误。在通常情况下，每一个函数都会用传递来的约束稍稍改变一下数值，然后返回给另一个函数。以下是实现代码：
&lt;/p&gt;




&lt;pre class=&quot;example&quot;&gt;def assign(values, s, d):
    &quot;Eliminate all the other values (except d) from values[s] and propagate.&quot;
    if all(eliminate(values, s, d2) for d2 in values[s] if d2 != d):
        return values
    else:
        return False






def eliminate(values, s, d):
    &quot;Eliminate d from values[s]; propagate when values or places &amp;lt;= 2.&quot;
    if d not in values[s]:
        return values ## Already eliminated
    values[s] = values[s].replace(d,'')
    if len(values[s]) == 0:
        return False ## Contradiction: removed last value
    elif len(values[s]) == 1:
        ## If there is only one value (d2) left in square, remove it from peers
        d2, = values[s]
        if not all(eliminate(values, s2, d2) for s2 in peers[s]):
            return False
    ## Now check the places where d appears in the units of s
    for u in units[s]:
        dplaces = [s for s in u if d in values[s]]
        if len(dplaces) == 0:
            return False
        elif len(dplaces) == 1:
            # d can only be in one place in unit; assign it there
            if not assign(values, dplaces[0], d):
                return False
    return values

&lt;/pre&gt;


&lt;p&gt;
   这里有一种有用的设计模式，好像从没有人提过。这个模式是：
&lt;/p&gt;
&lt;p&gt;
   如果你有两个mutually-recursive的函数分别影响一个对象的状态，请试着将所有的功能代码移到其中一个函数去。否则，你最后会发现有许多重复代码。
&lt;/p&gt;
&lt;p&gt;
   我是在许多年的Lisp编程后发现这个设计模式的，在Lisp里mutually-recursive函数很常见。看看我们怎么样在这个问题里应用这个模式：有人会认为assign()将包含赋值语句values[s]=d，而且会包含传递约束。你可以试着写这样一个函数。我想，你最后会发现你是在重复eliminate()里的代码。所以为了避免绕这么个弯子，我推论assign()函数做的就是消去方块s里除了d以外所有的数字，所以我将所有的功能代码写到了eliminate()里。
&lt;/p&gt;
&lt;p&gt;
   在我们探索更远之前，我们需要能够检验一下数独盘面的状态。以下就是printboard()的代码：
&lt;/p&gt;




&lt;pre class=&quot;example&quot;&gt;def printboard(values):
    &quot;Used for debugging.&quot;
    width = 1+max(len(values[s]) for s in squares)
    line = '\n' + '+'.join(['-'*(width*3)]*3)
    for r in rows:
        print ''.join(values[r+c].center(width)+(c in '36' and '' or '')
                      for c in cols) + (r in 'CF' and line or '')
    print
&lt;/pre&gt;


&lt;p&gt;
   现在我们可以开始解题了。我选了&lt;a href=&quot;http://mathschallenge.net/project/sudoku.txt&quot;&gt;easy puzzles&lt;/a&gt;上的第一个问题，试了一下：
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;&amp;gt;&amp;gt;&amp;gt; grid = &quot;&quot;&quot;
003020600
900305001
001806400
008102900
700000008
006708200
002609500
800203009
005010300&quot;&quot;&quot;

&amp;gt;&amp;gt;&amp;gt; printboard(parse_grid(grid))
4 8 3 9 2 1 6 5 7
9 6 7 3 4 5 8 2 1
2 5 1 8 7 6 4 9 3
------+------+------
5 4 8 1 3 2 9 7 6
7 2 9 5 6 4 1 3 8
1 3 6 7 9 8 2 4 5
------+------+------
3 7 2 6 8 9 5 1 4
8 1 4 2 5 3 7 6 9
6 9 5 4 1 7 3 8 2
&lt;/pre&gt;


&lt;p&gt;
在这个例子里，这个数独迷题完全被我们的约束传递解开了！只是通过赋予32个方块值，我们简单的约束传递规则就把剩下来的所有方块都填满了。但是，不是所有的题都是这么容易。接下来是&lt;a href=&quot;http://magictour.free.fr/top95&quot;&gt;hard puzzles&lt;/a&gt;里的第一个问题:
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;&amp;gt;&amp;gt;&amp;gt; grid = '4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......'

&amp;gt;&amp;gt;&amp;gt; printboard(parse_grid(grid))
   4      1679   12679    139     2369    269      8      1239     5
 26789     3    1256789  14589   24569   245689  12679    1249   124679
  2689   15689   125689    7     234569  245689  12369   12349   123469
------------------------+------------------------+------------------------
  3789     2     15789    3459   34579    4579   13579     6     13789
  3679   15679   15679    359      8     25679     4     12359   12379
 36789     4     56789    359      1     25679   23579   23589   23789
------------------------+------------------------+------------------------
  289      89     289      6      459      3      1259     7     12489
   5      6789     3       2      479      1       69     489     4689
   1      6789     4      589     579     5789   23569   23589   23689
&lt;/pre&gt;


&lt;p&gt;
在这个例子里，我们离解出这个问题还差得很远。我们开始只有17个方块填了数字（这被认为是最少的可以达到唯一解的数目），在约束传递之后，只有3个方块被解了出来（虽然所有的方块都被消去了一些可能值）。
&lt;/p&gt;
&lt;p&gt;
我们接下来要怎么做呢？我们可以尝试一些更加复杂的约束传递技巧，就像这里说的。比如说naked pairs技巧寻找在同一个unit里的两个方块，它们有两个相同的可能值。假设A1和A4都有2和6的可能值。我们可以推论2和6一定在A1和A4里（虽然我们不知道究竟哪个在哪个里面），而且我们可以将2和6从这个A行unit里面的其它方块里面消去。我们可以仅仅在在代码里加上几行，比如elif len(values[s]) == 2来实现这个功能。
&lt;/p&gt;
&lt;p&gt;
类似的代码技巧是可行的，但是会导致代码量的膨胀（大概有二三十种技巧），而且我们永远不会知道我们是否能依靠这些技巧解出所有迷题。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4&quot;&gt;搜索&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;   另一条路是通过搜索来得到答案：全面尝试所有的可能性知道我们恰巧得到一个可行的解答。这种方法的代码时候很少的几行，但是我们会面临另一个问题：有可能永远也算不完。让我们回到上面提到的hard puzzle，A2有4种可能（1679），A3有5种可能（12679）；那么现在一共有20种可能，如果我们连乘下去，对于这个迷题，我们会得到462838344192000000000000000000000000000 (或大约 4 ×10&lt;sup&gt;38&lt;/sup&gt;)种可能。你肯定吗？一定确定以及肯定，这里有61个待解开的方块，并且每一个这种方块都有4或5种可能。而且，事实上4&lt;sup&gt;61&amp;lt&lt;/sup&gt;;4x10&lt;sup&gt;38&amp;lt&lt;/sup&gt;;5&lt;sup&gt;61。我们怎么来对付它呢？看来有两种选择。&amp;gt&lt;/sup&gt;;首先，我们可以尝试蛮力法(brute force)。假设我们有一个非常智能的搜索算法可以用一条指令估计一个位置，而且我们有下一代的计算技术，就假设是一中1024核的10GHz处理器，我们买了一百万颗这样的处理器，当我们在购物的同时，还买了一台时间机器，帮助我们回到开天辟地的时候，让这个代码跑起来。就这道题目直到现在，我们大概可以计算过大概1%的可能值。
&lt;/p&gt;

&lt;p&gt;
   第二种选择是用某种方法使得每条机器指令处理估计一种以上的可能。这看起来不太可能，而幸运的是这种方法就是约束传递所作的。我们不用试过所有4 x 10&lt;sup&gt;38种可能，因为我们只要试过一种，马上就可以消去很大一部分的可能值。例如，方块H7有两种可能，6和9。我们可以试试9，很快会发现有一个冲突，这意味着我们不仅消去了一种可能，而是4&lt;/sup&gt; x 10&lt;sup&gt;38种可能的一半。&lt;/sup&gt;
&lt;/p&gt;
&lt;p&gt;
   事实上，在解这个问题的时候我们只需要试25种可能值和9个方块（一共61个待解方块）；而约束传递解决了剩下来的问题。对于剩下来的95个hard puzzles，我们平均需要试64种可能值和不超过16个方块。
&lt;/p&gt;

&lt;p&gt;
   那什么是搜索算法呢？简单：先确定我们是不是已经得到结论了或者存在冲突，如果都不是，再选择一个待解方块并尝试它所有的可能值。一次一个，尝试给每一个方块赋所有的可能值，并且从已知的盘面开始搜索。换言之，我们搜索一个值d，使得我们可以成功的从将d赋值给方块中解出需要的解。这就是recursive search，我们将它称为depth-first搜索，因为我们（递归地）考虑values[s]=d是中所有，之后再考虑方块s的其它可能值。
&lt;/p&gt;
&lt;p&gt;
   为了防止bookkeeping nightmares，我们为每一次search递归调用复制一个新的拷贝。（译者注：bookkeeping nightmare不太理解，可能和实参形参有关）这样一来search tree的每一个branch都是独立的，不会相互干扰。（作者注：这就是为什么我选择将一个方块的可能值的集合设计成一个字符串’：我可以用简单有效的values.copy()来复制拷贝。而假如我用Python的set或list来实现这个可能值的集合，我不得不用copy.deepcopy(values)，而这个方法效率比较低。）另一种方法是保持values每一次改变的值，当我们碰到一次False的时候就将改变前的值恢复出来。这被称为backtracking search。这种方法在每一步都是单个改变（single change）的时候才有意义，而在我们的迷题的算法中有许多改变都来自于约束传递，这样的技巧会将我们引入复杂的泥潭。
&lt;/p&gt;
&lt;p&gt;
   所以，余下来的问题就是如何在搜索的每一步选择一个方块s来赋值。让我们回到上面的hard puzzle，假设我们选择B3，它有7种可能值（1256789），所以我们猜错的可能性是6/7。而，如果我们选择H7，它只有2种可能值（69），我们猜错的可能性是1/2。很明显，选择H7会更可能将我们引导到正确的答案，所以我们总是选择有最少可能值（或者其中一个）的待解方块s。
&lt;/p&gt;
&lt;p&gt;
   现在我们可以实现search函数了：
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;def search(values):
    &quot;Using depth-first search and propagation, try all possible values.&quot;
    if values is False:
        return False ## Failed earlier
    if all(len(values[s]) == 1 for s in squares):
        return values ## Solved!
    ## Chose the unfilled square s with the fewest possibilities
    _,s = min((len(values[s]), s) for s in squares if len(values[s]) &amp;gt; 1)
    return some(search(assign(values.copy(), s, d))
                for d in values[s])
&lt;/pre&gt;

&lt;p&gt;
   终于完成了！我们现在可以在理论上解决所有的数独迷题。在实际应用中，hard puzzles上的95个难题，我们的程序以每秒钟8个难题的速度解决；easy puzzle的容易题则是每秒钟30个。（假如我为了执行效率改写程序，这个程序可以快10倍，但是代码长度会增长到2到5倍。）然而，是否有可能存在这样一个迷题，我们的程序会用极长的时间去解它；我想这是不存在的。在零点几秒的时间里，这个程序可以解决全空数独迷题（81个未解方块），以及我在hardest sudoku上看到的五个迷题。特别的是，有一篇新文章描述了芬兰数学家Arto Inkala所说的“史上最难的数独迷题”；我的程序只用了0.013秒就解出来了（大约超过300次尝试）。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5&quot;&gt;结论&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5&quot;&gt;

&lt;p&gt;   你可以在这里看到Python源代码（100行），或者95个hard puzzle迷题的输出结果（1140行）。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6&quot;&gt;译后记&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6&quot;&gt;

&lt;p&gt;   读Peter Norvig的文章和代码，有如沐春风的感觉。另一篇”Spell Corrector”也值得一读，在Norvig的网站上，已有中文翻译。
   Peter Norvig，现在是Google的技术主管。在UCB期间，合著影响广泛的“Modern AI”。
&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 其实没多少修正,有空无聊的时候就修补修补,或者就这样.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Baking Pi - Operating Systems Development Lesson 2</title>
   <link href="http://qinjian623.github.com/2012/10/25/baking_pi_l2"/>
   <updated>2012-10-25T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/10/25/baking_pi_l2</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;课时2 OK02&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
这个课时以上一个课时为基础，让'OK' LED灯能够反复的开关。本课时的前提是你已经有了前一课的&lt;a href=&quot;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/ok01.html&quot;&gt;代码&lt;/a&gt; 作为基础。
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;等待&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;


&lt;p&gt;
等待是操作系统开发中很有使用价值的一件事情。操作系统经常会发现自己无事可做，这样就只能等待新的任务。在这个例子中，我们希望通过重复开关LED来展示操作系统空闲的时候。因为如果你知识简单的关闭和开启LED，往往没法展示出来目前的状态，因为计算机可以让这个LED每秒开关上千次。后续的课程中，我们会有精确的等待，目前，简单的就这么单纯的耗费时间就足够了。
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;mov r2,#0x3F0000
wait1$:
sub r2,#1
cmp r2,#0
bne wait1$
&lt;/pre&gt;


&lt;p&gt;
上面的代码是一般来用于实现一个延时的代码，由于 Raspberry Pi 的结构基本相同，这个代码基本上可以产生一个相同的延时。使用方法就是，使用一个 &lt;b&gt;mov&lt;/b&gt; 指令将 3F0000&lt;sub&gt;16&lt;/sub&gt; 放入寄存器 &lt;b&gt;r2&lt;/b&gt; 中，然后一直减1到0为止。 这里接触的几个新指令是 &lt;b&gt;sub&lt;/b&gt; ， &lt;b&gt;cmp&lt;/b&gt; 和 &lt;b&gt;bne&lt;/b&gt; .
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;sub&lt;/b&gt; 就是减法指令，将第二个参数上的数值从第一个参数上减去。
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;cmp&lt;/b&gt; 是一个比较有趣的指令。它把第一个和第二个参数的值进行比较，然后把比较结果放在一个特定的寄存器上，这个寄存器叫做当前处理器状态寄存器（current processor status register）.不用考虑太多，简要说就是把两个数值的比较结果记录下来，孰大孰小或者还是相等&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;bne&lt;/b&gt; 这个就是一个分支指令。在ARM的汇编语言里面，所有的指令都可以更具条件分支执行。也就是说，这个指令只有当之前的一个比较指令有结果的时候才会执行。之后的内容会经常用到这一指令来实现一些有趣的技巧。在这里，我们使用 &lt;b&gt;ne&lt;/b&gt; 后缀的 &lt;b&gt;b&lt;/b&gt; 指令，意思是只有最后的比较不是相等的情况下才执行。 &lt;b&gt;ne&lt;/b&gt; 前缀可以用在所有的指令上，类似的还有16个条件，比如 &lt;b&gt;eq&lt;/b&gt; 代表相等。 &lt;b&gt;lt&lt;/b&gt; 代表小于。
&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;合而为一&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;


&lt;p&gt;
上节课中提到过，LED灯可以通过向GPIO控制器的28偏移量写入数据来关闭（代码就是 &lt;b&gt;str r1, [r0,#28]&lt;/b&gt; ）.所以你得修改一下代码，先打开LED灯，等待，关闭，再等待，然后从头开始新的循环。GPIO 16的操作只需要一次，不用每次开关都操作。其实如果你想试试，可以重用 &lt;b&gt;r1&lt;/b&gt; 的值。在&lt;a href=&quot;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/downloads.html&quot;&gt;下载&lt;/a&gt; 页面都可以找到所有课程的代码。要注意代码的标签要唯一。比如，一旦你用过了 &lt;b&gt;wait1$&lt;/b&gt; ,那么其他地方就不能用了。
&lt;/p&gt;
&lt;p&gt;
在我的 Raspberry Pi上差不多每秒闪动两次。时间可以通过修改 &lt;b&gt;r2&lt;/b&gt;  的值来灵活调整。不过，具体的运行时间是没法预测的。要是工作不正常的话，请查看下 trouble shooting 页面吧。如果正常工作，那么恭喜你。
&lt;/p&gt;
&lt;p&gt;
在这节课中，我们学习了两个新的汇编指令， &lt;b&gt;sub&lt;/b&gt; 和 &lt;b&gt;cmp&lt;/b&gt; ，还有ARM上的条件执行。
下节课中，Lesson 3: OK03 会讨论下通过良好的代码和严格的规范来提高代码的复用，可能会用上c和c++代码。
&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 要是看到这了，估计你确实想了解的更加深入点。CPSR是一个32位的寄存器，有更多个独立的bit位组成。有代表正负数或者是零的bit位。cmp执行的时候，就拿第二个参数去减第一个，记录下来结果的正负。零就代表相等，正数就代表 a &amp;gt; b,负数就代表小于。还有其他很多的比较方法，不过cmp是最直观的一个了。
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction for non-cs.</title>
   <link href="http://qinjian623.github.com/2012/09/13/for_non_cs_intro"/>
   <updated>2012-09-13T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/09/13/for_non_cs_intro</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;给非计算机专业的介绍性文章&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;



&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;简单说明:&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;


&lt;p&gt;
本文的原文位置在
&lt;a href=&quot;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/introduction.html&quot;&gt;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/introduction.html&lt;/a&gt; 
作者发布的版权为&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/3.0/deed.en_GB&quot;&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;,本文同样以以上协议发布,相对原文有部分演绎.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;操作系统&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;

&lt;p&gt;操作系统是一种复杂的程序,用来管理一台计算机上的各个程序,比如说分配计算
机的CPU时间片&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;,内存资源,其他的硬件资源等等.主流的桌面操作系统一般包括
GNU/Linux&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.2&quot; href=&quot;#fn-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.3&quot; href=&quot;#fn-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, Mac OS X&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.4&quot; href=&quot;#fn-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;和微软的Windows.其他的一些设备也是需要操
作系统的,比如手机就会使用Android&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.5&quot; href=&quot;#fn-.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, iOS和Windows Phone这类的系
统.&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.6&quot; href=&quot;#fn-.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.7&quot; href=&quot;#fn-.7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;
由于操作系统直接与计算机的硬件交互,所以它需要知道具体硬件的一些信息.为了
方便操作系统可以广泛的应用在各种计算机上, &lt;b&gt;驱动&lt;/b&gt; 的概念被引入.驱动的作用
就是为了使操作系统可以方便的与一个特定的硬件设备进行通讯, 它也是一段代码,但
是可以很容易的加入或者移出操作系统.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;汇编代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;

&lt;p&gt;汇编代码的特点就是十分接近计算机硬件层,易于被机器所&quot;理解&quot;&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.8&quot; href=&quot;#fn-.8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;.计算机的
工作是通过处理器和内存来实现的,处理器可以做一些数字的加减法这类的简单工
作,内存则负责存储这些数字.计算机通电后,处理器就通过执行程序员交给它的指
令来改变内存中的数字和与硬件交互.汇编代码就是这些指令被翻译成方便人类读
取的形式&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.9&quot; href=&quot;#fn-.9&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;
&lt;p&gt;
一般编程,程序员都会使用一门编程语言,譬如C++,Java,C#,Basic等等.之后再调用
编译器将这些由程序员编写的代码翻译成为汇编代码,之后会再进一步翻译成为二
进制代码&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.10&quot; href=&quot;#fn-.10&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;.二进制代码是计算机实际能够理解的语言,只不过实在不适合人类
阅读&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.11&quot; href=&quot;#fn-.11&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;.汇编代码就相对易读,但是供程序员使用的指令也依然很少. 请谨记
每个使用汇编代码编写的指令,都是计算机可以直接理解的,因此这些指令是受下层
硬件决定的,每个指令都会被实际上的电路直接使用.
&lt;/p&gt;
&lt;p&gt;
[图片占位符]
&lt;/p&gt;
&lt;p&gt;
和一般的上层编程一样,汇编语言也有多种.当然,多样的原因不是像上层语言&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.12&quot; href=&quot;#fn-.12&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;那样,
而是因为世界上存在多种不同的处理器&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.13&quot; href=&quot;#fn-.13&quot;&gt;13&lt;/a&gt;&lt;/sup&gt;,每种处理器往往都设计成理解某一个语言.因
此,一个程序员如果用汇编语言给一个机器编写程序,那么不同类的机器就不能够使
用这一程序.一般而言,这种每个不同架构都需要重新编写程序的情况实在是个大灾
难&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.14&quot; href=&quot;#fn-.14&quot;&gt;14&lt;/a&gt;&lt;/sup&gt;,不过对于操作系统来说,这就无所谓了,因为它本身就要为不同的硬件重新编写.不
过,不是操作系统的所有部分都需要重写,因为操作系统的大部分也是由c++或者c语
言这种上层语言来编写,以方便转化到不同的架构上,需要重写的只是那些必须通过
汇编语言来实现的部分.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;再提几个CS历史上的有意思的人物:&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;图灵&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;

&lt;p&gt;wiki地址:&lt;a href=&quot;http://zh.wikipedia.org/wiki/艾伦·图灵&quot;&gt;http://zh.wikipedia.org/wiki/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5&lt;/a&gt; 
&lt;/p&gt;
&lt;p&gt;
八卦点在于其男同性恋取向.09年,英国政府才对政府当年针对其同性恋的迫害道歉.提
出了图灵机.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;约翰·冯·诺伊曼&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;

&lt;p&gt;wiki地址:&lt;a href=&quot;http://zh.wikipedia.org/wiki/约翰·冯·诺伊曼&quot;&gt;http://zh.wikipedia.org/wiki/%E7%BA%A6%E7%BF%B0%C2%B7%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC&lt;/a&gt; 
&lt;/p&gt;
&lt;p&gt;
现代计算机组成结构的提出者.同时还对量子力学有重要贡献.(数学家真的是万能的)
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-3&quot;&gt;阿隆佐·邱奇&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-3&quot;&gt;

&lt;p&gt;wiki地址:&lt;a href=&quot;http://zh.wikipedia.org/wiki/阿隆佐·邱奇&quot;&gt;http://zh.wikipedia.org/wiki/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
图灵的导师,lambda演算的提出者,这一系统被证明和图灵机等价,函数式编程的基
础.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-4&quot;&gt;约翰·麦卡锡&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-4&quot;&gt;

&lt;p&gt;wiki地址:&lt;a href=&quot;http://zh.wikipedia.org/wiki/约翰·麦卡锡&quot;&gt;http://zh.wikipedia.org/wiki/%E7%BA%A6%E7%BF%B0%C2%B7%E9%BA%A6%E5%8D%A1%E9%94%A1&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
人工智能概念的提出者,函数式编程语言Lisp的发明人.LISP语言也是emacs编辑器
的配置语言.可以说是括号最多的一门语言.语法结构很像&lt;a href=&quot;http://zh.wikipedia.org/wiki/éæ³¢å&quot;&gt;逆波兰式&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-5&quot;&gt;高德纳&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-5&quot;&gt;

&lt;p&gt;wiki地址:&lt;a href=&quot;http://zh.wikipedia.org/wiki/高德纳&quot;&gt;http://zh.wikipedia.org/wiki/%E9%AB%98%E5%BE%B7%E7%BA%B3&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
tex排版系统的作者,它的衍生版本如latex等被广泛应用于论文写作.Tex的bug奖励
规则和版本号也是很有意思.wiki上有说明.
&lt;/p&gt;

&lt;p&gt;
注意以上的简历会发现,他们都被称为数学家,或者专业是数学专业.原因很简单,当
时还没有计算机这个专业,而计算机正是从数学发源而来.可以说是数学对人类影响
最直观的领域之一.貌似《逻辑的引擎》这本书对这方面的说明应该不错,不过我没
有读过,只在这里一提.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;如何做研究&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/mit.research.how.to.html&quot;&gt;http://www.cs.indiana.edu/mit.research.how.to.html&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
来自MIT 人工智能实验室.
这篇文章年代陈旧.但是依然价如瑰宝.如果本科入学就能看到该文,一定受益匪浅.中文版也广泛分布了.Baidu即可.
不知道国内有没有哪个学校的某个实验室能够有如此积累.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;专业书本&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;

&lt;p&gt;   暂空
&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; CPU时间片是用来分配程序执行时间的基本单位,对于一个简化后的CPU来说,程序是
不能够并行执行的,一次只能执行一个,如果同时运行多个程序,程序共用一个CPU,
只能在一段时间里执行一个程序,多个程序就会排队等待,结束这段时间片后会再交
给别的程序来执行.之所以平时使用上感觉是多个程序同时执行,那是因为这个时间
片很短,人类感觉不出来而已,就像电影和动画的原理一样,每秒24帧就能让你感觉
是连续的了.目前个人电脑也都属于多核CPU,在这种情况下,就可以在不同的CPU核
心上同时执行多个程序了.对于操作系统来说,对时间片的分配存在&quot;抢占式&quot;和&quot;非
抢占式&quot;,抢占式是在一个程序占用太多时间后,操作系统会强行收回CPU,分
配给下一个程序.非抢占式是更多的交给程序来决定是否执行完毕可以交出CPU.目
前PC上的操作系统一般都是抢占式,因为非抢占式可能会造成一个程序占用过多
CPU时间,其他程序就没法执行,给人的感觉就是别的程序死掉了.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.2&quot; href=&quot;#fnr-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Linux受Minix影响,两者之间也是一段恩怨情仇,Linux的作者&lt;a href=&quot;http://en.wikipedia.org/wiki/Linus_Torvalds&quot;&gt;Linus&lt;/a&gt; 在开发
Linux初期,就是使用的Minix,其设计也受到了Minix很大影响,但是两者之间在宏内
核和微内核结构上的分歧,还引发了两个作者的一次论战,可以参考
&lt;a href=&quot;http://en.wikipedia.org/wiki/Tanenbaum–Torvalds_debate&quot;&gt;Tanenbaum–Torvalds debate&lt;/a&gt;,当然两者的设计思想各有千秋,结合两者的优点在一
起往往是工程实践上的折中,Linux引入的内核模块设计,Windows NT内核则是所谓
的混合模式.如果想要学习下OS,minix显然是很好的选择,Minix的作者的
&lt;a href=&quot;http://en.wikipedia.org/wiki/Andrew_S._Tanenbaum#Books&quot;&gt;出版物&lt;/a&gt; 都是在CS上很重要和著名的,如操作系统和计算机网络相关的大部头.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.3&quot; href=&quot;#fnr-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 有关GNU/Linux的名称也稍有讲究,GNU项目和Linux项目没有必然的联系,GNU是
Richard Matthew Stallman(RMS)发起的一个项目,作为开放源码运动的重要一部分.提到
RMS往往会联想到另外两个事物,GNU Emacs和MIT的人工智能实验室.Emacs作为&quot;神的编辑
器&quot;,其被大量广泛的应用,即使是非CS专业的人,譬如有代表性的文章
&lt;a href=&quot;http://www.gtdstudy.com/?p=2634&quot;&gt;http://www.gtdstudy.com/?p=2634&lt;/a&gt; .当然,存在Emacs的地方是不能没有&quot;编辑器之
神&quot;的Vim的.两者论战已经连绵N年,而两者最初始版本都比大部分renren用户的年
纪大.Google &quot;editor war&quot;即可,当然,这里说的是Google而不是Baidu.在这一论战
上的恶搞更是层出不穷.是的,在CS领域里,自由精神熠熠生辉.恶搞正是其体现之
一.GNU项目中著名的软件譬如gdb\gcc对整个计算机领域的影响是难以想象的.所以
去他的官方网站逛一圈还是值得的,网址:&lt;a href=&quot;http://www.gnu.org&quot;&gt;http://www.gnu.org&lt;/a&gt; .MIT人工智能实验
室则与黑客的诞生相关,之后会提到的Eric S.Raymond的五部曲中就有黑客历史介绍.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.4&quot; href=&quot;#fnr-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Mac OS X与BSD系的系统也有一定的关系,具体可参看&lt;a href=&quot;http://en.wikipedia.org/wiki/Mac_OS_X&quot;&gt;wiki&lt;/a&gt;,同时其内核
Darwin也是开源的.当然内核上层的软件没有开源.Mac OS X的图形界面(GUI)一直
被人称道,不过一直&quot;为他人作嫁衣裳&quot;的&lt;a href=&quot;http://en.wikipedia.org/wiki/PARC_(company)&quot;&gt;Xerox PARC&lt;/a&gt;对于GUI,对CS的多个重要领
域的&quot;无私&quot;贡献,实在是一部悲情剧,这个研究中心的历史和成果也值得八卦.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.5&quot; href=&quot;#fnr-.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; 对于Android,可以理解为Linux,其在Linux内核上层构建了一层接口,并且
提供了Dalvik这个虚拟机,其执行代码从Java的虚拟机执行码转化.因此Android的
持有者Google与Java当前的持有者Oracle有了关于Java的版权的诉讼.当然,Java其
实并不是Oracle发明,而是被Oracle收购的Sun公司推出,相比Oracle而言,或许Sun
公司更容易被人们称为&quot;伟大&quot;,是的,伟大与否与公司成败没有什么必然联系.Sun公
司的历史同样值得一看,&amp;lt;浪潮之巅&amp;gt;这本书介绍了多个公司的历史.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.6&quot; href=&quot;#fnr-.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 更完整的操作系统清单,请参考
  &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_operating_systems&quot;&gt; List of operating systems - Wikipedia, the free encyclopedia&lt;/a&gt;
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.7&quot; href=&quot;#fnr-.7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; unix-like的系统在CS历史上的地位难以撼动,其发展史也是CS这门学科应
用于人类社会的一个缩影,这篇&lt;a href=&quot;http://coolshell.cn/articles/2322.html&quot;&gt;文章&lt;/a&gt; 对unix的历史有介绍,并不涉及技术,即使文科背景都可以理解.
稍微涉及一点技术的介绍&amp;lt;unix编程艺术&amp;gt;很精彩.其作者Eric S. Raymond出版物都丰富多彩,比如:
学会如何问问题:&lt;a href=&quot;http://www.catb.org/~esr/faqs/smart-questions.html&quot;&gt;http://www.catb.org/~esr/faqs/smart-questions.html&lt;/a&gt; ,无论
是否技术人员,都值得一看.
如何成为黑客:&lt;a href=&quot;http://www.catb.org/esr/faqs/hacker-howto.html&quot;&gt;http://www.catb.org/esr/faqs/hacker-howto.html&lt;/a&gt;
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.8&quot; href=&quot;#fnr-.8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; 计算机不能够理解任何东西,起码到目前为止.包括siri,也不能够
理解任何东西.但是,到目前为止计算机领域在人工智能上的发展仍然创造了巨大
价值,比如,最近的Google的自动驾驶汽车,已经行驶到万公里级别仍然没有出现
过交通意外,当然,价值不菲.装自动驾驶系统的价格能赶上一辆豪车了.不过技术的
进步是超乎人类想象的.特别是在计算机硬件的成本上,想想几年前硬盘和内存
的价格就知道了.在计算机芯片上就存在&lt;a href=&quot;http://zh.wikipedia.org/wiki/摩尔定律&quot;&gt;摩尔定律&lt;/a&gt;, 到目前为止,相同价格上,电
脑性能每18个月就会翻一翻.我们可以对比下改革开放后的中国经济发展速度,就
知道这一增长的力量.回到人工智能,其中的机器学习就能够利用统计规律分析现有的历史数据,
获得对新数据的处理能力,而其中的数学原理却并不复杂.具有一般工学数学背景
的都可以看下科普级的书本&amp;lt;数学之美&amp;gt;,介绍了领域中的一部分内容.想要深入,斯坦福的公
开课程&amp;lt;机器学习&amp;gt;在网易公开课上有中文翻译版.机器学习也不仅仅包括利用统计方法.
或者Coursera公开课内的相关课
程. &lt;a href=&quot;https://www.coursera.org/course/neuralnets&quot;&gt;https://www.coursera.org/course/neuralnets&lt;/a&gt; 和
&lt;a href=&quot;https://www.coursera.org/course/ml&quot;&gt;https://www.coursera.org/course/ml&lt;/a&gt;
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.9&quot; href=&quot;#fnr-.9&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; 汇编语言基本与机器指令一一对应.所以基本每个写下的指令,机器都会
照例执行.相比上层语言编写的程序,性能和文件大小上都有很大的优势.在某些
情况下会有数量级的提升.因此在一些对性能要求较高的功能上,会有使用汇编代
码的编写的情况.也即,上层语言和低层语言混用.没错,程序语言经常会有混用的
情况发生,一个程序并不一定只包涵一种语言.有些&quot;无聊&quot;的人会比赛看谁的一个
程序中混用的语言最多.说到这里,还有一个更加&quot;无聊&quot;的比赛,看谁的代码写的
最难看, &lt;a href=&quot;http://zh.wikipedia.org/wiki/国际C语言混乱代码大赛&quot;&gt;国际C语言混乱代码大赛&lt;/a&gt; 可以让有c语言基础的大饱眼福.计算机语言和
人类语言类似,可以把每个程序员看做写作文的.如果是命题作文的话,不同人写
出来的自然也不同,有的人文字简练,有的人段落清晰,有的人辞藻华美.同样对于
程序员也一样.而且还有不同的语言之分,譬如人类社会中英语\中文\法文等等.这
也是Editor War之外的一个热核战场.所以如果自己觉得心情太好的话,可以在技
术主题的论坛或者网络社区上,大吼一声&quot;XX编辑器/语言最NB,其他的都是一坨屎
&quot;.事实上不同的语言都有各自的特征,如同正常人一样,精通母语和第一外语,然
后了解其他更多的语言是最好的.因为语言可以很好开拓人的视野,学会一门,往
往就打开了新的一扇门,这扇门并不能通往财富\名誉,只是通往另外的一个未知
世界,最终都是通往你自己的内心.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.10&quot; href=&quot;#fnr-.10&quot;&gt;10&lt;/a&gt;&lt;/sup&gt; 在这里,对&quot;一般编程&quot;是简化了描述,事实上,它与语言和机器都息息相关,
深入了解,可以参考
&lt;a href=&quot;http://en.wikipedia.org/wiki/Compiler&quot;&gt; Compiler - Wikipedia, the free encyclopedia&lt;/a&gt;
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.11&quot; href=&quot;#fnr-.11&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; 二进制代码真的是这样的&quot;0101010110100010111101011101&quot;,当然别指望
直接用记事本打开会是这样.因为这里你看到的一个0/1其实代表的是8个机器码的
01.即使是最基本的文本文件都是被编码解码后展现给人类的.最简单的文本编码是
ASCII编码,历史可以参见&lt;a href=&quot;http://en.wikipedia.org/wiki/ASCII&quot;&gt;http://en.wikipedia.org/wiki/ASCII&lt;/a&gt; ,不能支持中文,
中文的编码有很多比如GBK/GB2312/UTF等等,两岸三地的编码加起来能让人眼花缭
乱,utf-8因为通用且可以描述所有的语言字符,包括中文,正在被越来越广泛的应用.说到utf-8,
其作者之一就是unix的作者之一Ken Thompson.编解码在通讯专业一定会接触很多,
在计算机中很多也涉及编解码问题,&quot;语音识别&quot;,&quot;自然语言处理&quot;,&quot;头像识别&quot;都可
以认为是一种编解码.当然,密码破解也是如此.学习&amp;lt;信息论&amp;gt;这门课应该可以对编
码相关有一些了解.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.12&quot; href=&quot;#fnr-.12&quot;&gt;12&lt;/a&gt;&lt;/sup&gt; 也有叫做高级语言和低级语言的.不过考虑到&quot;高级&quot;可能会给人们带来
错觉:&quot;高级&quot;语言一定比&quot;低级&quot;语言好,事实情况是,在不同的应用背景下,上层语言
和底层语言会有不同的优势和劣势,纯粹单一的看待一门语言比另外一门好/优秀,
是没有意义的.即使在某些已经死亡的语言上,也会有值得借鉴的地方.这其实在现
实中是经常出现的,对于某项事物,我们不能简单的以一个指标直接评价,如何结合
应用场景扬长避短往往是一门艺术.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.13&quot; href=&quot;#fnr-.13&quot;&gt;13&lt;/a&gt;&lt;/sup&gt; 最广为人知的就是intel的产品,然后就是AMD的处理器.而在这之外还有很
多应用广泛但是人们并没有意识到其存在.比如ARM架构的处理器,目前几乎所有的
智能手机使用的都是ARM架构的处理器.其实intel和AMD的处理器产品属于同一架构,x86或
者是x86-64位,也因此,运行在这两者产品上的软件是互相兼容的,从来不会有谁会
碰到&quot;xx软件for intel cpu&quot;,&quot;xx软件 for amd cpu&quot;,相同cpu架构上的程序都是可
以互相兼容的.而ARM架构的设计公司不同于intel/amd的是它只是负责设计cpu架构而不
自己生产,生产商有兴趣的,可以购买架构的授权,&lt;a href=&quot;http://zh.wikipedia.org/wiki/ARM架構#ARM_.E5.85.A7.E6.A0.B8.E7.9A.84.E6.8E.88.E6.AC.8A.E8.88.87.E6.87.89.E7.94.A8&quot;&gt;wiki&lt;/a&gt; 有介绍,智能手机上基本使
用的都是ARM架构,比如iphone/ipad,绝大部分的Android产品.MIPS架构也不能忘记
提下,因为中国的&quot;龙芯&quot;使用的就是MIPS的架构.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.14&quot; href=&quot;#fnr-.14&quot;&gt;14&lt;/a&gt;&lt;/sup&gt; 这里就体现了上层语言的优势.由于上层语言更加集中于程序设计的逻辑,
而不是具体的硬件等等,编写程序的人可以更好的设计程序结构,减少不必要的时间
耗费,提高编写程序的速度.一些接近下层的编译型的上层语言(比较拗口,因为上层语言也有更上层的和相对下层的)在编写完成后,会通过编译器汇编器
的一系列工作将程序的源代码翻译成为机器代码,而汇编语言其实是机器二进制码
的助记符形式.整个过程可以理解为 上层语言代码 -&amp;gt; 汇编语言代码 -&amp;gt; 二进制代
码.我们称呼其为上层语言,就因为这如同一层层的夹心饼干.居于上层的自然叫做
上层.在计算机里,分层的思想被广泛应用,在硬件上缓冲区的分层,在软件上TCP/IP
协议的分层.以及更广泛发生的上层语言的分层,语言可能不是简单像三层语言那样,可能
更多层次,特别是有些解释性语言,并不是直接翻译成为二进制码,而是由解释器将
其翻译成为某一种中间层的语言,这些语言再进一步执行,而执行可能是发生在某一个高
于机器二进制码层上.而这一层可能和机器二进制码又有多层的隔离.当然,最终的
执行都必须在二进制码层上,因为目前的计算机不懂任何其他的层. 分层基本是计
算机的万金油解法,被广泛应用,有人说过大意如此&quot;如果有个问题没法解决,就加个
抽象层吧&quot;.但是分层也有缺点,最明显的就是速度会变慢,&amp;lt;盗梦空间&amp;gt;是个很不错的
体现.在硬件的分层上,有一张最直观的图片,&amp;lt;深入理解计算机系统&amp;gt;封面上的
那幅图就是计算机的存储系统的分层的明显展示.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Baking Pi - Operating Systems Development Lesson 1</title>
   <link href="http://qinjian623.github.com/2012/09/12/baking_pi_l1"/>
   <updated>2012-09-12T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/09/12/baking_pi_l1</id>
   <content type="html">&lt;p&gt;
本课时主要在于说明最基本的起步和怎样打开Raspberry Pi上的'OK' &lt;b&gt;LED&lt;/b&gt; 灯,灯的位置在RCA和USB接口附近.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;起步&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;首先需要你访问 &lt;a href=&quot;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/downloads.html&quot;&gt;下载&lt;/a&gt; 页面获得其中的GNU的工具链.同时在该页面上,也存在一个叫做 &lt;i&gt;OS Template&lt;/i&gt; 的文件.请把它下载下来,解压到新建的文件夹内.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;开始&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;先解压模板文件,然后在其'source'文件夹中创建一个名称为'main.s'的文件.该文件会包含待开发的操作系统的代码.用文本编辑器打开,准备向其中写入汇编代码.Raspberry Pi使用的是ARMv6的汇编代码,因此,我们也需要根据ARMv6的语法和要求来写代码.
&lt;/p&gt;
&lt;p&gt;
拷贝如下代码:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;.section .init
.globl _start
_start:
&lt;/pre&gt;


&lt;p&gt;
目前什么都不会发生,这些代码都是等待给汇编器的指令.汇编器是翻译汇编代码到二进制代码的程序.汇编代码中,每行就是一个新的指令.其中第一行告诉汇编器&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;放置我们代码的位置.OS模板文件会让 &lt;b&gt;.init&lt;/b&gt; 的模块首先输出.这里比较重要,因为我们需要控制具体哪段代码首先执行.不这么做的话,代码根据字典顺序来执行. &lt;b&gt;.section&lt;/b&gt; 指令就是告诉汇编器把代码放哪里,代码范围是从该点开始一直到下个 &lt;b&gt;.section&lt;/b&gt; 或者文件尾.
&lt;/p&gt;
&lt;p&gt;
后面两行只是为了防止警告信息,没有重要意义.&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.2&quot; href=&quot;#fn-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;第一行代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;现在我们开始真正的编写代码.代码的作用是告诉处理器将 0x20200000存入寄存器r0.显然读者肯定会问及两个问题,寄存器是什么和为什么是0x20200000这个数字.
&lt;/p&gt;
&lt;p&gt;
寄存器是处理器内部的一小片存储单元,用于存储处理器目前工作中需要使用的数字.他们的数量很少,且基本都有特定的作用,具体作用稍后再说.共有13个通用寄存器,分别编号为(r0&amp;hellip;r12),其不具有特定作用,可以随意使用.例子中,我们按照顺序,就使用了第一个寄存器,不过随便用其中的任何一个也没有关系.当然,随后的代码中使用寄存器就需要保持一致.
&lt;/p&gt;
&lt;p&gt;
0x20200000是个16进制形式的数字.
&lt;/p&gt;
&lt;p&gt;
所以第一个指令就是将数字20200000&lt;sub&gt;16&lt;/sub&gt; 载入r0寄存器.看起来没什么作用,其实不然.在计算机中,有很多设备和内存块.为了能够访问他们,我们就给其中每个都赋予一个地址.如同邮编或者网址,为的是能够让我们识别设备或者内存块的位置.计算机中的地址都是数字编码,所以20200000&lt;sub&gt;16&lt;/sub&gt; 成为GPIO控制器的地址.这其实是硬件制造商设计的地址,制造商可以随意指定地址,只要地址没有冲突就可以.具体的地址信息可以从硬件的手册中获得, 这些地址一般要求没有被别的系统指定,而且往往都是很大的约整数.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4&quot;&gt;成功输出&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;如果读过手册,就会知道我们需要发送两个消息给GPIO控制器.我们必须让控制器能够理解我们的消息,一旦这样,控制器就会按照我们所愿打开OK LED灯.由于这是个十分简单的芯片,所以我们只用很简单的发送几个数字就可以了.
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;mov r1,#1
lsl r1,#18
str r1,[r0,#4]
&lt;/pre&gt;


&lt;p&gt;
以上的代码就能够输出到GPIO的第16个针脚上.首先我们向r1寄存器写入一个数字,然后发给GPIO控制器.前两个命令是为了往r1里写个数字,其实我们也可以用之前用过的那个 &lt;b&gt;ldr&lt;/b&gt; 的命令,不过现在这么做是为了方便以后指定任意针脚.直接写值不如通过表达式来指定值来的灵活. OK LED是连接到GPIO的第16个针脚处.所以我们需要发送命令激活第16个针脚.
&lt;/p&gt;
&lt;p&gt;
r1中的数字用来激活LED的针脚.第一行将1&lt;sub&gt;10&lt;/sub&gt; 放入r1. &lt;b&gt;mov&lt;/b&gt; 指令比 &lt;b&gt;ldr&lt;/b&gt; 指令快,因为它不涉及内存操作.不过 &lt;b&gt;mov&lt;/b&gt; 只能用来载入确定值&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.3&quot; href=&quot;#fn-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.在ARM的汇编代码中,基本所有指令都由三个字母打头.这种方式被称作助记符,表明该命令实际执行的操作.比如 &lt;b&gt;mov&lt;/b&gt; 是 move的简写, &lt;b&gt;ldr&lt;/b&gt; 是 load register的简写. &lt;b&gt;mov&lt;/b&gt; 指令将第二个参数 &lt;b&gt;#1&lt;/b&gt; 移入到第一个参数的 &lt;b&gt;r1&lt;/b&gt;.一般来说, &lt;b&gt;#&lt;/b&gt; 必须用来指定数字,不过我们已经看到过反例了.
&lt;/p&gt;
&lt;p&gt;
第二条指令是 &lt;b&gt;lsl&lt;/b&gt; 其实是逻辑左移运算. 表示将第一个参数的二进制值向左移动第二个参数代表的位数. 在我们这,就是将1&lt;sub&gt;10&lt;/sub&gt;(二进制表示1&lt;sub&gt;2&lt;/sub&gt;)左移18位(这样就变成了1000000000000000000&lt;sub&gt;2&lt;/sub&gt; = 262144&lt;sub&gt;10&lt;/sub&gt;)
&lt;/p&gt;
&lt;p&gt;
这些命令中固定的数字也是我从硬件说明手册上找到的&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.4&quot; href=&quot;#fn-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.手册上说了,GPIO控制器有一24b的空间,用于决定GPIO的设定.前四个设定前十个GPIO pin, 第五到八设定第十一到二十个GPIO pin,以此类推.总共54个针脚,所以需要6*4个byte,总共24个.在每四个byte中,有三个bits用来指定某一个GPIO pin.如果我们需要第16个pin,那么就要设定第五到八byte.因为我们在处理10-19范围类的pin.我们处理的是3bits中的第6个.所以需要移位18.
&lt;/p&gt;
&lt;p&gt;
最后, &lt;b&gt;str&lt;/b&gt; (store register的简写)命令将第一个参数 &lt;b&gt;r1&lt;/b&gt; 存储到第二个参数运算结果指定的内存地址中.第二个参数可以直接是寄存器, 在这里是 &lt;b&gt;r0&lt;/b&gt;,我们之前用来指定了GPIO控制器的地址,然后加上一个数值,在这里是 &lt;b&gt;#4&lt;/b&gt;.所以结果就是我们在GPIO控制器的地址基础上加上4,在这里写入 &lt;b&gt;r1&lt;/b&gt; 的值.其实就是第二个4bytes,前面说了6*4bytes的原理.到此为止我们发送了第一个消息给GPIO控制器,告诉它让第十六个pin做好输出准备.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5&quot;&gt;让机器动起来&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
现在,LED已经准备好被打开,但是我们还需要打开它.也即发送一个消息让GPIO控制器将pin 16 关上.  &lt;i&gt;没错,是关上&lt;/i&gt; .芯片制造商决定这么设计的&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.5&quot; href=&quot;#fn-.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;,当GPIO的pin关闭的时候,LED打开.硬件工程师经常会有这样的决定,让OS开发人员忙活个不停.自己要注意.
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;mov r1,#1
lsl r1,#16
str r1,[r0,#40]
&lt;/pre&gt;


&lt;p&gt;
按说这上面的命令不用多说了,只是参数上稍有不同.第一行和之前一样, &lt;b&gt;r1&lt;/b&gt; 赋值为1.第二行左移16位.因为要关闭pin16,所以我们需要在第16bit上置一(同理,其他位置就是操作其他pin了).最后还是GPIO的地址加40&lt;sub&gt;10&lt;/sub&gt;.用来关闭pin(28用来打开pin)
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6&quot;&gt;收尾工作&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6&quot;&gt;

&lt;p&gt;到这里工作也就结束了,不过不幸的是,处理器还不知道我们已经完成工作了.实际上,处理器也是不停工作的.只要供电,处理器就不停工作.所以么,我们得给个任务让它一直做下去,否则Raspberry Pi就要崩溃了(在我们课程上其实也没什么关系,因为灯已经打开了,爱崩溃不崩溃吧.)
&lt;/p&gt;



&lt;pre class=&quot;example&quot;&gt;loop$:
b loop$

&lt;/pre&gt;


&lt;p&gt;
第一行不是指令,只是一个标签.用于命名接下来的一行为 &lt;b&gt;loop$&lt;/b&gt;. 这样的话我们就可以直接通过名称来指定某一行了.这就叫做标签.标签在翻译成二进制后就不再使用,不过对我们来说,通过名字来指定某一行代码要比直接用数字方便的多.按照惯例,我们在标签中加了一个 &lt;b&gt;$&lt;/b&gt; ,表明这个标签只在这段代码里有作用,其他人就会明白,这一标签在更大范围内没有重要意义. &lt;b&gt;b&lt;/b&gt; (branch)命令就是让程序执行到标签的位置上去,而不再按照顺序执行.不过,下一行又是 &lt;b&gt;b&lt;/b&gt;,又来一遍,结果就是一直循环下去.这样,处理器就可以一直执行这个无限循环,一直到它被安全关掉.
&lt;/p&gt;
&lt;p&gt;
最后的一段空行可不是自己不小心的回车.GNU的工具链希望所有的汇编代码都能够以空行结束.以确保程序已经结束而不是一个大文件被切分后的一部分.如果不放空行,汇编器工作的时候会有警告的.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7&quot;&gt;在Pi上执行&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7&quot;&gt;

&lt;p&gt;完成代码后,我们就得把代码放到Pi上执行了.在你的计算机上打开一个终端,将工作路径改变到源代码目录的上级目录上. 输入命令 &lt;b&gt;make&lt;/b&gt;,回车.要是出了错误,请到troubleshooting那一章节去找解决方法.没错的话,应该就生成三个文件了.kernel.img是你的操作系统镜像.kernel.list是你写的汇编代码的清单,是自动生成的,方便将来检查是否生成成功. kernel.map文件是所有的标签的生成的一个对照文件,可以方便我们查找各个值.
&lt;/p&gt;
&lt;p&gt;
安装操作系统,第一步就是要准备好一个已经安装了系统的SD卡.SD卡里,你可以看到一个kernel.img的文件.随便改个名字,比如kernel-linux.img.然后将你自己通过 &lt;b&gt;make&lt;/b&gt; 生成的kernel.img拷到SD卡上去.现在就把现有的操作系统替换成你自己的了.最好还是要备份好原先的操作系统,说不定你自己将来还用得上.
&lt;/p&gt;
&lt;p&gt;
插回SD卡,通电.OK LED灯应该已经打开.没有的话还是请去troubleshooting页上找找.如果打开了的话,那么恭喜你,你完成了你的第一个操作系统.去Lesson 2: OK02看看让LED灯闪烁的方法吧.
&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 其实实际上时告诉链接器.这是另外一个程序,功能是将多个汇编文件链接在一起.不过这个细节并不重要.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.2&quot; href=&quot;#fnr-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 其实他们很重要,GNU的工具链主要用于创建程序,因此他需要一个程序的入口,标签名称是 &lt;b&gt;_ start&lt;/b&gt; .由于我们在创建一个操作系统, &lt;b&gt;_ start&lt;/b&gt; 的标签总是最开始执行的位置,而在这里我们通过 &lt;b&gt;.section&lt;/b&gt; 和 &lt;b&gt;.init&lt;/b&gt; 命令设定了这一位置.要是我们没有设置这个位置的话,工具链就要报错了.其实第一行的内容就是申明,我们要创建一个 &lt;b&gt;_ start&lt;/b&gt; 的符号名称,而这个名称是全局都可见的(所以是globally的),第二行说明, &lt;b&gt;_ start&lt;/b&gt; 的地址就是从下一行开始.有关地址,我们很快就会涉及.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.3&quot; href=&quot;#fnr-.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 这是值是指那些2进制的表示中,只有前8个bit才有1的数值.简而言之就是,8个1bit或者0bit开头,后面的全是0.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.4&quot; href=&quot;#fnr-.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 这个课程的目的其实是为了减轻你阅读这种手册的痛苦,不过如果你感兴趣,希望进一步深入,可以在 &lt;a href=&quot;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/downloads/SoC-Peripherals.pdf&quot;&gt;SoC-Peripherals.pdf&lt;/a&gt; 这里找到.
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.5&quot; href=&quot;#fnr-.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; 一位好心的硬件工程师向我解释了原因:现代芯片使用CMOS来组合,全名是
(Complementary Metal Oxide Semiconductor).Complementary 的意思就是每个信
号都被连接到两个晶体管上,一个是由N-type semiconductor材料制作,用于处理低
电压.一个由P-type材料制作,由于处理高电压.两者只能有一个处于打开状态,否则
就短路了.P型的没有N型导电好,所以P型晶体管要提供相同电流需要比N型大三倍.所
以LED经常是在低电压的时候打开,因为N型的低电压比P型在高电压下电流强.
还有另外一个原因,在二十世纪七十年代,芯片完全由N型材料制作(NMOS).P型的功能由电
阻器来实现.这就是说,在低电压信号的时候芯片要消耗电力而且还越来越热,即使
在芯片什么都不做的时候.如果你的电话放在你口袋什么都不做的时候还越来越热
消耗电池,你就知道这有多糟糕了.所以信号被设计成低电压的时候激活,高电压的
时候关闭,这样就不用浪费电力了.现在我们不再使用NMOS了,但是N型处理低电压还
是要比P型处理高电压要快.一般低电压激活的时候总会在信号名字上面加一横以示
说明,或者写做 SIGNAL &lt;sub&gt;n&lt;/sub&gt; 或者是/SIGNAL.不过还是容易被混淆,哪怕硬件工程师
也难逃.
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Baking Pi - Operating Systems Development Lesson 0</title>
   <link href="http://qinjian623.github.com/2012/09/12/baking_pi_l0"/>
   <updated>2012-09-12T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/09/12/baking_pi_l0</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;课时0 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;这一介绍性的课时没有太多实践的东西,只是为了解释一下操作系统\汇编代码还有
其他一些重要的基本概念. 急于尝试的同学,可以直接跳过本课时.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;操作系统&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;

&lt;p&gt;操作系统是一种复杂的程序,用来管理在一台计算机上的各个程序,比如说分配计算机的CPU时间片,内存资源,其他的硬件资源等等.主流的桌面操作系统一般包括GNU/Linux, Mac OS X和微软的Windows.其他的一些设备也是需要操作系统的,比如手机就会使用Android, iOS和Windows Phone这类的系统.&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;
&lt;p&gt;
由于操作系统直接与计算机的硬件交互,所以它需要知道具体硬件的一些信息.为了方便操作系统可以广泛的应用在各种计算机上, &lt;b&gt;驱动&lt;/b&gt; 的概念被引入.驱动的作用就是为了使操作系统可以方便的与一个特定的硬件设备进行通讯, 它也是一段代码,但是可以很容易的加入或者移出操作系统.本课程不涉及如何创建这类可移出的驱动,而仅仅集中于Raspberry Pi相关的设备驱动.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;汇编代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;

&lt;p&gt;本课程的代码基本都是汇编代码.它的特点就是十分接近计算机硬件层,易于被机器所&quot;理解&quot;.计算机的工作是通过处理器和内存来实现的,处理器可以做一些数字的加减法这类的简单工作,内存则负责存储这些数字.计算机通电后,处理器就通过执行程序员交给它的指令来改变内存中的数字和与硬件交互.汇编代码就是这些指令被翻译成方便人类读取的形式.
&lt;/p&gt;
&lt;p&gt;
一般编程,程序员都会使用一门编程语言,譬如C++,Java,C#,Basic等等.之后再调用编译器将这些由程序员编写的代码翻译成为汇编代码,之后会再进一步翻译成为二进制代码&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.2&quot; href=&quot;#fn-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.二进制代码是计算机实际能够理解的语言,只不过实在不适合人类阅读.汇编代码就相对易读,但是供程序员使用的指令也依然很少. 请谨记每个使用汇编代码编写的指令,都是计算机可以直接理解的,因此这些指令是受下层硬件决定的,每个指令都会被实际上的电路直接使用.
&lt;/p&gt;
&lt;p&gt;
[图片占位符]
&lt;/p&gt;
&lt;p&gt;
和一般的上层编程一样,汇编语言也有多种.当然,多样的原因不是像上层语言那样,而是因为世界上存在多种不同的处理器,每种处理器往往都设计成理解某一个语言.因此,一个程序员如果用汇编语言给一个机器编写程序,那么不同类的机器就不能够使用这一程序.一般而言,这种每个不同架构都需要重新编写程序的情况实在是个大灾难,不过对于操作系统来说,这就无所谓了,因为它本身就要为不同的硬件重新编写.不过,不是操作系统的所有部分都需要重写,因为操作系统的大部分也是由c++或者c语言这种上层语言来编写,以方便转化到不同的架构上,需要重写的只是那些必须通过汇编语言来实现的部分.
&lt;/p&gt;
&lt;p&gt;
目前,已经可以进入第一课时了.
&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 更完整的操作系统清单,请参考
  &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_operating_systems&quot;&gt; List of operating systems - Wikipedia, the free encyclopedia&lt;/a&gt;
&lt;/p&gt;


&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.2&quot; href=&quot;#fnr-.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 在这里,对&quot;一般编程&quot;是简化了描述,事实上,它与语言和机器都息息相关,
深入了解,可以参考
&lt;a href=&quot;http://en.wikipedia.org/wiki/Compiler&quot;&gt; Compiler - Wikipedia, the free encyclopedia&lt;/a&gt;
&lt;/p&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Unix缺陷读后</title>
   <link href="http://qinjian623.github.com/2012/09/10/wangyin"/>
   <updated>2012-09-10T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/09/10/wangyin</id>
   <content type="html">&lt;p&gt;
&lt;span style=&quot;text-decoration:underline;&quot;&gt;写了很长时间,一直放在gmail里面存着,今晚整理收件夹,拿出来了&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
最近读了王垠的《Unix的缺陷》&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5d90e82f01014k5j.html&quot;&gt;http://blog.sina.com.cn/s/blog_5d90e82f01014k5j.html&lt;/a&gt;
文章似乎主要集中在Unix的设计哲学中的使用文本流的方法。
&lt;/p&gt;
&lt;p&gt;
举例的是命令行用户接口不友好，特别是文本流和命令的选项之间的混淆，造成的误删除等等的操作，和find中查找文件时文件名称存在空格的问题。
这些问题主要的原因还是使用文本流造成的类型丢失，被统一转换成了字符串类型，而不具备其他的属性方便程序区分造成。
&lt;/p&gt;
&lt;p&gt;
其实文本流的手段不过操作系统IPC的途径之一。文本流通过管道的方式，实现IPC。
王垠提出的方法是如下的三点：
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保留数据类型结构。
&lt;/li&gt;
&lt;li&gt;统一标准表示数据结构
&lt;/li&gt;
&lt;li&gt;程序间的数据传递和存储，像程序内部的数据结构一样。
&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;
三个方法，似乎从可行上来看没有任何可能，不过不考虑执行的可行性，其思想还是十分美好的，为了实现这些方法，已经有了很多方面的努力，不过貌似，还是文本流最受欢迎。
程序间的数据传递和存储，在某些情况下，也都是利用内部数据结构来描述的，文本流的IPC只不过是一部分，其他的更加直接的IPC方法，譬如Socket和共享内存，有很多也是通过内部数据直接传递的，但是其实这个和文本流也没有什么本质的区别，在目前通用计算机的体系下，任何数据结构都有一个前提，就是能够在内存中表示，而内存不过是一个一维的存储部件，和文本流一样，如果真的需要以内部数据结构来传递和存储IPC的消息，其实文本流也一样，不过是二进制和文本流的区别而已。不过这一说法其实就很流氓了，因为最通用的当然是二进制流了，越简单越通用，但是二进制流的可读性真的确实不如文本流了。
&lt;/p&gt;
&lt;p&gt;
回头来看，只能是这样的一个结论，All structs suck， text just sucks less。王垠提出的方法似乎也与他的研究方向有一定的关系，希望利用程序语言设计的思想来设计一个更加优美的系统。
而文本流的问题其实是一个进程间通讯的手段问题，在实现进程间通讯上似乎Plan9，MS的com等等都有做过尝试，虽然有得有失，但是似乎现在文本流还是一个不错的解法。
&lt;/p&gt;
&lt;p&gt;
统一所有接口的理想有很大的吸引力和美感，但是这个想法在实践上似乎有很大的问题，本身接口能否满足统一的条件不算，在完成统一后，其实还是需要进行接口描述以方便用户使用的，不论这个用户是人类还是机器，也接口如何必须让使用这些接口的用户能够理解，对人类来说图片、表格、文本流都是少不了的。不过文中将shell程序抽象成为函数的方法确实让自己换了一个角度来看待问题。
&lt;/p&gt;
&lt;p&gt;
有关文本流带来的问题上，
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;在配置文件上，似乎即使统一了格式，管理好还是需要大量的人力物力的，会不会变成MS的注册表的管理（这个也是结构化的统一的格式的配置文件管理），那还真不如文本流来的实在。不过萝卜青菜各有所爱，如果可以在配置文件上统一好格式，肯定会更好。
&lt;/li&gt;
&lt;li&gt;程序使用结构化，这个倒是真可以有。不过不知道编译器在词法语法分析上耗费的时间有多少比例，不过常识上看，文本处理确实是耗时的一件事情。
&lt;/li&gt;
&lt;li&gt;数据库接口，SQL语句有更多类型支持方便调试倒是很不错，不过程序还是人写出来的，SQL语句也肯定存在一个文本流到语法树的过程，这个是不是与文本流有太大的关系？似乎更多的还是语言设计上的类型安全性上？
&lt;/li&gt;
&lt;li&gt;XML，XML的设计目的似乎就是试图完成结构化数据和可读性的结合，不过现在来看结果是两边都不讨好，两边都弄个将就，尴尬。而各种复杂的XML标准其实也是为了统一数据结构的理想，不过，都是挺讨人厌的。
&lt;/li&gt;
&lt;li&gt;JS的安全性，这个即使加上类型，安全性肯定也不能解决，但是肯定会好一点的。字符串可以随意拼接，这个当然，结构化的代码照样也可以任意组合，只要是通过CPU的二进制流，那都是安全隐患，安全性与文本流没有必然的联系。换成不用文本流只不过是代码入侵的手段有点变化而已。
&lt;/li&gt;
&lt;li&gt;IDE接口，这个倒是真可以有，不过这个其实想想实践上的问题，也就要泄气了。不过Apple Scipt是通过结构化的数据实现了进程间通讯，这个确实很不过，可以加强普通应用的自动化水平。不过其实很多应用也并不支持Apple Scipt的外部接口。
&lt;/li&gt;
&lt;li&gt;log分析，结构化的log还是要依靠人来提取有用的信息，不过结构化的log的优势是工具具有通用性，减少不少无用功。
&lt;/li&gt;
&lt;li&gt;测试上，如果强行要求不得使用toString进行对比也就可以避免这个问题了，貌似这个更是一个规范的问题。结构化数据在自动化对比上方便，但是结构化数据也有序列化的需求，即使不序列化成为文本流，也得序列化成为其他的格式
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
在文中提出的解决方法中
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;保留数据结构，不涉及人机交互可以，但是一旦存在人机交互，总能有个人能读的东西，文本流算是 sucks less的东西了。
&lt;/li&gt;
&lt;li&gt;还是执行的问题，说的很美好，但是执行上没辙。就像说“大家讲道德，要高尚”。谁都知道将道德好，结果照样有不讲道德的。
&lt;/li&gt;
&lt;li&gt;这个当然好，但是程序的数据怎么实现自描述，才能提供给别的程序（这是动态导入和解析上的观点）。静态上，没有问题。
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
后面提出的带来的好处
&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;智能补全上，用文本流也可以补全，不过需要加个描述文件，当然，这个就是结构化数据了，在外面来个描述文件确实有点丑陋，要真的内部集成那敢情好。
&lt;/li&gt;
&lt;li&gt;真心没看懂，哪怕从自己的角度理解也没看懂，果断不乱说了。
&lt;/li&gt;
&lt;li&gt;这个其实也是进程间通讯的协议涉及问题，有了这个协议和文本流完全可以共存，所以和文本流没什么关系。
&lt;/li&gt;
&lt;li&gt;代码以Parse tree存储，怎样来实现展示呢，再解析成代码?程序写个文本，存成Parse tree，然后再解析回来，怎么保证还是原来的样子呢？以Parse tree存储的形式应该应用在和开发没有关系的情况下。这个和IDE的扩展又有什么联系呢？解析程序代码应该是编译器的事情，不过每次都能解析成Parse tree后，编译器、程序语言语法、编辑器相互之间的联系肯定可以更自然紧密一点。
&lt;/li&gt;
&lt;li&gt;这个貌似还是上面4的结构化存储后带来的编辑器和程序语法的联系紧密，不过直接结构化的代码，难道让程序员直接接触这种形式？貌似LISP确实很接近结构化的，因为它是语言及数据，数据也可以作为语言的。毕竟还有其他形式的语言，不能语言上都统一成一样的吧。
&lt;/li&gt;
&lt;li&gt;这个敢情好，不过，程序语言是有语义这个因素在里面的，完美的结构化版本控制应该还有很大距离。
&lt;/li&gt;
&lt;li&gt;三位一体这个东西，很有宗教宣传的感觉。不过貌似也还是三者的接口三位一体而已，和下面的实现其实也没什么关系，即使在目前情况下，在这三个东西上层加一个抽象层，一样就是三位一体了。不过确实很符合自己的未来价值观，程序最终是用户所写，开发者提供的是编程的基础设施。
&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>写些什么东西?</title>
   <link href="http://qinjian623.github.com/2012/09/03/what_is_next"/>
   <updated>2012-09-03T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/09/03/what_is_next</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;想想这里最近的几个主题应该是什么&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;org-mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;

&lt;p&gt;   自己得用这个来弄GTD管理,
   按照这个作为参考:
   &lt;a href=&quot;http://www.mastermindcn.com/&quot;&gt;http://www.mastermindcn.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; GTD管理&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;

&lt;p&gt;    这个要慢慢的迭代成为柳比歇夫那样的管理方法
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; blog相关的修改&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;

&lt;p&gt;    目前也是刚开始用org-mode写blog,一些快捷键等等的貌似都没有配置好,不过这个归到emacs类里似乎更加科学点点.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;emacs&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;

&lt;p&gt;   自己的一些配置,目前用的最多的也就是org-mode了,
   python自己有sublime.
   Java自然是Eclipse.
   所以自己也暂时没有这个的计划了.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;linux&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;日常使用的配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;

&lt;p&gt;    自从开始用了Mac&amp;hellip;这个就&amp;hellip;不过部分配置还是可以拿来用的.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;某些深入学习的东东&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;

&lt;p&gt;    譬如一些代码和文档的阅读笔记.回头可以做一个list.一个一个来完成.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;machine learning&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;

&lt;p&gt;   自己刚刚开始这个方向的内容,也只能写一下自己的笔记了.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;自己的想法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;

&lt;p&gt;   乱七八糟的想法
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; 自己的读书&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;

&lt;p&gt;   上个月完成的书还没有写呢.
   以后看完书后都要用org-mode做笔记,或者整理成org&lt;sub&gt;mode的&lt;/sub&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;暂时就只能想到这么多了.慢慢来吧.&lt;/b&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Baking Pi - Operating Systems Development</title>
   <link href="http://qinjian623.github.com/2012/09/03/baking_pi_intro"/>
   <updated>2012-09-03T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/09/03/baking_pi_intro</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;介绍&lt;sup&gt;&lt;a class=&quot;footref&quot; name=&quot;fnr-.1&quot; href=&quot;#fn-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;欢迎来到本课程,课程作者为&lt;a href=&quot;#awc32-cam.ac.uk&quot;&gt;Alex Chadwick.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
这个网站旨在帮助你完成在Raspberry Pi上进行一个基本的操作系统的开发.目标读者是16岁以上,当然更小的读者也可以,如果可以有其他人的帮助当然更好.课程目前还在进展中,随时会有新加入的内容.
&lt;/p&gt;
&lt;p&gt;
本课程主要内容是利用汇编语言进行操作系统开发.设计之初就考虑到了没有操作系统开发和汇编语言背景的读者,因此无需上述的背景知识.当然如果有编程经验的话,更是锦上添花.整个课程如下面的表格,被划分为多个课时.每个课时都会包括一些理论的介绍,实践训练和完整的答案.
&lt;/p&gt;
&lt;p&gt;
本课程不会涉及到操作系统开发的细节,只是完成开发最基本的功能,而且各个主要部分之间也相对分离.在最后,读者有望可以对操作系统有一定的了解,并且有足够的能力将课程中所有的部分组合在一起,形成一个完整的有一定功能的操作系统.课程涉及的内容并不多,但是读者如果有心,仍有很多自己可以发挥的地方.譬如,完成课程后,完成函数的那一课后，你可以考虑出更好的汇编代码,或者是在有关图形操作的课程后考虑下3D操作系统.别忘了,这是操作系统课程,因此你可以随意创造出你自己的心目中的东西.一旦你有任何新想法,尝试一下不会有坏处.计算机科学还是个很年轻的领域,很多方面都亟待发掘.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;基本要求&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;

&lt;p&gt;要想完成这门课程,你得准备好一个 Raspberry Pi,兼容的SD卡,以及电源,还有用于开发的电脑,操作系统可以是linux, Windows, Mac OS X,电脑要可以安装软件和读写SD卡.如果有个可以连上 Raspberry Pi的显示器当然更好,不过不是必须.
&lt;/p&gt;
&lt;p&gt;
软件上,你需要目标平台是ARMv6的GNU开源工具链,&lt;a href=&quot;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/downloads.html&quot;&gt;下载&lt;/a&gt; 页面上有他们的链接,还有所有练习的参考答案.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;课时安排&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;right&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;right&quot;&gt;编号&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;课程名称&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;0&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;介绍&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;这一部分没有实质的内容,主要是介绍作系统和汇编代码的基本概念和其他重要的基础知识.如果急于进入课程的主体,可以选择跳过这一课程&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;OK LED系列&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;(难度简单)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;1&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;OK01&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;说明最基本的起步和怎样打开Raspberry Pi上的'OK' LED灯,灯的位置在RCA和USB接口附近&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;2&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;OK02&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于OK01,内容是让'OK' LED可以重复关闭和开启&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;OK03&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于OK02,讲解如何使用汇编中的函数提高代码的复用性和可读性&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;4&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;OK04&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于OK03,如何利用定时器让LED灯可以精确的闪烁&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;5&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;OK05&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于OK04,让LED发出SOS的摩斯码(&amp;hellip;&amp;mdash;&amp;hellip;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Screen系列&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;(高级部分)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;6&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Screen01&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;介绍有关图形学的基本理论,然后实践之,在显示器或者电视上显示渐变图案&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;7&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Screen02&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于Screen01,教授如何画线以及生成一个伪随机数的方法&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;8&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Screen03&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于Screen02,教授如何打印文本到显示器上,并且介绍内核命令行的概念&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;9&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Screen04&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于Screen03,教授如何处理文本在屏幕上显示计算值&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Input系列&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;(高级部分)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;10&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Input01&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;介绍有关驱动,链接程序还有键盘的概念.然后实现打印输入的字符到显示器上的功能&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;11&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Input02&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;基于Input01,教授如何构建操作系统的命令行接口&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;sup&gt;&lt;a class=&quot;footnum&quot; name=&quot;fn-.1&quot; href=&quot;#fnr-.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 该系列翻译自&lt;a href=&quot;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/&quot;&gt;http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/&lt;/a&gt; ,根据其协议使用版权 &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/3.0/deed.en_GB&quot;&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License.&lt;/a&gt;
&lt;/p&gt;




&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>又想回到Linux怀抱了</title>
   <link href="http://qinjian623.github.com/2012/08/29/OS"/>
   <updated>2012-08-29T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/08/29/OS</id>
   <content type="html">&lt;p&gt;
犯贱,今天稍微配了下emacs,然后突然又起折腾的冲动了.想弄个Arch来玩玩.计划环境如下:
&lt;/p&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; OS&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;  Arch
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; WM&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;  不用DE了,就用awesome吧
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; HD&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;  整个上网本弄下.
&lt;/p&gt;
&lt;p&gt;
我确实是不折腾不死星人&amp;hellip;&amp;hellip;
Mac实在不能满足我的欲望&amp;hellip;&amp;hellip;
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;先放着,看看能不能让我的冲动消失&amp;hellip;&amp;hellip;&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;span style=&quot;text-decoration:underline;&quot;&gt;最新更新,鉴于自己估计要开始玩下树莓派,经费日趋紧张,这个计划估计要后延 一段时间啦&lt;/span&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Org-mode笔记</title>
   <link href="http://qinjian623.github.com/2012/08/28/org_mode_notes"/>
   <updated>2012-08-28T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/08/28/org_mode_notes</id>
   <content type="html">&lt;p&gt;
考虑到现在开始用org-mode写东西,干脆再稍微记录下org-mode的东西,虽说平时使用没有什么问题,但是某些自己不常用的记录下来也没有错.
&lt;/p&gt;
&lt;p&gt;
&lt;span style=&quot;text-decoration:underline;&quot;&gt;以下内容为2012-08-28&lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;TODO-list的用法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;/div&gt;

&lt;div id=&quot;outline-container-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;done DONE&quot;&gt;DONE&lt;/span&gt; 变更状态&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;

&lt;ul&gt;
&lt;li&gt;shift+左/右 状态的变化

&lt;/li&gt;
&lt;li&gt;shift+上/下 优先级的变化
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;done DONE&quot;&gt;DONE&lt;/span&gt; 记录完成时间&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;

&lt;p&gt;    &lt;span class=&quot;timestamp-wrapper&quot;&gt;&lt;span class=&quot;timestamp-kwd&quot;&gt;CLOSED: &lt;/span&gt; &lt;span class=&quot;timestamp&quot;&gt;2012-08-29 Wed 22:01&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;
(setq org-log-done 'time)
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;done DONE&quot;&gt;DONE&lt;/span&gt; 计算时间投入&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;

&lt;p&gt;    &lt;span class=&quot;timestamp-wrapper&quot;&gt;&lt;span class=&quot;timestamp-kwd&quot;&gt;CLOSED: &lt;/span&gt; &lt;span class=&quot;timestamp&quot;&gt;2012-08-29 Wed 22:01&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;
   &lt;b&gt;这个很重要的样子&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
   开始:control-c control-x control-i
&lt;/p&gt;
&lt;p&gt;   
   结束:control-c control-x control-o
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; 自定义状态&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;

&lt;p&gt;   暂时用不上,记了也早晚会忘记.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;&lt;span class=&quot;todo TODO&quot;&gt;TODO&lt;/span&gt; 大项目拆分&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;

&lt;p&gt;   目前用不上,没那么复杂的项目需要处理.
   但是checkbox的快捷键可以记录下:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;control-c control-c 变化状态
&lt;/li&gt;
&lt;li&gt;meta-shift-return 新增
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://emacser.com/org-mode.htm&quot;&gt;http://emacser.com/org-mode.htm&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>改个地方</title>
   <link href="http://qinjian623.github.com/2012/08/19/to_here"/>
   <updated>2012-08-19T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/08/19/to_here</id>
   <content type="html">&lt;p&gt;
自己实在是个折腾不止的人,发现blogger上传的org-mode格式不太好看,竟然自己就换到github上来了,其实也是自己的早就想弄个静态的玩下,之前nodejs试了下,果然js还是太可怕.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;步骤上&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;ol&gt;
&lt;li&gt;github建立项目,然后自己完全删除了里面的内容
&lt;/li&gt;
&lt;li&gt;把Jekyll-bootstrap clone了过来,手动拷贝内容到自己的github项目里面
&lt;/li&gt;
&lt;li&gt;配置emacs,保证生成html的时候只是body, 这里在org-mode里面的wong项目(是这个名字么?)有说明,直接拿来用了.
&lt;/li&gt;
&lt;/ol&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;发布步骤&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;ol&gt;
&lt;li&gt;emacs 写org-mode,注意前面要有个用于jekyll识别的文件头信息
&lt;/li&gt;
&lt;li&gt;导出成html
&lt;/li&gt;
&lt;li&gt;git add/commit/push
&lt;/li&gt;
&lt;li&gt;完成
&lt;/li&gt;
&lt;/ol&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;备注&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
看着貌似几句话就结束了,其实弄了不少时间,周末的两个下午.还得改css,自己又不熟&amp;hellip;&amp;hellip;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Reader订阅</title>
   <link href="http://qinjian623.github.com/2012/08/17/GoogleReader"/>
   <updated>2012-08-17T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/08/17/GoogleReader</id>
   <content type="html">&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;说明&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;没想到竟然有这么多,很多都是订阅的时候可能还有更新,不过目前不再更新的了.
&lt;/p&gt;
&lt;p&gt;
&lt;span style=&quot;text-decoration:underline;&quot;&gt;加下划线的是自己重点看,或者质量比较高的.&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;我的Google Reader订阅&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;4G spaces:&lt;/span&gt; &lt;a href=&quot;http://blog.youxu.info&quot;&gt;http://blog.youxu.info&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;A Geek's Page:&lt;/span&gt; &lt;a href=&quot;http://wangcong.org/blog&quot;&gt;http://wangcong.org/blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;C++博客-λ-calculus（惊愕到手了欧耶，GetBlogPostIds.aspx）:&lt;a href=&quot;http://www.cppblog.com/vczh/&quot;&gt;http://www.cppblog.com/vczh/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;Chun Tian (binghe):&lt;/span&gt; &lt;a href=&quot;http://tianchunbinghe.blog.163.com&quot;&gt;http://tianchunbinghe.blog.163.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Coding in Dreams:&lt;a href=&quot;http://blog.tomtung.com/&quot;&gt;http://blog.tomtung.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;DBA Notes - 网站架构性能优化技术评论:&lt;/span&gt; &lt;a href=&quot;http://www.dbanotes.net/&quot;&gt;http://www.dbanotes.net/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;demo@virushuo:&lt;a href=&quot;http://blog.devep.net/virushuo/&quot;&gt;http://blog.devep.net/virushuo/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;dm:&lt;a href=&quot;http://hi.baidu.com/int3&quot;&gt;http://hi.baidu.com/int3&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Dutor - 人生天地之间，如白驹过隙忽然而已:&lt;a href=&quot;http://www.dutor.net&quot;&gt;http://www.dutor.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;edsionte|新手区:&lt;/span&gt;   &lt;a href=&quot;http://edsionte.com/techblog&quot;&gt;http://edsionte.com/techblog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;Emacs中文网:&lt;/span&gt;  &lt;a href=&quot;http://emacser.com&quot;&gt;http://emacser.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ever 17:&lt;a href=&quot;http://blog.csdn.net/winterttr&quot;&gt;http://blog.csdn.net/winterttr&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;Free Mind:&lt;/span&gt; &lt;a href=&quot;http://freemind.pluskid.org&quot;&gt;http://freemind.pluskid.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Google 黑板报 - Google + （谷歌）中国的博客网志，走近我们的产品、技术和文化:&lt;a href=&quot;http://googlechinablog.blogspot.com/&quot;&gt;http://googlechinablog.blogspot.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;HelloGcc Working Group:&lt;/span&gt; &lt;a href=&quot;http://hellogcc.blogbus.com&quot;&gt;http://hellogcc.blogbus.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;HoH的阅读分享:&lt;a href=&quot;http://www.google.com/reader/view/feed/http://feed.feedsky.com/hohcn-share&quot;&gt;http://www.google.com/reader/view/feed%2Fhttp%3A%2F%2Ffeed.feedsky.com%2Fhohcn-share&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;IBM developerWorks 中国 : Linux : Articles,Tutorials:&lt;a href=&quot;http://www.ibm.com/developerworks/cn/&quot;&gt;http://www.ibm.com/developerworks/cn/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;IUSR's Unnamed Seraph Reborn:&lt;a href=&quot;http://blog.iusr.me&quot;&gt;http://blog.iusr.me&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ken Wu's Blog:&lt;a href=&quot;http://kenwublog.com&quot;&gt;http://kenwublog.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;kgdb:&lt;/span&gt; &lt;a href=&quot;http://www.kgdb.info&quot;&gt;http://www.kgdb.info&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;LinuxTOY:&lt;a href=&quot;http://linuxtoy.org&quot;&gt;http://linuxtoy.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Linux内核之旅:&lt;a href=&quot;http://www.kerneltravel.net&quot;&gt;http://www.kerneltravel.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linux大棚-roclinux.cn:&lt;a href=&quot;http://roclinux.cn&quot;&gt;http://roclinux.cn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;little wonders:&lt;a href=&quot;http://wyest.blogbus.com&quot;&gt;http://wyest.blogbus.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;LLVM Project Blog:&lt;a href=&quot;http://blog.llvm.org/&quot;&gt;http://blog.llvm.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;loop&lt;sub&gt;in&lt;/sub&gt;&lt;sub&gt;codes&lt;/sub&gt;:&lt;a href=&quot;http://codemacro.com/&quot;&gt;http://codemacro.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;Matrix67:&lt;/span&gt;  My Blog:&lt;a href=&quot;http://www.matrix67.com/blog&quot;&gt;http://www.matrix67.com/blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Nooidea.com | 装傻充愣:&lt;a href=&quot;http://www.nooidea.com&quot;&gt;http://www.nooidea.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Paul Graham: Essays:&lt;a href=&quot;http://www.paulgraham.com/&quot;&gt;http://www.paulgraham.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;Publications by Googlers:&lt;/span&gt; &lt;a href=&quot;http://research.google.com/pubs/papers.html&quot;&gt;http://research.google.com/pubs/papers.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;R2S:&lt;a href=&quot;http://www.road2stat.com/cn&quot;&gt;http://www.road2stat.com/cn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tim[后端技术]:&lt;a href=&quot;http://timyang.net&quot;&gt;http://timyang.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;tombkeeper的和谐Blog:&lt;a href=&quot;http://hi.baidu.com/tombkeeper&quot;&gt;http://hi.baidu.com/tombkeeper&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;typeof.net:&lt;a href=&quot;http://typeof.net&quot;&gt;http://typeof.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Vimer:&lt;a href=&quot;http://www.vimer.cn&quot;&gt;http://www.vimer.cn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;What's in johnc's mind:&lt;a href=&quot;http://www.googies.info/blog&quot;&gt;http://www.googies.info/blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;YIFEIYANG:&lt;a href=&quot;http://www.yifeiyang.net&quot;&gt;http://www.yifeiyang.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Yume:&lt;a href=&quot;http://blog.kghost.info&quot;&gt;http://blog.kghost.info&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;yumengkk的专栏:&lt;a href=&quot;http://blog.csdn.net/yumengkk&quot;&gt;http://blog.csdn.net/yumengkk&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;丕子:&lt;a href=&quot;http://www.zhizhihu.com&quot;&gt;http://www.zhizhihu.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;世纪心理沙龙:&lt;a href=&quot;http://www.xlxcn.net&quot;&gt;http://www.xlxcn.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;云存储技术博客：光头老蒋(云存储技术，虚拟化，IP存储， 数据库容灾等）:&lt;a href=&quot;http://www.click2earth.com/&quot;&gt;http://www.click2earth.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;云风的BLOG:&lt;a href=&quot;http://blog.codingnow.com/&quot;&gt;http://blog.codingnow.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;仰空冥思:&lt;a href=&quot;http://www.lupaworld.com/?uid-26540&quot;&gt;http://www.lupaworld.com/?uid-26540&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;刘未鹏 | Mind Hacks:&lt;/span&gt; &lt;a href=&quot;http://mindhacks.cn&quot;&gt;http://mindhacks.cn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;刘未鹏(pongba) 的收藏:&lt;a href=&quot;http://www.douban.com/people/pongba/&quot;&gt;http://www.douban.com/people/pongba/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;励志人生(LzTopic):&lt;a href=&quot;http://www.lztopic.com&quot;&gt;http://www.lztopic.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;博客园-Dbger的技术博客:&lt;a href=&quot;http://www.cnblogs.com/baiyanhuang/&quot;&gt;http://www.cnblogs.com/baiyanhuang/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;博客园-Milo的游戏开发:&lt;a href=&quot;http://www.cnblogs.com/miloyip/&quot;&gt;http://www.cnblogs.com/miloyip/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;博客园-SoftwareTeacher:&lt;a href=&quot;http://www.cnblogs.com/xinz/&quot;&gt;http://www.cnblogs.com/xinz/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;博客园-leftnoteasy:&lt;a href=&quot;http://www.cnblogs.com/LeftNotEasy/&quot;&gt;http://www.cnblogs.com/LeftNotEasy/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;大嘴彼得 | Loud Mouth Peter:&lt;a href=&quot;http://xzpeter.org&quot;&gt;http://xzpeter.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;大风起兮云飞扬:&lt;a href=&quot;http://hi.baidu.com/aullik5&quot;&gt;http://hi.baidu.com/aullik5&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;天堂的模样应该是科幻世界:&lt;a href=&quot;http://blog.sina.com.cn/liguangyi&quot;&gt;http://blog.sina.com.cn/liguangyi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;学而时嘻之:&lt;/span&gt; &lt;a href=&quot;http://www.geekonomics10000.com&quot;&gt;http://www.geekonomics10000.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;宇宙的心弦:&lt;a href=&quot;http://www.eaglefantasy.com&quot;&gt;http://www.eaglefantasy.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;小北的家:&lt;a href=&quot;http://blog.csdn.net/ijuliet&quot;&gt;http://blog.csdn.net/ijuliet&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;并行实验室 | Parallel Labs:&lt;/span&gt; &lt;a href=&quot;http://www.parallellabs.com&quot;&gt;http://www.parallellabs.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;康华的专栏:&lt;a href=&quot;http://blog.csdn.net/kanghua&quot;&gt;http://blog.csdn.net/kanghua&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;张五常的空间:&lt;a href=&quot;http://zhangwuchang.blog.sohu.com/&quot;&gt;http://zhangwuchang.blog.sohu.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;张哲的博客(zhangzhe's blogs):&lt;a href=&quot;http://zhangzhe.heroku.com/blogs&quot;&gt;http://zhangzhe.heroku.com/blogs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;弯曲评论:&lt;a href=&quot;http://www.tektalk.org&quot;&gt;http://www.tektalk.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;微软、Google等面试题:&lt;a href=&quot;http://zhedahht.blog.163.com&quot;&gt;http://zhedahht.blog.163.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;微软亚洲研究院:&lt;a href=&quot;http://blog.sina.com.cn/msra&quot;&gt;http://blog.sina.com.cn/msra&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;我爱Podcast | Podcast中文站:&lt;a href=&quot;http://52podcast.com&quot;&gt;http://52podcast.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;我爱正则表达式:&lt;a href=&quot;http://iregex.org&quot;&gt;http://iregex.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;我的黒纱裙:&lt;/span&gt; &lt;a href=&quot;http://blog.sina.com.cn/yingpeng332&quot;&gt;http://blog.sina.com.cn/yingpeng332&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;我自然:&lt;a href=&quot;http://www.elcorp.com.cn&quot;&gt;http://www.elcorp.com.cn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;晨枫小苑:&lt;a href=&quot;http://zhouf601117.blog.163.com&quot;&gt;http://zhouf601117.blog.163.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;有{間}客栈:&lt;a href=&quot;http://imcc.blogbus.com&quot;&gt;http://imcc.blogbus.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;极限手指:&lt;a href=&quot;http://ahei.info&quot;&gt;http://ahei.info&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;林健的BLOG:&lt;a href=&quot;http://blog.linjian.org&quot;&gt;http://blog.linjian.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;枪炮世界 / 装备与生存:&lt;/span&gt; &lt;a href=&quot;http://blog.163.com/gunworld@126&quot;&gt;http://blog.163.com/gunworld@126&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;武志红的BLOG:&lt;a href=&quot;http://blog.sina.com.cn/wuzii&quot;&gt;http://blog.sina.com.cn/wuzii&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;游戏人生:&lt;a href=&quot;http://www.yulefox.com&quot;&gt;http://www.yulefox.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;潇水的博客:&lt;a href=&quot;http://blog.sina.com.cn/xiaoshuiblog&quot;&gt;http://blog.sina.com.cn/xiaoshuiblog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;牛来疯:&lt;a href=&quot;http://www.duniuniu.com&quot;&gt;http://www.duniuniu.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;科罗廖夫的军事客厅:&lt;/span&gt; &lt;a href=&quot;http://gaosga.blog.163.com&quot;&gt;http://gaosga.blog.163.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;笑对人生，傲立寰宇:&lt;a href=&quot;http://dahuasky.wordpress.com&quot;&gt;http://dahuasky.wordpress.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;简单的龙浩:&lt;a href=&quot;http://www.longtask.com/blog&quot;&gt;http://www.longtask.com/blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;结构之法 算法之道:&lt;a href=&quot;http://blog.csdn.net/v_july_v&quot;&gt;http://blog.csdn.net/v_july_v&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;编译点滴:&lt;/span&gt; &lt;a href=&quot;http://www.lingcc.com&quot;&gt;http://www.lingcc.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;胖子康:&lt;a href=&quot;http://www.moorekang.com&quot;&gt;http://www.moorekang.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;褪墨|时间管理、个人提升和演讲技巧:&lt;/span&gt; &lt;a href=&quot;http://www.mifengtd.cn&quot;&gt;http://www.mifengtd.cn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;许小年:&lt;a href=&quot;http://xuxiaonian.blog.sohu.com/&quot;&gt;http://xuxiaonian.blog.sohu.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;谢国忠:&lt;a href=&quot;http://xieguozhong.blog.sohu.com/&quot;&gt;http://xieguozhong.blog.sohu.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;赖勇浩的编程私伙局- CSDN博客:&lt;a href=&quot;http://blog.csdn.net/blogrss.aspx?username=lanphaday&quot;&gt;http://blog.csdn.net/blogrss.aspx?username=lanphaday&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;郭凯经济笔记:&lt;/span&gt; &lt;a href=&quot;http://www.kaieconblog.net&quot;&gt;http://www.kaieconblog.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;酷壳– CoolShell.cn:&lt;/span&gt; &lt;a href=&quot;http://coolshell.cn&quot;&gt;http://coolshell.cn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;text-decoration:underline;&quot;&gt;阮一峰的网络日志:&lt;/span&gt; &lt;a href=&quot;http://www.ruanyifeng.com/blog/&quot;&gt;http://www.ruanyifeng.com/blog/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;陈志武:&lt;a href=&quot;http://chenzhiwu.blog.sohu.com/&quot;&gt;http://chenzhiwu.blog.sohu.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;陈硕的Blog:&lt;a href=&quot;http://blog.csdn.net/blogrss.aspx?username=Solstice&quot;&gt;http://blog.csdn.net/blogrss.aspx?username=Solstice&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;陈贤安:&lt;a href=&quot;http://cxa.im/blog&quot;&gt;http://cxa.im/blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;韩寒-新浪博客:&lt;a href=&quot;http://blog.sina.com.cn/twocold&quot;&gt;http://blog.sina.com.cn/twocold&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;XML可以导入的版本&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;





&lt;pre class=&quot;example&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;opml version=&quot;1.0&quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;毛毛 subscriptions in Google Reader&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;outline title=&quot;RSS源&quot; text=&quot;RSS源&quot;&amp;gt;
            &amp;lt;outline text=&quot;4G spaces&quot; title=&quot;4G spaces&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.youxu.info/feed/&quot; htmlUrl=&quot;http://blog.youxu.info&quot;/&amp;gt;
            &amp;lt;outline text=&quot;A Geek's Page&quot; title=&quot;A Geek's Page&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://wangcong.org/blog/?feed=rss2&quot; htmlUrl=&quot;http://wangcong.org/blog&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Android Developers Blog&quot;
                title=&quot;Android Developers Blog&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://android-developers.blogspot.com/feeds/posts/default&quot; htmlUrl=&quot;http://android-developers.blogspot.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;AnyShare&quot; title=&quot;AnyShare&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.anyshare.org/feed&quot; htmlUrl=&quot;http://www.anyshare.org&quot;/&amp;gt;
            &amp;lt;outline
                text=&quot;C++博客-λ-calculus（惊愕到手了欧耶，GetBlogPostIds.aspx）&quot;
                title=&quot;C++博客-λ-calculus（惊愕到手了欧耶，GetBlogPostIds.aspx）&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://www.cppblog.com/vczh/rss.aspx&quot; htmlUrl=&quot;http://www.cppblog.com/vczh/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Chun Tian (binghe)&quot;
                title=&quot;Chun Tian (binghe)&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://tianchunbinghe.blog.163.com/rss/&quot; htmlUrl=&quot;http://tianchunbinghe.blog.163.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Coding in Dreams&quot; title=&quot;Coding in Dreams&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.tomtung.com/feed/atom.xml&quot; htmlUrl=&quot;http://blog.tomtung.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;DBA Notes - 网站架构性能优化技术评论&quot;
                title=&quot;DBA Notes - 网站架构性能优化技术评论&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.dbanotes.net/atom.xml&quot; htmlUrl=&quot;http://www.dbanotes.net/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;demo@virushuo&quot; title=&quot;demo@virushuo&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds2.feedburner.com/virushuo&quot; htmlUrl=&quot;http://blog.devep.net/virushuo/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;dm&quot; title=&quot;dm&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://hi.baidu.com/int3/rss&quot; htmlUrl=&quot;http://hi.baidu.com/int3&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Dutor - 人生天地之间，如白驹过隙忽然而已&quot;
                title=&quot;Dutor - 人生天地之间，如白驹过隙忽然而已&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds.feedburner.com/dutor&quot; htmlUrl=&quot;http://www.dutor.net&quot;/&amp;gt;
            &amp;lt;outline text=&quot;edsionte|新手区&quot; title=&quot;edsionte|新手区&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://edsionte.com/techblog/feed&quot; htmlUrl=&quot;http://edsionte.com/techblog&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Emacs中文网&quot; title=&quot;Emacs中文网&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://emacser.com/feed&quot; htmlUrl=&quot;http://emacser.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Ever 17&quot; title=&quot;Ever 17&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.csdn.net/winterTTr/rss/list&quot; htmlUrl=&quot;http://blog.csdn.net/winterttr&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Free Mind&quot; title=&quot;Free Mind&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://freemind.pluskid.org/rss.xml&quot; htmlUrl=&quot;http://freemind.pluskid.org&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Free Mind&quot; title=&quot;Free Mind&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.pluskid.org/?feed=rss2&quot; htmlUrl=&quot;http://blog.pluskid.org&quot;/&amp;gt;
            &amp;lt;outline
                text=&quot;Google 黑板报 - Google （谷歌）中国的博客网志，走近我们的产品、技术和文化&quot;
                title=&quot;Google 黑板报 - Google （谷歌）中国的博客网志，走近我们的产品、技术和文化&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://www.google.com.hk/ggblog/googlechinablog/atom.xml&quot; htmlUrl=&quot;http://googlechinablog.blogspot.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;HelloGcc Working Group&quot;
                title=&quot;HelloGcc Working Group&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://hellogcc.blogbus.com/index.rdf&quot; htmlUrl=&quot;http://hellogcc.blogbus.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;HoH的阅读分享&quot; title=&quot;HoH的阅读分享&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/hohcn-share&quot; htmlUrl=&quot;http://www.google.com/reader/view/feed%2Fhttp%3A%2F%2Ffeed.feedsky.com%2Fhohcn-share&quot;/&amp;gt;
            &amp;lt;outline
                text=&quot;IBM developerWorks 中国 : Linux : Articles,Tutorials&quot;
                title=&quot;IBM developerWorks 中国 : Linux : Articles,Tutorials&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://www.ibm.com/developerworks/cn/views/rss/customrssatom.jsp?zone_by=Linux&amp;amp;amp;type_by=Articles&amp;amp;amp;type_by=Tutorials&amp;amp;amp;search_by=&amp;amp;amp;day=1&amp;amp;amp;month=01&amp;amp;amp;year=2005&amp;amp;amp;max_entries=20&amp;amp;amp;feed_by=rss&amp;amp;amp;isGUI=true&amp;amp;amp;Submit.x=34&amp;amp;amp;Submit.y=9&quot; htmlUrl=&quot;http://www.ibm.com/developerworks/cn/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;IUSR's Unnamed Seraph Reborn&quot;
                title=&quot;IUSR's Unnamed Seraph Reborn&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.iusr.me/feed/&quot; htmlUrl=&quot;http://blog.iusr.me&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Ken Wu's Blog&quot; title=&quot;Ken Wu's Blog&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://feed.kenwublog.com/&quot; htmlUrl=&quot;http://kenwublog.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;kgdb&quot; title=&quot;kgdb&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.kgdb.info/feed/&quot; htmlUrl=&quot;http://www.kgdb.info&quot;/&amp;gt;
            &amp;lt;outline text=&quot;LinuxTOY&quot; title=&quot;LinuxTOY&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds.feedburner.com/linuxtoy&quot; htmlUrl=&quot;http://linuxtoy.org&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Linux内核之旅&quot; title=&quot;Linux内核之旅&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.kerneltravel.net/?feed=rss2&quot; htmlUrl=&quot;http://www.kerneltravel.net&quot;/&amp;gt;
            &amp;lt;outline text=&quot;linux大棚-roclinux.cn&quot;
                title=&quot;linux大棚-roclinux.cn&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/roclinux&quot; htmlUrl=&quot;http://roclinux.cn&quot;/&amp;gt;
            &amp;lt;outline text=&quot;little wonders&quot; title=&quot;little wonders&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://wyest.blogbus.com/index.rdf&quot; htmlUrl=&quot;http://wyest.blogbus.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;LLVM Project Blog&quot; title=&quot;LLVM Project Blog&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.llvm.org/feeds/posts/default&quot; htmlUrl=&quot;http://blog.llvm.org/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;loop_in_codes&quot; title=&quot;loop_in_codes&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://codemacro.com/feed&quot; htmlUrl=&quot;http://codemacro.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Matrix67: My Blog&quot; title=&quot;Matrix67: My Blog&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://www.matrix67.com/blog/feed.asp&quot; htmlUrl=&quot;http://www.matrix67.com/blog&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Nooidea.com | 装傻充愣&quot;
                title=&quot;Nooidea.com | 装傻充愣&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.nooidea.com/feed&quot; htmlUrl=&quot;http://www.nooidea.com&quot;/&amp;gt;
            &amp;lt;outline
                text=&quot;O'Reilly Radar - Insight, analysis, and research about emerging technologies.&quot;
                title=&quot;O'Reilly Radar - Insight, analysis, and research about emerging technologies.&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds.feedburner.com/oreilly/radar/atom&quot; htmlUrl=&quot;http://radar.oreilly.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Paul Graham: Essays&quot;
                title=&quot;Paul Graham: Essays&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.aaronsw.com/2002/feeds/pgessays.rss&quot; htmlUrl=&quot;http://www.paulgraham.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Publications by Googlers&quot;
                title=&quot;Publications by Googlers&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://research.google.com/pubs/atom.xml&quot; htmlUrl=&quot;http://research.google.com/pubs/papers.html&quot;/&amp;gt;
            &amp;lt;outline text=&quot;R2S&quot; title=&quot;R2S&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/road2stat?source=ignitionfork&quot; htmlUrl=&quot;http://www.road2stat.com/cn&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Rough Type: Nicholas Carr's Blog&quot;
                title=&quot;Rough Type: Nicholas Carr's Blog&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds.feedburner.com/roughtype/unGc&quot; htmlUrl=&quot;http://www.roughtype.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Tim[后端技术]&quot; title=&quot;Tim[后端技术]&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://timyang.net/feed/&quot; htmlUrl=&quot;http://timyang.net&quot;/&amp;gt;
            &amp;lt;outline text=&quot;tombkeeper的和谐Blog&quot; title=&quot;tombkeeper的和谐Blog&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://hi.baidu.com/tombkeeper/rss&quot; htmlUrl=&quot;http://hi.baidu.com/tombkeeper&quot;/&amp;gt;
            &amp;lt;outline text=&quot;typeof.net&quot; title=&quot;typeof.net&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://typeof.net/feed/&quot; htmlUrl=&quot;http://typeof.net&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Vimer&quot; title=&quot;Vimer&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/vimer&quot; htmlUrl=&quot;http://www.vimer.cn&quot;/&amp;gt;
            &amp;lt;outline text=&quot;What's in johnc's mind&quot;
                title=&quot;What's in johnc's mind&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/Googies&quot; htmlUrl=&quot;http://www.googies.info/blog&quot;/&amp;gt;
            &amp;lt;outline text=&quot;YIFEIYANG&quot; title=&quot;YIFEIYANG&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.yifeiyang.net/feed/&quot; htmlUrl=&quot;http://www.yifeiyang.net&quot;/&amp;gt;
            &amp;lt;outline text=&quot;Yume&quot; title=&quot;Yume&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.kghost.info/index.php/feed/&quot; htmlUrl=&quot;http://blog.kghost.info&quot;/&amp;gt;
            &amp;lt;outline text=&quot;yumengkk的专栏&quot; title=&quot;yumengkk的专栏&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.csdn.net/yumengkk/rss/list&quot; htmlUrl=&quot;http://blog.csdn.net/yumengkk&quot;/&amp;gt;
            &amp;lt;outline text=&quot;丕子&quot; title=&quot;丕子&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.zhizhihu.com/feed&quot; htmlUrl=&quot;http://www.zhizhihu.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;世纪心理沙龙&quot; title=&quot;世纪心理沙龙&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.xlxcn.net/feed&quot; htmlUrl=&quot;http://www.xlxcn.net&quot;/&amp;gt;
            &amp;lt;outline text=&quot;云存储技术博客：光头老蒋(云存储技术，虚拟化，IP存储， 数据库容灾等）&quot;
                title=&quot;云存储技术博客：光头老蒋(云存储技术，虚拟化，IP存储， 数据库容灾等）&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.click2earth.com/rss.xml&quot; htmlUrl=&quot;http://www.click2earth.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;云风的BLOG&quot; title=&quot;云风的BLOG&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.codingnow.com/atom.xml&quot; htmlUrl=&quot;http://blog.codingnow.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;从三味书屋到百草园&quot; title=&quot;从三味书屋到百草园&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.sina.com.cn/rss/1569777711.xml&quot; htmlUrl=&quot;http://blog.sina.com.cn/yinwang0&quot;/&amp;gt;
            &amp;lt;outline text=&quot;仰空冥思&quot; title=&quot;仰空冥思&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.lupaworld.com/26540/action-rss-type-blog.html&quot; htmlUrl=&quot;http://www.lupaworld.com/?uid-26540&quot;/&amp;gt;
            &amp;lt;outline text=&quot;刘未鹏 | Mind Hacks&quot; title=&quot;刘未鹏 | Mind Hacks&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://mindhacks.cn/feed/&quot; htmlUrl=&quot;http://mindhacks.cn&quot;/&amp;gt;
            &amp;lt;outline text=&quot;刘未鹏(pongba) 的收藏&quot; title=&quot;刘未鹏(pongba) 的收藏&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://www.douban.com/feed/people/pongba/interests&quot; htmlUrl=&quot;http://www.douban.com/people/pongba/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;励志人生(LzTopic)&quot; title=&quot;励志人生(LzTopic)&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://feed.lztopic.com/&quot; htmlUrl=&quot;http://www.lztopic.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;博客园-Dbger的技术博客&quot; title=&quot;博客园-Dbger的技术博客&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://www.debuggingnow.com/blog/atom.xml&quot; htmlUrl=&quot;http://www.cnblogs.com/baiyanhuang/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;博客园-Milo的游戏开发&quot; title=&quot;博客园-Milo的游戏开发&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://www.cnblogs.com/miloyip/rss&quot; htmlUrl=&quot;http://www.cnblogs.com/miloyip/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;博客园-SoftwareTeacher&quot;
                title=&quot;博客园-SoftwareTeacher&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.cnblogs.com/xinz/rss&quot; htmlUrl=&quot;http://www.cnblogs.com/xinz/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;博客园_leftnoteasy&quot; title=&quot;博客园_leftnoteasy&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.cnblogs.com/blog/u/62514/rss&quot; htmlUrl=&quot;http://www.cnblogs.com/LeftNotEasy/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;大嘴彼得 | Loud Mouth Peter&quot;
                title=&quot;大嘴彼得 | Loud Mouth Peter&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://xzpeter.org/?feed=rss2&quot; htmlUrl=&quot;http://xzpeter.org&quot;/&amp;gt;
            &amp;lt;outline text=&quot;大风起兮云飞扬&quot; title=&quot;大风起兮云飞扬&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://hi.baidu.com/aullik5/rss&quot; htmlUrl=&quot;http://hi.baidu.com/aullik5&quot;/&amp;gt;
            &amp;lt;outline text=&quot;天堂的模样应该是科幻世界&quot; title=&quot;天堂的模样应该是科幻世界&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.sina.com.cn/rss/liguangyi.xml&quot; htmlUrl=&quot;http://blog.sina.com.cn/liguangyi&quot;/&amp;gt;
            &amp;lt;outline text=&quot;学而时嘻之&quot; title=&quot;学而时嘻之&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.geekonomics10000.com/feed&quot; htmlUrl=&quot;http://www.geekonomics10000.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;宇宙的心弦&quot; title=&quot;宇宙的心弦&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/eaglefantasy&quot; htmlUrl=&quot;http://www.eaglefantasy.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;小北的家&quot; title=&quot;小北的家&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.csdn.net/ijuliet/rss/list&quot; htmlUrl=&quot;http://blog.csdn.net/ijuliet&quot;/&amp;gt;
            &amp;lt;outline text=&quot;并行实验室 | Parallel Labs&quot;
                title=&quot;并行实验室 | Parallel Labs&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.parallellabs.com/feed/&quot; htmlUrl=&quot;http://www.parallellabs.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;康华的专栏&quot; title=&quot;康华的专栏&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.csdn.net/kanghua/rss/list&quot; htmlUrl=&quot;http://blog.csdn.net/kanghua&quot;/&amp;gt;
            &amp;lt;outline text=&quot;张五常的空间&quot; title=&quot;张五常的空间&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://zhangwuchang.blog.sohu.com/rss&quot; htmlUrl=&quot;http://zhangwuchang.blog.sohu.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;张哲的博客(zhangzhe's blogs)&quot;
                title=&quot;张哲的博客(zhangzhe's blogs)&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://zhangzhe.heroku.com/blogs.rss&quot; htmlUrl=&quot;http://zhangzhe.heroku.com/blogs&quot;/&amp;gt;
            &amp;lt;outline text=&quot;弯曲评论&quot; title=&quot;弯曲评论&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/tektalk&quot; htmlUrl=&quot;http://www.tektalk.org&quot;/&amp;gt;
            &amp;lt;outline text=&quot;微软、Google等面试题&quot; title=&quot;微软、Google等面试题&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://zhedahht.blog.163.com/rss/&quot; htmlUrl=&quot;http://zhedahht.blog.163.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;微软亚洲研究院&quot; title=&quot;微软亚洲研究院&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.sina.com.cn/rss/msra.xml&quot; htmlUrl=&quot;http://blog.sina.com.cn/msra&quot;/&amp;gt;
            &amp;lt;outline text=&quot;我爱Podcast | Podcast中文站&quot;
                title=&quot;我爱Podcast | Podcast中文站&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/52podcast&quot; htmlUrl=&quot;http://52podcast.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;我爱正则表达式&quot; title=&quot;我爱正则表达式&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://iregex.org/feed&quot; htmlUrl=&quot;http://iregex.org&quot;/&amp;gt;
            &amp;lt;outline text=&quot;我的黒纱裙&quot; title=&quot;我的黒纱裙&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.sina.com.cn/rss/1823702565.xml&quot; htmlUrl=&quot;http://blog.sina.com.cn/yingpeng332&quot;/&amp;gt;
            &amp;lt;outline text=&quot;我自然&quot; title=&quot;我自然&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.yankay.com/feed/&quot; htmlUrl=&quot;http://www.yankay.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;效率天阶&quot; title=&quot;效率天阶&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.elcorp.com.cn/elcorprss.xml&quot; htmlUrl=&quot;http://www.elcorp.com.cn&quot;/&amp;gt;
            &amp;lt;outline text=&quot;晨枫小苑&quot; title=&quot;晨枫小苑&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://zhouf601117.blog.163.com/rss/&quot; htmlUrl=&quot;http://zhouf601117.blog.163.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;有{間}客栈&quot; title=&quot;有{間}客栈&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://imcc.blogbus.com/index.rdf&quot; htmlUrl=&quot;http://imcc.blogbus.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;极限手指&quot; title=&quot;极限手指&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://ahei.info/feed&quot; htmlUrl=&quot;http://ahei.info&quot;/&amp;gt;
            &amp;lt;outline text=&quot;林健的BLOG&quot; title=&quot;林健的BLOG&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.linjian.org/feed/&quot; htmlUrl=&quot;http://blog.linjian.org&quot;/&amp;gt;
            &amp;lt;outline text=&quot;枪炮世界 / 装备与生存&quot; title=&quot;枪炮世界 / 装备与生存&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.163.com/gunworld@126/rss/&quot; htmlUrl=&quot;http://blog.163.com/gunworld@126&quot;/&amp;gt;
            &amp;lt;outline text=&quot;武志红的BLOG&quot; title=&quot;武志红的BLOG&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.sina.com.cn/wuzii&quot; htmlUrl=&quot;http://blog.sina.com.cn/wuzii&quot;/&amp;gt;
            &amp;lt;outline text=&quot;游戏人生&quot; Title=&quot;游戏人生&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.yulefox.com/?feed=rss2&quot; htmlUrl=&quot;http://www.yulefox.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;潇水的博客&quot; title=&quot;潇水的博客&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.sina.com.cn/rss/xiaoshuiblog.xml&quot; htmlUrl=&quot;http://blog.sina.com.cn/xiaoshuiblog&quot;/&amp;gt;
            &amp;lt;outline text=&quot;牛来疯&quot; title=&quot;牛来疯&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/od7d&quot; htmlUrl=&quot;http://www.duniuniu.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;科罗廖夫的军事客厅&quot; title=&quot;科罗廖夫的军事客厅&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://gaosga.blog.163.com/rss/&quot; htmlUrl=&quot;http://gaosga.blog.163.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;笑对人生，傲立寰宇&quot; title=&quot;笑对人生，傲立寰宇&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://cid-1ab3bc993db84fd7.users.api.live.net/Users(1924088832168841175)/Main?$format=rss20&quot; htmlUrl=&quot;http://dahuasky.wordpress.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;简单的龙浩&quot; title=&quot;简单的龙浩&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/longhao&quot; htmlUrl=&quot;http://www.longtask.com/blog&quot;/&amp;gt;
            &amp;lt;outline text=&quot;结构之法 算法之道&quot; title=&quot;结构之法 算法之道&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.csdn.net/v_JULY_v/rss/list&quot; htmlUrl=&quot;http://blog.csdn.net/v_july_v&quot;/&amp;gt;
            &amp;lt;outline text=&quot;编译点滴&quot; title=&quot;编译点滴&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.lingcc.com/feed/&quot; htmlUrl=&quot;http://www.lingcc.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;胖子康&quot; title=&quot;胖子康&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feed.feedsky.com/moorekang&quot; htmlUrl=&quot;http://www.moorekang.com&quot;/&amp;gt;
            &amp;lt;outline text=&quot;褪墨|时间管理、个人提升和演讲技巧&quot; title=&quot;褪墨|时间管理、个人提升和演讲技巧&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://www.mifengtd.cn/feed&quot; htmlUrl=&quot;http://www.mifengtd.cn&quot;/&amp;gt;
            &amp;lt;outline text=&quot;许小年&quot; title=&quot;许小年&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://xuxiaonian.blog.sohu.com/rss&quot; htmlUrl=&quot;http://xuxiaonian.blog.sohu.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;谢国忠&quot; title=&quot;谢国忠&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://xieguozhong.blog.sohu.com/rss&quot; htmlUrl=&quot;http://xieguozhong.blog.sohu.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;赖勇浩的编程私伙局- CSDN博客&quot; title=&quot;赖勇浩的编程私伙局- CSDN博客&quot;
                type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds.feedsky.com/csdn.net/lanphaday&quot; htmlUrl=&quot;http://blog.csdn.net/blogrss.aspx?username=lanphaday&quot;/&amp;gt;
            &amp;lt;outline text=&quot;郭凯经济笔记&quot; title=&quot;郭凯经济笔记&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://www.kaieconblog.net/feed/&quot; htmlUrl=&quot;http://www.kaieconblog.net&quot;/&amp;gt;
            &amp;lt;outline text=&quot;酷壳– CoolShell.cn&quot; title=&quot;酷壳– CoolShell.cn&quot;
                type=&quot;rss&quot; xmlUrl=&quot;http://coolshell.cn/feed&quot; htmlUrl=&quot;http://coolshell.cn&quot;/&amp;gt;
            &amp;lt;outline text=&quot;阮一峰的网络日志&quot; title=&quot;阮一峰的网络日志&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds.feedburner.com/ruanyifeng&quot; htmlUrl=&quot;http://www.ruanyifeng.com/blog/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;陈志武&quot; title=&quot;陈志武&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://chenzhiwu.blog.sohu.com/rss&quot; htmlUrl=&quot;http://chenzhiwu.blog.sohu.com/&quot;/&amp;gt;
            &amp;lt;outline text=&quot;陈硕的Blog&quot; title=&quot;陈硕的Blog&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://feeds.feedsky.com/csdn.net/Solstice&quot; htmlUrl=&quot;http://blog.csdn.net/blogrss.aspx?username=Solstice&quot;/&amp;gt;
            &amp;lt;outline text=&quot;陈贤安&quot; title=&quot;陈贤安&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://cxa.im/blog/feed/&quot; htmlUrl=&quot;http://cxa.im/blog&quot;/&amp;gt;
            &amp;lt;outline text=&quot;韩寒_新浪博客&quot; title=&quot;韩寒_新浪博客&quot; type=&quot;rss&quot;
                xmlUrl=&quot;http://blog.sina.com.cn/rss/1191258123.xml&quot; htmlUrl=&quot;http://blog.sina.com.cn/twocold&quot;/&amp;gt;
        &amp;lt;/outline&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/opml&amp;gt;
&lt;/pre&gt;


&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>我的未来技术观</title>
   <link href="http://qinjian623.github.com/2012/04/28/future_of_tech"/>
   <updated>2012-04-28T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/04/28/future_of_tech</id>
   <content type="html">&lt;p&gt;
从目前来看，IT程序员或者是软件工程师的数量依然需求明显。特别是所谓的&quot;码农&quot;，本应该是创造性的工作，正在变得机械化。程序设计的未来应该是什么样子？计算机在未来世界中会承担一个什么样子的角色呢？
&lt;/p&gt;
&lt;p&gt;
随着自然语言处理和人工智能的发展，语音识别正在变得越来越通用。语音输入已经在Chome、Apple的设备上实现了应用。特别是Siri在语义上的进步。这里，显然是一个计算机发展的方向，未来计算机与人类的交互正在这些基础上更加深入。鼠标、键盘将会消失，因为这些东西注定了输入效率的低下，人类与计算机的交互，应当越来越自然化，语言、表情、动作，最终会成为人机交互的接口，更甚者，直接的思考的交互也会如此，在这样的基础上，人与人之间的交互也会借助于此变得更加方便。一切都成为了数字化的东西。交流的成本相比现在更加降低，即使从目前的角度来看，现在的交流成本已经很低了。
&lt;/p&gt;
&lt;p&gt;
交流成本的降低，带来的一个问题是必然的，信息的爆炸。因此可以遇见，未来的信息规模会更大，可能会包含每个人的思考记录、记忆等等。相机DV这类，最终会消失，或者仅仅是一种艺术的形式，而不在是记录生活的工具，因为记忆都会存储，所见、所闻都可以搜索和查看，从这点看，搜索，依然是重中之重，信息太多，即使个人的信息就难以查找，将来的每个人应该包含一个搜索引擎，然后在结合整个世界的大规模的引擎组成推理、推荐系统。
&lt;/p&gt;
&lt;p&gt;
纸质文档的消失似乎也像相机和DV一样必然，所思所想都会记录在数字化的存储中，那么数字签名成为了一个重要方面，或者更大的方面就是身份认证，如何防止数字化的信息被人伪造。还有个人信息的保护。隐私与政府管制总是矛盾体，即使在数字化的背景下。分布式的存储和集中式的存储会结合起来。分别存储个人的和公开的信息。每个人应该会有一个终生唯一数字ID，以保证认证。微博这种形式会不会继续存在呢？应该会有这种形式，但是变得理所当然，而不是一个专门的应用。匿名应用会是一个热点，因为数字ID其实实现的就是实名制，是否真的可以实现匿名ID真的很难确定。但是，有管制的地方总会有黑市。
&lt;/p&gt;
&lt;p&gt;
信息爆炸的结果就是对硬件的要求增加，信息需要存储、运输、处理，所以，存储空间会更大、网络带宽会更大、处理器性能会更大，所以分层缓存思想一定还会存在，只是粒度上更大，个人的终端存储不够只能存储部分内容，服务端的存储、处理能力则更强。就如同换页，只不过，目前是通过总线在内存、硬盘、CPU缓存之间换页，将来会有一个更大的粒度，用户终端、家庭终端到最大的服务器端之间的换页，所以网络速度必须要足够快速。
&lt;/p&gt;
&lt;p&gt;
虚拟现实技术也会成为重要的支持部分，现在的终端如手机、ipad等等，最终也会渐渐消失，变成嵌入式的人体的一部分，或者外在的一部分。但是所有的交流接口，都已经通过虚拟现实，将信息和物理世界联系在一起。两人通过终端进行的会议，会有桌子、展板等等，只是都是通过数字化模拟来实现。现在看来艰难的异地恋、公司会议效率低下等等，都会因为虚拟现实技术的发展变得合理。
&lt;/p&gt;
&lt;p&gt;
计算机模拟的发展，特别是计算机在推理上的模拟。计算机应当会有可推理可归纳的能力或者说可进化的能力，可能会依赖于遗传算法等等，利用随机的带来的跳动，来实现自我进化，但是这一进化是无法预测方向的，必须通过模拟来保证剔除坏的进化。计算机对物理世界的模拟能力也会增强，这是大规模数字化、计算能力增强带来的必然结果，数据分析也会形成对物理世界的模拟的指导和预测，因为数据相比现在，有更多可以挖掘的方向。
&lt;/p&gt;
&lt;p&gt;
由于终端的普及，以后任何人对于计算机的应用都会有良好的技能。但是，是否还是需要编程人员呢？日常的编程，应当会消失，因为人工智能足够好、所有人的计算机技能也足够好，那么日常编程会交给每个人自己去实现，类似现在的脚本，只不过会更加简单，通过语言描述就可以，AppleScript就很类似。未来的程序设计，应当会集中在基础设施的提供上，为上层提供编程的接口，或许就是所谓的元编程。提供机制，而不在是现在的各种机械的形式。计算机自己的进化能力一旦养成，程序设计人员的工作量就会更加少，集中在如何优选程序，如何进化的更加优秀上，那么工程性的重要性就要渐渐低于研究性的重要性。所以，未来码农会小时，工程性的工作会减少，创新性、研究性的工作内容会成为主要的部分。程序设计的目的不再是提供应用，而是提供编程的基础设施，让用户来实现自己的想法。
&lt;/p&gt;
&lt;p&gt;
多么美好的世界。人类走入创新的世界，或者如I，robot、黑客帝国那样，沦为计算机的奴隶。技术永远是一个双刃剑。
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>VPN访问facebook及twitter不能简单记录</title>
   <link href="http://qinjian623.github.com/2012/04/09/gfw_analytics"/>
   <updated>2012-04-09T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/04/09/gfw_analytics</id>
   <content type="html">&lt;p&gt;
尝试查找标题中所述问题的原因。目前测试环境依然xp中。
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;facebook、twitter尝试访问&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;

&lt;p&gt;在VPN链接情况下，尝试访问facebook或者twitter，浏览器结果显示为超时。
&lt;/p&gt;
&lt;p&gt;
于是在服务器上测试，可以访问，ping通，一切正常。
&lt;/p&gt;
&lt;p&gt;
于是对比了本机和服务器的ping结果，发现两者DNS后的ip不同，尝试直接用本机DNS获得的ip地址访问，不能。于是查询该IP地址，非美国（爱尔兰、澳大利亚、新西兰、意大利等等）
&lt;/p&gt;
&lt;p&gt;
显然DNS解析上出了问题，抓包，trace，最后确认本机DNS请求没有通过VPN的加密通道，而是通过国内网，也即DNS被防火墙污染。
&lt;/p&gt;
&lt;p&gt;
首先想法，使用Google的8.8.8.8的DNS服务器，试图绕过国内的DNS。无效，DNS返回ip依然是错误的。怀疑防火墙劫持了DNS通讯。开始验证。
&lt;/p&gt;
&lt;p&gt;
指定某确定不存在DNS服务的IP为DNS，尝试查询各网站，理论上应该所有网站都是DNS解析错误，但是对于facebook、twitter的解析竟然依然能够拿到ip地址。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;结论&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;国内网络将所有在关键词列表中的网站的DNS查询过滤，返回虚假信息。实施DNS欺骗。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;youtube的对比&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;对youtube的网站访问成功，开始疑惑，测试ping youtube网站，依然有欺骗，但是浏览器竟然能够浏览。发现对youtube的DNS查询还包括其他google china的查询，怀疑是浏览器问题，Chrome有做多余工作。
&lt;/p&gt;
&lt;p&gt;
于是换为IE和Firefox，为时间超时。那么与怀疑吻合。
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4&quot;&gt;youtube的原因&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4&quot;&gt;

&lt;p&gt;好奇换为非VPN网络情况下，Chrome访问youtube情况。结果为连接被重置。
&lt;/p&gt;
&lt;p&gt;
国内网络在直接IP访问的情况下实施reset。
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5&quot;&gt;解决方法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5&quot;&gt;

&lt;p&gt;&lt;a href=&quot;http://support.microsoft.com/kb/311218/zh-cn&quot;&gt;http://support.microsoft.com/kb/311218/zh-cn&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
中的替代方法说明即可。打开键入内容可能为regedit而不是regedit32
&lt;/p&gt;
&lt;p&gt;
该解决方法的参考资料链接为 &lt;a href=&quot;http://ihipop.info/2010/06/1284.html&quot;&gt;http://ihipop.info/2010/06/1284.html&lt;/a&gt;
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>个人之于群体-BlackMirrorS01E02</title>
   <link href="http://qinjian623.github.com/2012/04/05/black_mirror_s01e02"/>
   <updated>2012-04-05T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/04/05/black_mirror_s01e02</id>
   <content type="html">&lt;p&gt;
一曲单纯的恋歌，却被群体的酱缸埋葬。
&lt;/p&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;败于众手&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
本以为自己的歌声能够给自己带来理想的实现，可是当来到达人秀中，面对群体的压力，最终放弃抵抗，成为了一个自己不想成为的人。逼良为娼，不仅仅是施加暴力的人，也包括如鸭子般在旁边看热闹的群体们，他们才是构成这样一个大背景的主体。而群体的暴力更是在被挑逗后暴露出人类最本性的恶。当女主角最终说出了同意，对那群乌合之众的憎恨，油然而生，但是殊不知，当个人成为酱缸中的一员时，只怕是有过之而不及。
&lt;/p&gt;
&lt;p&gt;
男主角和达人秀彻底决裂后，开始了忍辱负重的努力，这仿佛让人们 看到了“知行合一”胜利的曙光，那份努力是否是理智的结果尚未可 知，可是那份冷静，那份1500000只为实现自己的目的的，让人不禁 回忆起《基督山伯爵》和《肖申克的救赎》，希望冉冉升起，满足了 人类因为自己的视界和能力所限带来的对长期计划严格执行最终大获 全胜的皆大欢喜的结局的渴望。是的，一切都是计划好的，连让人头 脑不清的饮料，男主角都轻松躲过。哈哈，终于来到了聚光灯下，一 番发自内心的演讲，没有蛊惑人的饮料，没有咄咄逼人的主持人，没 有群体的疯狂。让我心潮澎湃，是的，你们台下这群**，该醒醒了，主席台上的那群装*犯们，你们别演了。胜利就在眼前。只可惜完美的计划，最终还是败在了主持人的那段话，哈哈，你演的真漂亮，我们收了你了，别骑车了，享受生活吧。背景应景的发起了欢呼，哈哈，一群电子人物，因为是否是真人真的不重要，因为背景便是你我他，又哪需那份多余的工作来个真人演。在这里，男主角终于升华，瞬间的那份渴望的眼神让人难忘，万民爱戴的神人，终究成功的吸引了男主角。跳不出的轮回在我失望的情绪下又一次上演，这tm是个什么样的世界？
&lt;/p&gt;
&lt;p&gt;
终于败给了乌合之众的欢呼，别以为自己有多么特立独行，多么的目标明确，多么的思想独立。可怕的诛心，将你体制化，将你酱缸化。
&lt;/p&gt;
&lt;p&gt;
做一个宁可被毁灭也不会被打败的人，做一个渴望暴风雨的人。
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>有关VPN在VPS上的配置</title>
   <link href="http://qinjian623.github.com/2012/04/04/VPN_on_VPS"/>
   <updated>2012-04-04T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/04/04/VPN_on_VPS</id>
   <content type="html">&lt;p&gt;
简单记载一下VPN在VPS的配置经过:
&lt;/p&gt;
&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1&quot;&gt;安装pptpd，具体根据发行版。&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1&quot;&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2&quot;&gt;编辑/etc/pptpd.conf&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2&quot;&gt;

&lt;p&gt;去掉#的注释
option /etc/ppp/pptpd-options
localip 192.168.0.1
remoteip 192.168.0.234-238,192.168.0.245
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3&quot;&gt;编辑 /etc/ppp/pptpd-options 文件，设置 DNS&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3&quot;&gt;

&lt;p&gt;找到 ms-dns 去掉 # 号，并修改 DNS 地址
&lt;/p&gt;
&lt;p&gt;
ms-dns 8.8.8.8
ms-dns 8.8.4.4
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4&quot;&gt;编辑 /etc/ppp/chap-secrets ，加入用户&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
用户名 pptpd 密码 *
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-5&quot;&gt;编辑 /etc/sysctl.conf 文件，找到以下行，去掉 # 号注释符号&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5&quot;&gt;


&lt;p&gt;
net.ipv4.ip&lt;sub&gt;forward&lt;/sub&gt;=1
&lt;/p&gt;
&lt;p&gt;
然后在运行以下命令使配置生效
&lt;/p&gt;
&lt;p&gt;
sysctl -p
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-6&quot;&gt;向 nat 表中添加一条规则，如果没有iptables记得安装:&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6&quot;&gt;


&lt;p&gt;
iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j
MASQUERADE
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-7&quot;&gt;保存状态，免得重启无效&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7&quot;&gt;

&lt;p&gt;iptables-save &amp;gt; /etc/iptables-rules
&lt;/p&gt;
&lt;p&gt;
然后修改 /etc/network/interfaces 文件，找到 venet0 的结点，添加 pre-up 那一行：
auto venet0
iface venet0 inet static
pre-up iptables-restore &amp;lt; /etc/iptables-rules
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-8&quot;&gt;手动处理的情况&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8&quot;&gt;


&lt;p&gt;
iptables-restore /etc/iptables-rules
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-9&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9&quot;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jkey.lu/install-pptp-on-ubuntu/&quot;&gt;http://blog.jkey.lu/install-pptp-on-ubuntu/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wangyan.org/blog/debian-pptp-vpn.html&quot;&gt;http://wangyan.org/blog/debian-pptp-vpn.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>亲身体验</title>
   <link href="http://qinjian623.github.com/2012/03/17/experience_by_self"/>
   <updated>2012-03-17T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/03/17/experience_by_self</id>
   <content type="html">&lt;p&gt;
总是面对别人对我们说，应该应该如何，如果不那样，就会如何。就像代码中掺入了太多的if-else，这样的结构总是让人感觉丑陋的。往往，迷惘也就产生于此，因为迷惘不是什么都不知道，也不是什么都知道，恰恰是雾里看花时，迷惘才出现。 
&lt;/p&gt;
&lt;p&gt;
当if-else出现太多时，代码的可读性往往直线下降，因为逻辑关系上的分支太多了，普通人对于任何事情的上下文的记忆都是有限制的，当逻辑分支过多，就会超出人的上限。当快速缓存满了之后，剩下的性能问题就显而易见了。而人还不仅仅是机器，焦虑往往还伴随着思考受限。那么写下来，成为了一个解决方法，或者扩大自己的记忆力，但是，人都是会碰到自己的上限的，写在纸上成为了剩下的选择，就如同对象的序列化。当需要转储内存对象时，序列化总是第一步。那么如何确定序列化格式，让重新载入可以更好、更快，始终是一个重要议题，譬如，各种清单、TODO List、脑图。这些都是为了在不同的应用背景下，可以让其中的内容能够更加快速的载入被人来处理的设计。能够快速载入的标准似乎很难界定，不同的人会有不同的背景，带来的标准也不同，更何况不同的应用背景对其也有很大的影响。有些应用如普通队列，一项一项就可以，有些则需要完全载入，如树形结构。而不同的人也会有很大的不同，对某个知识的形式化可能让刚接触的人不能快速载入，而当熟练掌握后，形式化的简练也可以方便更快的载入，譬如文本文件和二进制载入的区别。合适，永远都是一个重要的主题。 
&lt;/p&gt;
&lt;p&gt;
迷惘，同样会造成焦虑，因为迷惘也会造成逻辑的复杂化，迷惘，不过是面对不明朗的情况。那么往往对真实的情况会有很多种可能性，这就又掉入了混沌理论里，我们可控的往往都是受限的，没人能够控制这样的一个世界。多可能性带来的就是一个巨大无边的决策树，就像逻辑分支更多一样，可是，这里的未知太多，连序列化存储下来的可能性都没有，更无法在大脑的范围内来处理了。面对这样的情况，只有一个途径，就是简化。但是简化的方法却又很多，可以简化未知量，去掉影响因子较小的，可以估算范围，关注自己能力范围内的，可以演化一下再剪枝的。但是，尝试获得全局最优解的可能性是不存在的，能做的可能只是在可见范围内找到一个相对的最优解，可是，&quot;可见范围&quot;却是一个无法准确定义的东西，而&quot;最优解&quot;更是存在一个评价标准的问题。我们往往对自己的&quot;可见范围&quot;有太多的自信，譬如，计划，多少计划真的能够完整实现呢？当不能按照原计划执行的时候，往往就说明了存在自己计划时未考虑的不确定因素，而且这个因素的影响力也达到一个级别。所以，需要控制不确定因素才能保证计划的执行能够进一步，但是不确定因素太多，人类能力却又太小，能够做到的往往就是那么几个不确定因素的控制，比如，标准的作息规律，其实，这也未必真的能够被自己控制。这也譬如系统的稳定性，与外部的接口越多，往往稳定性就越低下，这里的外部相对的内部也是一个可变的定义，可以是一个人、可以是一个家庭、甚至是可以自己的整个社交网络，只要能够将这一个范围纳入自己的控制范围，但是，这种强调控制欲的方法，往往会让人乐在其中而忽略了更大范围内的无法控制的因素。而控制范围扩大本身的影响更是会加剧其他因素的变化和不确定性，单纯的简单模型在现实中能否能够实现准确的预测永远是一个疑问，往往计划需要的就是准确的预测，而不是概率预测。如果按照概率预测，那么就重新掉入了多种可能性的问题中。即使1%的发生概率，考虑其存在后，之后的整个考虑也会由于这一可能性扩大化。更何况，&quot;最优解&quot;的确定更是一个问题，因为不确定造成了评价因素的不确定，可能某一个很好的工作是&quot;最优解&quot;，但是从全局上看，可能由于技术或者政治的发展，该工作很快就消失，这一可能性在20年左右的跨度内是存在的，而20年前对这一工作的存在是否的预测，目前来看也是很难的。那么造成的一个结果就是&quot;最优解&quot;不能过于具体，而应该抽象成为，较高的社会地位、良好的收入等等，但是一旦抽象如此，计划的目标就变得模糊不清而不具备指导意义了。 
&lt;/p&gt;
&lt;p&gt;
历史数据的存在，给我们提供了一个很好的机会用来预测，或者准确的说是猜测。机器学习就是一个依据概率和数据的猜测方法。猜测的成功率，依赖于历史数据的准确和整体趋势的稳定性。历史数据中噪音数据的去除也是一个概率问题。而整体趋势的稳定性，本身也是基于历史数据给出的，谁也不能完全确定这一稳定性在未来是否能够保持下去，当然，如果我们能够进入更底层，确定这些稳定性的影响因素，再确定这些影响因素，就可以很好确定稳定性，但是底层的影响因素或许有更底层的因素，底层的因素或许也是一个概率因素。何况，进入底层的代价到底有多高，也是不确定的。 
&lt;/p&gt;
&lt;p&gt;
譬如科学研究对于不可控因素的隔离、简化，保证了在某一层面上的精确性。而在社会研究中，往往难以隔离不可控因素，或者药物研究在实体上的试验，这些提供的结果往往更加依赖于概率，通过大量样本试图将噪音和不确定因素平均和消除，但是这个原生的原因，带来的是对个体的指导最后还是要回归到&quot;具体问题具体分析&quot;。譬如心理学应该就具备这样的特点。
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>不确定性之于预测和机会</title>
   <link href="http://qinjian623.github.com/2012/02/26/possibility"/>
   <updated>2012-02-26T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/02/26/possibility</id>
   <content type="html">&lt;p&gt;
我们总是认为经济大潮已经过去，一代的荣光属于那样的一个时代，但是这是不是我们自己的历史的局限性带来的，我们总是站在历史的角度来看待曾经的时代，却总是没有能力看到自己的时代。其实这一代的荣光也属于自己的这样的一个时代，经济大潮往往总是存在的，或许&quot;大萧条&quot;那样的时代真的没有经济的大潮，但是其他的时间段里，经济总是保持着自己的增长，或许很快或许很慢，但是总有平均数的上下，经济总是有它的增长点的，经济的增长，总是在某个领域、某个方向发力，获得整体经济平均值以上的收益，即使在某一个领域，也有平均值上下之分，只是可能方差较小，整体稳定。但我们抱怨经济状况不行的时候，是不是应该反思一下，是不是自己所见真的就是这个世界现实。我们或许只不过是缺少发现机会的眼力，还有面对机会勇敢投入的魄力，因为未来是不可测的没有谁能够预见自己的投入能否真的获得收益，收获永远都存在，即使是完全的投入失败，也会有经验和教训的收获，但是我们关注的是收益，因为收益才是自己的投入的理想结果，而收获就是一个任何时刻都存在的副作用，收益是客观的自己预计的目标，而收获往往更多的与自己的心态有关系，更多的与自己的主观相关。 
&lt;/p&gt;
&lt;p&gt;
主观的判断往往并不可靠，因为一旦进入主观的判断，一件事情完全可以主观的判断为失败，或者主观的判断为成功，或者两者都存在，实际的数据才能更好的让自己判断好，但是一个更加难以让人接受的事实就是，实际的数据也会是主观的，没有谁能够判断到底一个数据是不是主观的，我们所见是不是正是这个世界，如缸中之脑。真实世界和虚拟世界是无法让人分辨的。我们所见的往往都是我们所想的，没有谁能逃过自己的有色眼镜来看待世界，所谓的客观，或许不过是我们主观中的客观。正如面对同样的数据，不同的人可以分析出不同甚至相反的结果，而从其角度来看逻辑也是完备的。从另外的一个层面来看，数据的实际性更是难以保证，特别是我们不能够接触到原始数据，而是通过其他间接途径获得其他的间接数据一样，如媒体的新闻、出版的书籍。这些数据往往也已经经过一步主观的过滤，不论是否是有意识的。&quot;噪音&quot;数据也自然的会存在这些数据里，怎样的过滤这些噪音数据，永远是一个难题，因为每个人的时间和精力有限，而数据永远是爆炸性的。 
&lt;/p&gt;
&lt;p&gt;
权衡集中于某些数据是唯一的解决方法。而权衡需要一个良好的算法来提供最优或者近似最优的解，但是这又回到了未来不可测的原点，面向未来的算法带来了太多的不确定性，换句话说便是解空间过大，趋向甚至直接是无限，一旦遇到这样的情况，显然这种算法是不存在的。那么如何尽量的保证面向未来的算法的可能性，我们可以分析历史数据看到趋势，但是这样的局势是否在未来中可能出现，取决于在面向未来的不确定性的大小，一旦不确定性小到一个可以接受的阈值，那么我们面向未来的算法就可以提供可以接受的误差范围的预测。譬如天气预报，近一天的天气可以相对准确，因为不确定性已经很小，数据已经可以观测到气压、云层，大致的趋势已经可以确定，而将范围加大，那么由于不确定性的增加，造成了预测的不可能。对于二十四节气这样的以年为单位的预测，是经过多年的经验的观测获得的数据，而目前的气候还是在这些多年观测的范围内，也即确定性通过这些多年的观测获得了增加，保证了二十四节气的准确，但是，一旦气候因素超出了多年的观测的范围，那么二十四节气这一预测也就失去了作用。这让我们更加明确一点，即使某个预测算法实现了多次的成功预测，我们也要警惕，这一算法的历史基础在当前的情况下是否依然存在，这往往是国情不同带来的相同情况的不同结果。同时，如果我们需要保证我们对某一方面的预测，我们就要保证不确定性在可接受的范围内，譬如，个人计划的制定，当我们可以在一周的范围内减少不确定性，那么我们就可以在一周的范围内获得良好的计划执行。当我们的不确定性控制范围越大，那么就意味着我们计划的良好执行的时间跨度越大，但是显然，在混沌理论的基础上，我们没有办法实现这样的一个控制范围的无限扩大，随着时间或者空间跨度的增加，不确定性的增加往往更大，是否是指数级未必，但是要保证确定性而付出的投入也自然会进一步加大了无法接受。 
&lt;/p&gt;
&lt;p&gt;
可见，对于面向未来的预测算法，只能够从不确定性上优化，尽力减少不确定性，那么有两种途径，一、包括更多的不确定因素，即将更多的不确定因素纳入考虑范围成为确定性因素。二、减少不确定因素，即更好的控制外部环境，减少不确定因素，也就是尽量的理想化模型。
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>有关选择</title>
   <link href="http://qinjian623.github.com/2012/02/19/about_your_choices"/>
   <updated>2012-02-19T00:00:00+08:00</updated>
   <id>http://qinjian623.github.com/2012/02/19/about_your_choices</id>
   <content type="html">&lt;p&gt;
自己在面对选择的时候，总是那么犹豫，或者说是恐惧。面对这样的情况，自己总是希望能够找到自己这样的原因。或许是，因为自己一直生活在如同计划经济的世界里，无需更多的选择，或者说是没有更多的选择，而渐渐地，生活进入了选择的阶段而不再是原先那样的线性系统，一步步总是会有固定的反馈。面对这么多的因素，如同混沌理论那样，让自己再也没法用原来的处理仅仅的几个已知量的方法在处理这样一个复杂的多因素的状况。生活不是读书，不是解方程，终于必须面对的就是选择。 
这让自己想到了TED中一集关于选择的节目，面对这样一个充满选择的状态，或许&quot;市场经济&quot;的头脑更能让自己的做出真正的选择，而不是依然生活在自己&quot;计划经济&quot;的世界里，在每个选择中，看到收益和成本，看到可能性和风险，害怕选择，或许不过是害怕冒险，因为选择就意味着接受风险。如果没有选择，那么风险是必然的，又有什么担忧的必要呢？或许在一个社会里，其实每个人都是商人，每个人都是自己的投资人，成功者都是具有商业头脑的人，敢想敢干的人，永远具有创新精神的人，时时刻刻都能保持自己思维清晰的人。那些不是商人的人，也终将如同整个经济体系中被雇佣的人一样，不具有更多的影响力和控制力，为人所用，而不是为自己所用。不过是随波逐流，如浮萍一般。不禁让人想起那些抱怨人类因为生命短暂而限制了个体的视野，而做出很多鼠目寸光的决定。是的，当一个人能够站在几十年或是更长的跨度上看待问题时，一定是不同的，或许历史便是因此而存在，让我们的个人能够站在更广阔的角度来看问题。但是人类短暂可笑的生命时间却成为了最大的物理限制，当我们计划着更长远的计划时，便发现，时间将人们的控制慢慢剥离，剩下的不过是对自己的无力的置之一笑。或许随着技术的发展，记录的信息和数据会越来越丰富，人们能够在历史的角度上获取更多的数据和信息，那么对未来的估计和预测，会更加符合规律，对历史和时间的责任，会成为每个个体不可推卸的一部分。 
&lt;/p&gt;
&lt;p&gt;
商业精神，一定会变得越来越重要，如同海盗一般，是的，生活的海洋里，我们就是Jack Sparrow。
&lt;/p&gt;</content>
 </entry>
 
 
</feed>
