#+BEGIN_HTML
---
layout: post
title: Baking Pi - Operating Systems Development Lesson 1
tags: [os]
---
#+END_HTML

* 课时1 OK01

本课时主要在于说明最基本的起步和怎样打开Raspberry Pi上的'OK' LED灯,灯的
位置在RCA和USB接口附近.

** 起步

我假设你已经访问了 [[http://www.cl.cam.ac.uk/freshers/raspberrypi/tutorials/os/downloads.html][下载]][fn:1] 页面获得了其中的GNU的工具链.同时在该页面上,也
存在一个叫做 OS Template[fn:2]的文件.请把它下载下来,解压到新建的文件夹内.


** 开始
目前为止,你应该已经完成解压模板文件了.请在其'source'文件夹中创建一个名称
为'main.s'的文件.改文件会包含带开发的操作系统的代码.用文本编辑器打开,准
备向其中写入汇编代码.Raspberry Pi使用的是ARMv6的汇编代码,因此,我们也需要
根据ARMv6的语法和要求来写代码.

拷贝如下代码:
#+BEGIN_SRC MASM
.section .init
.globl _start
_start:
#+END_SRC
当然,目前什么都不会发生,这些代码都是等待给汇编器的指令.汇编器是翻译汇编
代码到二进制代码的程序.汇编代码中,每行就是一个新的指令.其中第一行告诉汇
编器[fn:3]放置我们代码的位置.OS模板文件会让 *.init* 的模块首先输出.这里比较
重要,因为我们需要控制具体哪段代码首先执行.不这么做的话,代码根据字典顺序
来执行. *.senction* 指令就是告诉汇编器把代码放哪里,代码范围是从该点开始
一直到下个 *.section* 或者文件尾.

后面两行只是为了防止警告信息,没有重要意义.

** 第一行代码
现在我们开始真正的编写代码.代码的作用是告诉处理器将 0x20200000存入寄存器
r0.显然会涉及两个问题,寄存器是什么和为什么是0x20200000这个数字.

寄存器是处理器内部的一小片存储单元,用于存储处理器目前工作中需要使用的数
字.他们的数量很少,且基本都有特定的作用,具体作用稍后再说.共有13个通用寄存
器,分别编号为(r0...r12),其不具有特定作用,可以随意使用.例子中,我们按照顺
序,就使用了第一个寄存器,不过随便用其中的任何一个也没有关系.当然,随后的代
码中使用寄存器就需要保持一致.

0x20200000是个16进制形式的数字.具体16进制数字,可以见下面的介绍:
等待处理[fn:4]

所以第一个指令就是将数字20200000_16 载入r0寄存器.看起来没什么作用,其实不
然.在计算机中,有很多设备和内存块.为了能够访问他们,我们就给其中每个都赋予
一个地址.如同邮编或者网址,为的是能够让我们识别设备或者内存块的位置.计算
机中的地址都是数字编码,所以20200000_16成为GPIO控制器的地址.这其实是硬件
制造商设计的地址,制造商可以随意指定地址,只要地址没有冲突就可以.具体的地
址信息可以从硬件的手册中获得, +这些地址没有被别的系统指定,而且一般都是很
大的约整数+ [fn:5]

** 成功输出
读过手册后,我就知道我们需要发送两个消息给GPIO控制器.我们必须让控制器能够
理解我们的消息,一旦这样,控制器就会按照我们所愿打开OK LED灯.由于这是个十
分简单的芯片,所以我们只用很简单的发送几个数字就可以了.

#+BEGIN_SRC MASM
mov r1,#1
lsl r1,#18f
str r1,[r0,#4]
#+END_SRC
以上的代码就能够输出到GPIO的第16个针脚上.首先我们向r1寄存器写入一个数字,
然后发给GPIO控制器.





* Footnotes

[fn:1] 译注:目前指向依然是课程的下载地址,未镜像该位置.

[fn:2] 译注:以后叫做OS模板

[fn:3] 

[fn:4] 译注:TODO等待处理

[fn:5] 译注:TODO没有理解

